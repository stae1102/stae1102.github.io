---
layout: post
title:  "29 Feb TIL: SQL 조인"
excerpt: "SQL Join"
date:   2022-02-29 23:41:00 +0900
categories: 
  - Study
tags:
  - TIL
---

### 4-2-1. 내부 조인

#### 일대다 관계의 이해

두 테이블의 조인을 위해서는 테이블이 **일대다(one to many)** 관계로 연결되어야 합니다. 데이터베이스의 테이블은 여러 정보를 주제에 따라 분리해서 저장하는 것이 효율적입니다. 이 분리된 테이블은 서로 **관계**를 갖고 있습니다.  

일대다 관계란 한쪽 테이블에는 하나의 값만 존재해야 하지만, 연결된 다른 테이블에는 여러 개의 값이 존재할 수 있는 관계를 말합니다. 일대다 관계에서 주로 '일'의 데이터를 갖는 테이블에서 식별할 열을 **기본 키(Primary Key, PK)** '다'의 테이블에서 기본 키에 상응하는 열을 **외래 키(Foreign Key, FK)**라고 합니다.

#### 내부 조인의 기본

대부분의 조인은 2개로 조인합니다. 기본적인 형식은 다음과 같습니다.

```sql
SELECT <열 목록>
FROM <첫 번째 테이블>
  INNER JOIN <두 번째 테이블>
  ON <조인될 조건>
[WHERE 검색 조건]
```

본 교재에서 사용한 sql문입니다.

```sql
USE market_db;
SELECT *
	FROM buy
    INNER JOIN member
    ON buy.mem_id = member.mem_id
WHERE buy.mem_id = 'GRL';
```

첫 번째 테이블은 buy 테이블이며, 두 번째 테이블은 member 테이블입니다. 조인될 조건은 buy 테이블과 member 테이블의 mem_id가 같은 조건일 때이며, buy.mem_id 가 'GRL'인 것만 추출해서 보겠다는 의미입니다.

#### 내부 조인의 간결한 표현

```sql
SELECT mem_id, mem_name, prod_name, addr, CONCAT(phone1, phone2) '연락처'
	FROM buy
		INNER JOIN member
        ON buy.mem_id = member.mem_id;
```
이렇게 표현할 시 **mem_id**가 어느 테이블의 열인지 명확하지 않기 때문에 **테이블_이름.열_이름**으로 표기합니다.

하지만 모든 열을 테이블_이름.열_이름으로 하는 것은 코드도 길어지고 가독성도 떨어지게 됩니다. 이를 간결하게 하기 위해 FROM 절에 나오는 테이블의 이름 뒤에 **별칭**을 부여합니다.

```sql
SELECT B.mem_id, M.mem_name, B.prod_name, M.addr, CONCAT(M.phone1, M.phone2) '연락처'
	FROM buy B
		INNER JOIN member M
        ON B.mem_id = M.mem_id;
```

#### 내부 조인의 활용

내부 조인을 사용하면 두 테이블에 모두 있는 내용만 조인되는 방식입니다. 만약, **양쪽 중에 한곳이라도 내용이 있을 때 조인**하려면 **외부조인**을 사용해야 합니다.

#### 중복된 결과 1개만 출력하기

앞서 배운 DISTINCT 문을 사용해 출력되는 데이터를 중복 없이 확인할 수 있습니다.

```sql
SELECT DISTINCT M.mem_id, M.mem_name, M.addr
	FROM buy B
		INNER JOIN member M
        ON B.mem_id = M.mem_id
	ORDER BY M.mem_id;
```

### 4-2-2. 외부 조인

* 내부 조인은 두 테이블에 모두 데이터가 있어야만 결과가 나옵니다. 이와 달리 외부 조인은 한 쪽에만 데이터가 있어도 결과가 나옵니다.

#### 외부 조인의 기본

외부 조인은 두 테이블을 조인할 때 필요한 내용이 한 테이블에만 있어도 결과를 추출할 수 있습니다.

```sql
SELECT <열 목록>
FROM <첫 번째 테이블(LEFT 테이블)>
  <LEFT | RIGHT | FULL> OUTER JOIN <두 번째 테이블(RIGHT 테이블)>
  ON <조인될 조건>
[WHERE 검색 조건];
```

```sql
SELECT M.mem_id, M.mem_name, B.prod_name, M.addr
	FROM member M
		LEFT OUTER JOIN buy B
        ON M.mem_id = B.mem_id
	ORDER BY M.mem_id;
```

LEFT OUTER JOIN 문의 의미를 '왼쪽 테이블(member)의 내용은 모두 출력되어야 한다' 정도로 해석하면 기억하기 쉽습니다.

RIGHT OUTER JOIN으로 동일한 결과를 출력하고자 한다면 다음과 같이 작성할 수 있습니다.

```sql
SELECT M.mem_id, M.mem_name, B.prod_name, M.addr
	FROM buy B
		RIGHT OUTER JOIN member M
        ON M.mem_id = B.mem_id
	ORDER BY M.mem_id;
```
이것은 JOIN의 기준이 member로 동일하기 때문입니다.

#### 외부 조인의 활용

외부 조인을 통해 NULL 값을 추출해낼 수도 있습니다. 쇼핑몰 데이터베이스에서 한 번도 구매하지 않은 고객을 찾아내는 등에 응용할 수 있습니다.

```sql
SELECT M.mem_id, M.mem_name, B.prod_name, M.addr
	FROM member M
		LEFT OUTER JOIN buy B
        ON M.mem_id = B.mem_id
	WHERE B.prod_name IS NULL
    ORDER BY M.mem_id;
```

**FULL OUTER JOIN**은 왼쪽 외부 조인과 오른쪽 외부 조인이 합쳐진 것이라고 생각하면 됩니다.

### 4-2-3. 기타 조인

#### 상호 조인

**상호 조인**은 한쪽 테이블의 모든 행과 다른 쪽 테이블의 모든 행을 조인시키는 기능을 말합니다. 그래서 **상호 조인 결과의 전체 행 개수는 두 테이블의 각 행의 개수를 곱한 개수**가 됩니다.

```sql
SELECT *
	FROM buy
		CROSS JOIN member;
```

* ON 구문을 사용할 수 없습니다.
* 결과의 내용은 의미가 없습니다. 랜덤으로 조인하기 때문입니다(서로 의미 없는 데이터끼리 조인되곤 합니다).
* 상호 조인의 주 용도는 테스트하기 위해 대용량의 데티어를 생성할 때입니다.

#### 자체 조인

자체 조인은 자신이 자신과 조인한다는 의미입니다. 그래서 자체 조인은 1개의 테이블을 사용합니다.

```sql
SELECT <열 목록>
FROM <테이블> 별칭 A
  INNER JOIN <테이블> 별칭 B
  ON <조인될 조건>
[WHERE 검색 조건];
```

```sql
SELECT A.emp "직원", B.emp "직속상관", B.phone "직속상관연락처"
	FROM emp_table A
		INNER JOIN emp_table B
        ON A.manager = B.emp
	WHERE A.emp = '경리부장';
```

## 4-3. SQL 프로그래밍

---

# Chapter 9. 폼과 자바스크립트

## 9-1. 폼 요소에 접근하는 여러 가지 방법

### id 값이나 class 값을 사용해 폼 요소에 접근하기

앞서 배운 DOM의 요소에 접근하는 것과 같습니다. querySelector를 이용해 원하는 요소에 접근하고 .value 예약어를 통해 텍스트 필드의 입력값을 추출할 수 있습니다.

### name 값을 사용해 폼 요소에 접근하기

폼 요소에 id나 class 속성이 없고 name 속성만 있다면 name 식별자를 사용해 폼 요소에 접근할 수도 있습니다. 다른 사람이 작성해 놓은 폼 소스에 name 속성만 있다면 이 방법을 사용해야 합니다.  

이 방법을 사용하려면 `<form>` 태그에 name 속성이 지정되어 있어야 하고, `<form>` 태그 안에 포함된 폼 요소에도 name 속성이 있어야 합니다. name 속성을 사용해 폼 요소에 접근하려면 form의 name 값부터 폼 요소의 name 값까지 계층을 따라 하나씩 지정해줍니다.

```js
document.ship.shippingName;
<input type=​"text" class=​"input-box" id=​"shippingName" name=​"shippingName">​
```

```js
document.forms["ship"].elements["shippingName"];
<input type="text" class="input-box" id="shippingName" name="shippingName">
```

id 식별자를 통해 접근하는 방법은 접근할 요소에 id 속성이 지정되어 있다면 쉽게 접근할 수 있지만, name 속성을 사용해 접근하려면 `<form>` 태그뿐만 아니라 접근하려는 폼 요소에 모두 name 속성이 지정되어 있는지 확인해야 합니다.

### 폼 배열을 사용해 폼 요소에 접근하기

이번에는 폼 배열을 사용해 폼 요소에 접근합니다. document의 속성 중 forms 속성은 문서 안에 있는 `<form>` 태그를 모두 가져와 배열 형태로 반환합니다. 이 방법은 **폼 요소에 id나 class속성도 없고 name 속성도 없을 때 사용합니다.**

```js
document.forms
▶ HTMLCollection [form]
```

`<form>` 태그 안에 포함된 요소에 접근하려면 elements 속성을 사용합니다. 해당 폼 안에 있는 폼 요소를 모두 가져오는 속성입니다.

```js
document.forms[0].elements
▶ HTMLFormControlsCollection(3) [input, input, button.order]
```

다음과 같이 폼 배열을 사용한 소스를 입력하면 첫 번째 폼의 첫 번째 요소, 즉 입력한 아이디 값을 가져올 수 있습니다.

```js
document.forms[0].elements[0].value
'qwer1234'
```

## 9-2. 폼 요소에서 입력값 검증하기

값이 입력됐는지, 입력된 값이 정해진 조건에 맞는지 등을 검사하는 이 작업은 흔히 폼 밸리데이션(Form Validation, 입력값 검증)이라고 불립니다. 여기에서는 회원가입 페이지를 예로 들어 입력한 글자 수를 확인하는 방법과 두 개의 필드 내용이 서로 같은지 확인하는 방법을 알아봅니다.

### 교재 실습

## 9-3. 다양한 폼 요소 다루기

자바스크립트를 사용하면 사용자가 폼에서 어떤 항목을 선택했는지 알아낼 수 있습니다.

### 선택 목록 및 옵션 항목에 접근하기

선택목록(`<select>`)은 `<option>` 태그를 사용해 여러 항목을 한꺼번에 지정한 뒤 목록을 펼쳐 원하는 항목을 선택할 수 있는 요소입니다.

선택 목록의 항목은 `<option>` 태그와 함꼐 사용하기 때문에, 자바스크립트에서 선택 목록에 접근하면 선택 목록에 있는 옵션 항목은 배열 형태로 저장됩니다. 그리고 **옵션 항목에 접근하려면 options 속성을 사용**합니다.

options의 속성값 항목에는 option들이 들어있고 length 속성에는 옵션 항목의 개수가 저장되어 있습니다. 그리고 selectedIndex에는 여러 옵션 중 사용자가 선택한 옵션의 인덱스 값이 저장됩니다. 아무 것도 선택하지 않으면 기본 값 0이 출력됩니다.

```js
document.testForm.major.options
```

위의 예처럼 options에 접근할 수 있습니다. 또한, 화면에 표시하는 내용에 접근하려면 innerText 속성을 사용하고, 어떤 값을 서버로 넘겨주는지 알고 싶다면 value 속성을 사용합니다.

```js
document.testForm.major.options[4].innerText
'전기전자공학과'
document.testForm.major.options[4].value
'elec'
```

### 선택 목록에서 사용자가 선택한 옵션 항목 찾아내기

자바스크립트로 선택 목록에 접근하면 배열 형태가 반환되는데, 배열 안에 selectedIndex 속성이 있는 것을 확인했습니다. 이 속성에는 사용자가 선택 목록에서 선택한 항목의 인덱스 값이 저장됩니다. 그래서 콘솔 창에 다음과 같이 입력하면 사용자가 어떤 값을 선택했는지 알 수 있습니다.

```js
document.testForm.major.options.selectedIndex
3
```

이것은 아래와 같이 응용 가능합니다

```js
var selectMenu = document.testForm.major;  // 셀렉트 메뉴를 가져와 selectMenu로 저장
function displaySelect() {
  var selectedText = selectMenu.options[selectMenu.selectedIndex].innerText;		
  alert("[" + selectedText + "]를 선택했습니다.");
}		
```
문서에 있는 선택 목록을 가져와 변수에 저장하고, selectedIndex를 통해 사용자가 선택한 항목을 알아낸 후 이를 사용하여 텍스트 내용을 저장합니다.

### 라디오 버튼과 체크 상자에 접근하기

여러 항목 중에서 원하는 항목을 선택하는 폼 요소 중에는 라디오 버튼과 체크 상자도 있습니다.  

라디오 버튼은 여러 개의 항목 중에서 하나의 항목만 선택할 수 있고, 체크 상자는 여러 개 항목을 선택할 수 있다는 차이가 있습니다.

교재 실습 파일에서 라디오 버튼의 name 값은 subject로 모두 같고, 체크 상자의 name 값은 서로 다릅니다.

웹 브라우저 콘솔 창에 다음과 같이 입력하면 라디오 버튼의 name 값을 가진 요소가 여러 개이기 때문에 RadioNodeList라는 이름의 노드 리스트 형태로 저장됩니다.

```js
document.testForm.subject
▶ RadioNodeList(3) [input, input, input, value: 'speaking']
```

체크 상자는 서로 다른 name 값을 가지기 때문에 name 이름을 직접 입력하여 체크 상자에 접근합니다.

```js
document.testForm.mailing1
```

라이도 버튼 요소나 체크 상자 요소에는 checked 속성이 있는데 기본 값은 false입니다. 그리고 해당 항목을 선택하면 값이 true로 바뀝니다.