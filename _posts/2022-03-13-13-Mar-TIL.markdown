---
layout: post
title: "13 Mar TIL: Node.js 복습"
excerpt: "404 및 에러 처리 미들웨어"
date: 2022-03-13 13:31:00 +0900
categories:
  - Study
tags:
  - TIL
---

# 404 및 에러 처리 미들웨어

app.js 파일을 보면 항상 마지막 즈음에

```js
app.use((req, res, next) => {
    console.log(`${req.method} ${req.url} 라우터가 없습니다`);
    error.status = 404;
    next(error);
});

app.use((err, req, res, next) => {
    res.locals.message = err.message;
    res.locals.error = process.env.NODE_ENV !== 'production' ? err : {};
    res.status(err.status || 500);
    res.render('error');
});
```
이렇게 에러 처리를 하곤 한다. 사실 여태까지 왜 이렇게 app.js를 작성하는가를 이해하지 못한 상태로 공부하고 있었는데 이번에 복습을 통해 알게 되었다.

라우터는 위에서부터 아래로 순서대로 받아들이기 때문에 마지막까지 요청에 응답해줄 라우터가 없을 때, 404 에러(찾을 수 없음)이 발생하는 것이다. 그렇게 에러 status를 404로 설정해주고, next(error)로 에러 처리 미들웨어로 보낸다.

그렇게 하면 에러 처리 미들웨어가 실행되는데, 에러 처리 미들웨어에서 err.status가 있다면 그 값으로 설정하고, 없다면 500으로 처리한다. 최종적으로 라우터가 문제가 없다면 내부 서버 오류인 500인 상태가 된다. 이때, error 내용은 상세하게 나와있어 해커들에게 유리할 수 있기 때문에 노드 상태가 production인 경우에는 빈 객체를 저장하고, 그렇지 않으면 err를 저장한다.

# 폴더 정체성

표현할 단어가 없어서 폴더 정체성이라고 했는데, 각 폴더가 가지는 의미가 중요하다는 것이라고 생각한다.

routes 폴더라고 설정한 경우에는 클라이언트에서 요청을 보낸 것들을 받는 역할을 하는 js 파일들이 들어있어야 한다.

그리고, 렌더링 하는 html은 메인 js 파일에서 렌더링 한다고 설정해 두었던 폴더에 저장하도록 한다.

데이터베이스의 경우에는 models라는 폴더에 넣어두고, index.js로 모든 데이터베이스 모델을 받아서 db 객체에 저장하고, require하여 각 모델에 접근할 수 있도록 한다. 또한 데이터베이스 모델들을 init으로 테이블과 모델이 연결되도록 하고, associate로 테이블 간 관계를 연결한다.

passport는 로그인할 때 정보를 입력받아서 deseiralization하는 용도로 사용한다. 로그인할 때는 그 데이터가 존재하는지 유무가 중요하기 때문에 models폴더(모듈)과 상호작용한다. 또한, local 로그인인지 sns 로그인인지 구별도 한다.

# index.js 파일과 그렇지 않은 파일들

routes에는 다양한 파일들이 있는데 그중 한 파일은 홈 화면을 담고 있는 js파일이다. 주로 페이지를 렌더링하는 역할이다. 그래서 다른 라우터들을 보면 각 메서드에 대해서 res.json(자료) 이렇게 처리를 하는데에 비해, page.js 혹은 index.js처럼 메인 js 파일은 다른 라우터들로 연결해주는 역할을 한다. router.get('/join') 은 페이지를 렌더링하고, 그 url에서 라우터가 get / 등을 할 수 있도록 연결해준다. router.get('/profile')은 프로필 페이지가 정보를 보여주는 것 외에는 post나 delete 역할이 없기 때문에 그냥 렌더링만으로 충분하다.

이제야 이해가 좀 된다! 역시 복습은 필수다 필수!!