---
layout: post
title: "10 Mar TIL: Nodejs 시퀄라이즈 쿼리 활용, CRUD 웹 생성"
excerpt: "Nodejs Utilizing sequelize query, CRUD web"
date: 2022-03-10 15:47:00 +0900
categories:
  - Study
tags:
  - TIL
---

## 7.6.3 관계 정의하기

사용자 한 명은 댓글을 여러 개 작성할 수 있다. 하지만 댓글 하나에 사용자가 여러 명일 수는 없다. 이러한 관계를 **일대다(1:N)** 관계라고 한다.

일대일 관계로는 사용자와 사용자에 대한 정보 테이블을 예로 들 수 있다. 사용자 한 명은 자신의 정보를 담고 있는 테이블과만 관계가 있다. 정보 테이블도 한 사람만을 가리킨다. 이러한 관계를 일대일(1:1) 관계라고 한다.

다대다 관계로는 게시글 테이블과 해시태그 테이블 관계를 예로 들 수 있다. 한 게시글에 여러 개의 해시태그가 달릴 수도 있고, 한 해시태그도 여러 게시글이 달릴 수 있다. 이러한 관계를 다대다(N:M) 관계라고 한다.

### 7.6.3.1 1:N

시퀄라이즈에서 1:N 관계를 hasMany라는 메서드로 표현한다. users 테이블의 로우 하나를 불러올 때 comments의 로우들도 같이 불러올 수 있다. 반대로 belongsTo 메서드도 있다. comments 테이블의 로우를 불러올 때 users 테이블의 로우를 가져온다.

다른 모델의 정보가 들어가는 테이블에 belongsTo를 사용한다. 시퀄라이즈는 모델 간 관계를 파악해서 Comment 모델에 foreignKey인 commenter 칼럼을 추가한다. User 모델의 id 컬럼을 가리키고 있다.

sourceKey의 id와 targetKey의 id 모두 User 모델의 id이다. hasMany에서는 sourceKey를 쓰고, belongsTo에서는 targetKey를 쓴다고 생각하면 된다.

foreignKey를 따로 지정하지 않는다면 이름이 모델명+기본 키인 컬럼이 모델에 생성된다.

### 7.6.3.2 1:1

hasOne 메서드를 사용한다.

예를 들어 이렇게 사용할 수 있다.

```js
db.User.hasOne(db.Info, { foreignKey: 'UserId', sourceKey: 'id' });
db.Info.belongsTo(db.User, { foreignKey: 'UserId', sourceKey: 'id' });
```

### 7.6.3.3 N:M

belongsToMany 메서드를 사용한다.

```js
db.Post.belongsToMany(db.Hashtag, { through: 'PostHashtag' });
db.Hashtag.belongsToMany(db.Post, { through: 'PostHashtag' });
```

양쪽 모델에 모두 belongsToMany 메서드를 사용한다. N:M 관계의 특성상 새로운 모델이 생성된다. through 속성에 그 이름을 적으면 된다. N:M에서는 여러 단계를 거쳐 데이터를 조회해야 하는데, 위의 경우 Post에서 PostHashtag, PostHashtag에서 Hashtag로 정보를 가져온다. 자동으로 생성된 모델들도 `db.sequelize.models.PostHashtag`를 통해 접근할 수 있다.

## 7.6.4 쿼리 알아보기

시퀄라이즈로 CRUD 작업을 하려면 먼저 시퀄라이즈 쿼리를 알아야 한다. SQL문을 자바스크립트로 생성하는 것이라 시퀄라이즈만의 방식이 있다. 쿼리는 프로미스를 반환하므로 then을 붙여 결괏값을 받을 수 있다. async/await 문법과 같이 사용할 수도 있다.

### 로우를 생성하는 쿼리

```
INSERT INTO nodejs.users (name, age, married, comment) VALUES ('zero', 24, 0, '자기소개1');
↓
const { User } = require('../models');
User.create({
  name: 'zero',
  age: 24,
  married: false,
  comment: '자기소개1',
});
```

models 모듈에서 User 모델을 불러와 **create 메서드**를 사용하면 된다. 한 가지 주의할 점은 데이터를 넣을 때 MySQL의 자료형이 아니라 시퀄라이즈 모델에 정의한 자료형 대로 넣어야 한다는 것이다. 이것이 married가 0이 아니라 false인 이유이다. 시퀄라이즈가 알아서 MySQL 자료형으로 바꾼다. 자료형이나 옵션에 부합하지 않는 데이터를 넣었을 때는 시퀄라이즈가 에러를 발생시킨다.

### 로우를 조회하는 쿼리

**findAll 메서드**를 사용한다.

```
SELECT * FROM nodejs.users;
User.findAll({});
```

다음은 users 테이블의 데이터 하나만 가져오는 SQL문이다. 앞으로 데이터를 하나만 가져올 때는 **findOne 메서드**를, 여러 개 가져올 때는 **findAll 메서드**를 사용한다고 생각하면 된다.

```
SELECT * FROM nodejs.users LIMIT 1;
User.findOne({});
```

attribute 옵션을 사용해서 원하는 컬럼만 가져올 수도 있다.
```
SELECT name, married FROM nodejs.users;
User.findAll({
  attributes: ['name', 'married'],
});
```

where 옵션이 조건을 나열하는 옵션이다.

```
SELECT name, age FROM nodejs.users WHERE married = 1 AND age > 30;
const { Op } = require('sequelize');
const { User } = require('../models');
User.findAll({
  attributes: ['name', 'age'],
  where: {
    married: true,
    age: { [Op.gt]: 30 },
  },
});
```

시퀄라이즈는 자바스크립트 객체를 사용해서 쿼리를 생성해야 하므로 Op.gt 같은 특수한 연산자들이 사용된다. 

Op.gt(초과), Op.gte(이상), Op.lt(미만), Op.lte(이하), Op.ne(같지 않음), Op.or(또는), Op.in(배열 요소 중 하나), Op.notIn(배열 요소와 모두 다름) 등이 있다.

```
SELECT id, name FROM users WHERE married = 0 OR age > 30;
const { Op } = require('sequelize');
const { User } = require('../models');
User.findAll({
  attibutes: ['id', 'name'],
  where: {
    [Op.or]: [{ marred: false }, { age: { [Op.gt]: 30 } }],
  },
});
```

시퀄라이즈를 order 옵션을 통해 정렬할 수도 있다. 배열 안에 배열이 있다는 점에 주의해야 한다. 정렬은 컬럼 하나로 하는 것이 아니라 여러 개로 할 수 있기 때문이다.

```
SELECT id, name FROM users ORDER BY age DESC;
User.findAll({
  attributes: ['id', 'name'],
  order: [['age', 'DESC']],
});
```

조회할 로우 개수를 findAll 대신 findOne 메서드를 사용해도 되지만, 다음과 같이 limit 옵션으로 할 수도 있다.
```
SELECT id, name FROM users ORDER BY age DESC LIMIT 1;
User.findAll({
  attributes: ['id', 'name'],
  order: [['age', 'DESC']],
  limit: 1,
})
```
OFFSET도 역시 offset 속성으로 구현할 수 있다.
```
SELECT id, name FROM users ORDER BY age DESC LIMIT 1 OFFSET 1;
User.findAll({
  attributes: ['id', 'name'],
  order: ['age', 'DESC'],
  limit: 1,
  offset: 1,
});
```

### 로우를 수정하는 쿼리

```
UPDATE nodejs.users SET comment = '바꿀 내용' WHERE id = 2;
User.update({
  comment: '바꿀 내용',
}, {
  where: { id: 2 },
});
```

### 로우를 삭제하는 쿼리

```
DELETE FROM nodejs.users WHERE id = 2;
User.destroy({
  where: { id:2 },
});
```
destroy 메서드로 삭제하고 where 옵션에 조건을 적는다.

### 7.6.4.1 관계 커리

findOne이나 findAll 메서드를 호출할 때 프로미스의 결과로 모델을 반환한다(findAll 은 모두 찾는 것이므로 모델의 배열을 반환한다).

const user = await User.findOne({});
console.log(user.nick); 사용자 닉네임

User 모델의 정보에도 바로 접근할 수 있지만 더 편리한 점은 관계 쿼리를 지원한다는 것이다. MySQL로 따지면 JOIN 기능이다. **include** 속성을 사용한다.

```js
const user = await User.findOne({
  include: [{
    model: Comment,
  }]
});
console.log(user.Comments); // 사용자 댓글
```

**어떤 모델과 관계가 있는지를 include 배열에 넣어주면 된다.** 배열인 이유는 다양한 모델과 관계가 있을 수 있기 때문이다. 댓글은 여러 개일 수 있으므로(hasMany) user.Comments로 접근 가능하다. 또는 다음과 같이 댓글에 접근할 수도 있다.

```js
const user = await User.findOne({});
const comments = await user.getComments();
console.log(comments); // 사용자 댓글
```

관계를 설정했다면 getComments(조회), setComments(수정), addComment(하나 생성), addComments(여러 개 생성), removeComments(삭제) 메서드를 지원한다. **동사 뒤에 모델의 이름이 붙는 식이다.**

동사 뒤의 모델 이름을 바꾸고 싶다면 관계 설정 시 as 옵션을 사용할 수 있다.

```js
// 관계를 설정할 때 as로 등록
db.User.hasMany(db.Comment, { foreignKey: 'commenter', sourceKey: 'id', as: 'Answers'});
// 쿼리할 때는
const user = await User.findOne({});
const comments = await user.getAnswers();
console.log(comments); // 사용자 댓글
```

as를 설정하면 include 시 추가되는 댓글 객체도 user.Answer로 바뀐다.

include나 관계 쿼리 메서드에도 where나 attributes 같은 옵션을 사용할 수 있다.

```js
const user = await User.findOne({
  include: [{
    model: Comment,
    where: {
      id: 1,
    },
    attributes: ['id'],
  }]
});
// 또는
const comments = await user.getComments({
  where: {
    id: 1,
  },
  attributes: ['id'],
});
```

댓글을 가져올 때는 id가 1인 댓글만 가져오고, 컬럼도 id 컬럼만 가져오도록 하고 있다.

수정, 생성, 삭제 때는 조금 다른 점이 있다.

```js
const user = await User.findOne({});
const comment = await Comment.create();
await user.addComment(comment);
// 또는
await user.addComment(comment.id);
```

여러 개를 추가할 때는 배열로 추가할 수 있다.

```js
const user = await User.findOne({});
const comment1 = await Comment.create();
const comment2 = await Comment.create();
await user.addComment([comment1, comment2]);
```
관계 쿼리 메서드의 인수로 추가할 댓글 모델을 넣거나 댓글의 아이디를 넣으면 된다. 수정이나 삭제도 마찬가지이다.

### 7.6.4.2 SQL 쿼리하기

만약 시퀄라이즈의 쿼리를 사용하기 싫거나 어렵다면 직접 SQL문을 통해 쿼리를 할 수도 있다.

```js
const [result, metadata] = await sequelize.query('SELECT * FROM comments');
console.log(result);
```

## 7.6.5 쿼리 수행하기

쿼리로 CRUD 작업을 수행합니다. GET /로 접속했을 때의 라우터는 User.findAll 메서드로 모든 사용자를 찾은 후, sequelize.html을 렌더링할 때 결괏값인 users를 넣는다.

시퀄라이즈는 프로미스를 기본적으로 지원하므로 async/await과 try/catch문을 사용해서 각각 조회 성공 시와 실패 시의 정보를 얻을 수 있다. 이렇게 미리 데이터베이스에서 데이터를 조회한 후 템플릿 렌더링에 사용할 수 있다.

---

GET /users와 POST /users 주소로 요청이 들어올 때의 라우터이다. 각각 사용자를 조회하는 요청과 사용자를 등록하는 요청을 처리한다. GET /에서도 사용자 데이터를 조회했지만, GET /users에서는 데이터를 JSON 형식으로 반환한다는 거에 차이가 있다.

GET /users/:id/comments 라우터에는 findAll 메서드에 옵션이 추가되어 있다. req.params.id로 값을 가져올 수 있다 GET /users/1/comments라면 사용자 id가 1인 댓글을 불러온다. 조회된 댓글 객체에는 include로 넣어준 사용자 정보도 들어 있으므로 작성자의 이름이나 나이 등을 조회할 수 있다.

---

댓글에 관련된 CRUD 작업을 하는 라우터이다. POST /comments, PATCH /comments/:id, DELETE /comments/:id를 등록하였다.

* POST /comments 라우터는 댓글을 생성하는 라우터이다. commenter 속성에 사용자 아이디를 넣어 사용자와 댓글을 연결한다.

* PATCH /comments/:id와 DELETE /comments/:id 라우터는 각각 댓글을 수정, 삭제하는 라우터이다. 수정과 삭제에는 각각 update와 destroy 메서드를 사용한다.

---

## 6-2 인덱스의 내부 작동

클러스터형 인덱스와 보조 인덱스는 모두 내부적으로 균형 트리로 만들어진다. 균형 트리는 '자료 구조'에 나오는 범용적으로 사용되는 데이터의 구조이다. 트리에서 제일 상단 뿌리를 루트, 줄기를 중간, 끝에 달린 잎을 리프라고 부른다.

### 6-2-1. 인덱스의 내부 작동 원리

#### 균형 트리의 개념

균형 트리 구조에서 데이터가 저장되는 공간을 **노드**라고 한다.

**루트 노드**(root node)는 노드의 가장 상위 노드를 말한다. 모든 출발은 루트 노드에서 시작되며, **리프 노드**(leaf node)는 제일 마지막에 존재하는 노드를 말한다.

MySQL에서는 **페이지**(page)라고 부른다. 페이지는 최소한의 저장 단위로 16Kbyte 크기를 가진다. 예를 들어 데이터를 1건만 입력해도 1개 페이지가 필요하다.

균형 트리는 데이터를 검색할 때 아주 뛰어난 성능을 발휘한다. 모두 **리프 페이지**만 있으면 처음부터 검색하는 방법밖에 없다(데이터를 처음부터 끝까지 검색하는 것을 **전체 테이블 검색**(Full Table Scan)이라고 부른다).

반대로 균형트리에서 검색할 때는 무조건 **루트 페이지**부터 검색한다. 루트 페이지에서 리프 페이지로 넘어가면서 데이터를 효율적으로 탐색한다.

#### 균형 트리의 페이지 분할

그런데 인덱스를 구성하면 데이터 변경 작업(INSERT, UPDATE, DELETE) 시 성능이 나빠진다. 특히 INSERT 작업이 일어날 때 더 느리게 입력될 수 있다. 왜나하면 **페이지 분할** 작업 때문이다. 페이지 분할이란 새로운 페이지를 준비해서 데이터를 나누는 작업을 말한다. 페이지 분할이 일어나면 MySQL이 느려지고, 성능에 큰 영향을 준다.

### 6-2-2. 인덱스의 구조

#### 클러스터형 인덱스 구성하기

클러스터형 인덱스를 구성하기 위헤 행 데이터를 지정한 열로 정렬한다. 그리고 각 페이지의 인덱스로 지정된 열의 첫 번째 값을 가지고 루트 페이지를 만든다.

#### 보조 인덱스 구성하기

보조 인덱스가 생성되었는데도 입력한 것과 순서가 동일하다. 보조 인덱스는 **데이터 페이지**를 건드리지 않았다. 그리고 별도의 장소에 인덱스 페이지를 생성하였다.

보조 인덱스는 일반적인 책과 같다. 일반적인 책에서도 찾아보기를 만든다고 책의 본문이 바뀌지는 않는다. 대신 별도의 공간에 찾아보기가 만들어진다.

우선 인덱스 페이지의 리프 페이지에 인덱스로 구성한 열(ex. mem_id)을 정렬한다. 그리고 실제 데이터가 있는 위치를 준비한다. 데이터의 위치는 **페이지 번호+#위치**로 기록되어 있다.

#### 인덱스에서 데이터 검색하기

**클러스터형 인덱스**

먼저 루트 페이지를 읽는다. 알파벳으로 구성된 열이라고 한다면 알맞은 위치에서 그 페이지가 가리키는 리프 페이지로 이동한다. 리프 페이지를 읽으며 찾고자 하는 데이터를 탐색한다. 루트 페이지를 읽기 위해서 본 예제에서는 100번 루트 페이지와 1001 리프 페이지를 읽어 총 2개의 페이지를 통해 이름을 알아냈다.

---

**보조 인덱스**

인덱스 페이지의 루트 페이지(10번), 리프 페이지(200번)을 읽는다. 그리고 데이터 페이지(1002번)을 읽어서 이름을 알아냈다. 결국 총 3개의 페이지를 읽어서 이름을 알아낸 것이다.

**인덱스 검색**(Index Scan)을 통해 클러스터형 인덱스는 2페이지만 읽어서 원하는 결과를 검색했고, 보조 인덱스는 3페이지를 읽어서 원하는 결과를 검색했다. 두 인덱스 모두 검색이 빠르기는 하지만, 클러스터형 인덱스가 조금 더 빠르다.

## 6-3. 인덱스의 실제 사용

### 6-3-1. 인덱스 생성과 제거 

#### 인덱스 생성 문법

```sql
CREATE [UNIQUE] INDEX 인덱스_이름
  ON 테이블_이름 (열_이름) [ASC | DESC]
```

**UNIQUE**는 중복이 안 되는 고유 인덱스를 만드는 것인데, 생략하면 중복이 허용된다. CREATE UNIQUE로 인덱스를 생성하려면 **기존에 입력된 값들에 중복이 있으면 안 된다.** 그리고 **인덱스를 생성한 후에 입력되는 데이터와도 중복될 수 없다.**

**ASC** 또는 **DESC**는 인덱스를 오름차순 또는 내림차순으로 만들어준다.

#### 인덱스 제거 문법

```sql
DROP INDEX 인덱스_이름 ON 테이블_이름
```
주의할 점은 기본 키, 고유 키로 생성된 인덱스는 DROP INDEX로 제거하지 못한다. ALTER TABLE 문으로 기본 키나 고유 키를 제거하면 자동으로 생성된 인덱스도 제거할 수 있다.

> **인덱스 제거**
> 
> 하나의 테이블에 클러스터형 인덱스와 보조 인덱스가 모두 있는 경우, 인덱스를 제거할 때는 보조 인덱스부터 제거하는 것이 더 좋다. **클러스터형 인덱스부터 제거하면 내부적으로 데이터가 재구성되기 때문이다.** 또한, 인덱스가 많이 생성되어 있는 테이블의 경우 **사용하지 않는 인덱스는 과감히 제거해주는 것이 좋다.**

### 6-3-2. 인덱스 생성과 제거 실습

#### 인덱스 생성과 제거 실습

`SHOW TABLE STATUS`문을 통해 인덱스의 크기를 확인할 수 있다.

Data_length는 클러스터형 인덱스(또는 데이터)의 크기를 Byte 단위로 표기한 것이다. Index_length는 보조 인덱스의 크기인데 member는 보조 인덱스가 없기 때문에 표기되지 않았다.

주소에 중복을 허용하는 **단순 보조 인덱스**를 생성해보자.

> 보조 인덱스는 단순 보조 인덱스(Simple Secondary Index)와 고유 보조 인덱스(Unique Secondary Index)로 나뉜다. 단순 보조 인덱스는 중복을 허용한다는 의미이다.

생성된 인덱스를 적용시키려면 `ANALYZE TABLE`문으로 먼저 테이블을 분석/처리해줘야 한다.

고유 보조 인덱스를 생성하려고 할 때 이미 중복된 값이 있으면 생성할 수 없다. 따라서 업무상 절대로 중복되지 않는 열에만 UNIQUE 옵션을 사용해서 인덱스를 생성해야 한다.

#### 인덱스의 활용 실습

인덱스를 사용하려면 인덱스가 생성된 열 이름이 SQL 문에 있어야 한다.

```sql
SELECT mem_id, mem_name, addr FROM member WHERE mem_name = '에이핑크' ;
```

WHERE 절에 열 이름이 들어 있어야 인덱스를 사용한다. [Execution Plan] 창에 Full Table Scan을 제외하고, 나머지는 모두 인덱스를 사용했다는 의미이다.

#### 인덱스를 사용하지 않을 때

인덱스가 있고 WHERE 절에 열 이름이 나와도 인덱스를 사용하지 않는 경우가 있다. 인덱스 검색이 있더라도 전체 테이블 검색이 낫다고 판단하면 MySQL은 판단 하에 전체 테이블 검색을 한다. 예를 들어 인원 수가 1명 이상인 데이터를 탐색한다고 할 때 인덱스를 왔다 갔다 하는 것보다는 테이블을 차례대로 읽는 것이 효율적이다.

또한, WHERE 문에서 열에 연산이 가해지면 인덱스를 사용하지 않는다. 그러므로 WHERE 절에 나온 열에는 아무런 연산을 하지 않는 것이 좋다.

#### 인덱스 제거 실습

```sql
DROP INDEX idx_member_mem_name ON member;
DROP INDEX idx_member_addr ON member;
DROP INDEX idx_member_mem_number ON member;
```

Primary Key에 설정된 인덱스는 DROP INDEX 문으로 제거되지 않고 ALTER TABLE 문으로만 제거할 수 있다. 여기서 유의할 점은 **기본 키를 제거하기 전에 외래 키 관계를 제거해야 한다**는 점이다.

외래 키의 이름을 알아내기 위해서는 information_schema 데이터베이스의 referential_constraints 테이블을 조회하면 외래 키의 이름을 알 수 있다.

```sql
SELECT table_name, constraint_name
	FROM information_schema.referential_constraints
	WHERE constraint_schema = 'market_db';
```
> information_schema 데이터베이스의 referential_constraints 테이블은 MySQL 안에 원래 포함되어 있는 시스템 데이터베이스와 테이블이다. 여기에는 MySQL 전체의 외래 키 정보가 들어 있다.

## 인덱스를 효과적으로 사용하는 방법

* 인덱스는 열 단위에 생성된다.

* WHERE 절에서 사용되는 열에 인덱스를 만들어야 한다.
  - SELECT 문을 사용할 때, WHERE 절의 조건에 해당 열이 나와야 인덱스를 사용한다.

* WHERE 절에 사용되더라도 자주 사용해야 가치가 있다.

* 데이터의 중복이 높은 열은 인덱스를 만들어도 별 효과가 없다.

* 클러스터형 인덱스는 테이블당 하나만 생성할 수 있다.
  - 클러스터형 인덱스는 데이터 페이지를 읽는 수가 보조 인덱스보다 적기 때문에 성능이 더 우수하다. 그러므로 하나밖에 지정하지 못하는 클러스터형 인덱스(기본 키)는 조회할 때 가장 많이 사용되는 열에 지정하는 것이 효과적이다.

* 사용하지 않는 인덱스는 제거한다.