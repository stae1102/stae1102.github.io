---
layout: post
title: "19 Mar TIL: NodeJS Socket.io"
excerpt: "Socket.io"
date: 2022-03-19 16:59:00 +0900
categories:
  - Study
tags:
  - TIL
---

- [Socket.IO](#socketio)
- [실시간 GIF 채팅방 만들기](#실시간-gif-채팅방-만들기)
- [socket.js의 axios 요청](#socketjs의-axios-요청)
- [미들웨어에서 next의 중요성](#미들웨어에서-next의-중요성)

# Socket.IO

```js
const SocketIO = require('socket.io');

module.exports = (server) => {
    const io = SocketIO(server, { path: '/socket.io' });

    io.on('connection', (socket) => { // 웹 소켓 연결 시
        const req = socket.request;
        const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        console.log('새로운 클라이언트 접속!', ip, socket.id, req.ip);
        socket.on('disconnect', () => { // 연결 종료 시
            console.log('클라이언트 접속 해제', ip, socket.id);
            clearInterval(socket.interval);
        });
        socket.on('error', (error) => { // 에러 시
            console.error(error);
        });
        socket.on('reply', (data) => { // 클라이언트로부터 메시지 수신 시
            console.log(data);
        });
        socket.interval = setInterval(() => { // 3초마다 클라이언트로 메시지 전송
            socket.emit('news', 'Hello Socket.IO');
        }, 3000);
    })
}
```

SocketIO의 두 번째 인수로 옵션 객체를 넣어 서버에 관한 설정을 할 수 있다. 클라이언트가 접속할 경로인 path 옵션을 사용했다.

연결 후 이벤트 리스너를 붙인다. connection 이벤트는 클라이언트가 접속했을 때 발생하고, 콜백으로 소켓 객체 socket 객체를 제공한다. io와 socket 객체가 Socket.IO의 핵심이다.

`socket.request`로 요청 객체에 접근할 수 있고, `socket.request.res`로 응답 객체에 접근할 수 있다. `socket.id`로 소켓 고유의 아이디를 가져올 수 있고 이 아이디로 소켓의 주인을 구별할 수 있다.

socket에도 이벤트 리스너를 붙일 수 있다. disconnect는 클라이언트가 연결을 끊었을 때 발생하고, error는 통신에러 에러가 발생했을 때, reply는 사용자가 직접 만든 이벤트로 클라이언트에서 reply라는 이벤트로 데이터를 보낼 때 서버에서 받는 부분이다. **이벤트명을 사용하는 것이 ws모듈과 다른 점이다.**

emit 메서드로 3초마다 클라이언트에게 메시지를 보낸다. 첫 번째 인수는 **이벤트 이름**(news), 두 번째 인수는 **데이터**(Hello Socket.IO)이다. 즉 news라는 이벤트 이름으로 Hello Socket.IO라는 데이터를 클라이언트에 보낸 것이다.

```html
        <div>F12를 눌러 console 탭과 network 탭을 확인하세요.</div>
        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io.connect('http://localhost:8005', {
                path: '/socket.io',
            });
            socket.on('news', function(data) {
                console.log(data);
                socket.emit('reply', 'Hello Node.JS');
            })
        </script>
```

`/socket.io/socket.io.js`는 Socket.IO에서 클라이언트로 제공하는 스크립트이며, 실제 파일이 아니다. 이 스크립트를 통해 서버와 유사한 API로 웹 소켓 통신이 가능하다. 스크립트가 제공하는 io 객체에 서버 주소를 적어 연결한다. **http 프로토콜을 사용한다는 점이 ws 모듈과 다르다.** 옵션 path로 /socket.io로 서버의 path 옵션과 일치해야 통신이 가능하다.

서버에서 보내는 news 이벤트를 받기 위해 news 이벤트 리스너를 붙여두었다. 서버의 reply 이벤트 리스너로 답장을 보낸다.

서버를 실행하면 웹 소켓 연결 말고도 폴링 연결(xhr)이 있다. Socket.IO는 먼저 폴링 방식으로 서버와 연결한다. 그래서 **코드에서 HTTP 프로토콜을 사용**했다. 폴링 연결 후, **웹 소켓을 사용할 수 있다면 웹 소켓으로 업그레이드**한다. 그래서 웹 소켓을 지원하지 않는 브라우저는 폴링 방식을 그대로 사용할 수 있다. 처음부터 웹 소켓을 사용하고자 한다면 io의 옵션을 추가한다.

```js
const socket = io.connect('http://localhost:8005', {
    path: '/socket.io',
    transports: ['websocket'],
});
```

# 실시간 GIF 채팅방 만들기

app.set('io', io)로 라우터에서 io 객체를 쓸 수 있게 저장해둔다. req.app.get('io')로 접근할 수 있다.

메서드 of는 Socket.IO에 네임스페이스를 부여하는 메서드이다. Socket.IO는 기본적으로 / 네임스페이스에 접속하지만, **of 메서드를 사용하면 다른 네임스페이스를 만들어 접속할 수 있다. 같은 네임스페이스끼리만 데이터를 전달한다.**

/chat 네임스페이스에 이벤트 리스너가 붙는다. socket.join 메서드가 있고 접속 해제 시 **socket.leave** 메서드가 있다. 각각 방에 들어가고 방에서 나가는 메서드이다. 연결이 끊기면 자동으로 방에서 나가지만, 확실히 나가기 위해 추가한다.

socket은 각 네임스페이스의 리스너들이 가지는 콜백 함수의 인수이다. 까먹기 전에 참고하자

io.use 메서드에 미들 웨어를 장착할 수 있다. 이 부분은 모든 웹 소켓 연결 시마다 실행된다. 세션 미들웨어에 **요청 객체(socket.request), 응답 객체(socket.request.res). next 함수를 인수로** 넣으면 된다(`app.use(sessionMiddleware)`에서 미들웨어임에도 불구하고 Socket.IO를 세션 미들웨어와 연결했으니 (req, res, next)가 붙지 않았기 때문에 웹 소켓에서 req, res, next를 입력). 이제 socket.request 객체 안에 socket.request.session 객체가 생성된다.

**socket.to(방 아이디) 메서드**로 특정 방에 데이터를 보낼 수 있다. 세션 미들웨어와 Socekt.IO를 연결했으므로 웹 소켓에서 세션을 사용할 수 있다.

**socket.adapter.rooms[방 아이디]** 에 참여 중인 소켓 정보가 들어 있다.

# socket.js의 axios 요청

socket.js에서 axios 요청을 보낼 때는 요청자가 누구인지에 대한 정보가 들어 있지 않다. express-session에서는 세션 쿠키인 req.signedCookies['connect.sid']를 보고 현재 세션이 누구에게 속해 있는지를 판단한다. 브라우저에서 axios 요청을 보낼 때와 달리 서버에서 axios 요청을 보낼 때는 쿠키가 같이 보내지지 않는다. 따라서 express-session 요청자가 누구인지 판단할 수 없다. express-session이 판단할 수 있게 하려면 요청 헤더에 세션 쿠키를 직접 넣어야 한다.

io 객체에 cookie-parser를 연결한 후 axios 요청을 보낼 때 connect.sid 쿠키를 직접 설정한다. 쿠키 암호화를 위해 cookie-signature 패키지도 설치한다.

req.signedCookies 내부의 쿠키들은 모두 복호화되어 있으므로 다시 암호화해서 요청에 담아보내야 한다. 이때, express-session의 세션 쿠키 앞에는 s%3A를 붙여야 한다.

# 미들웨어에서 next의 중요성

app.use()를 사용한 미들웨어에서 자체적으로 next()를 지원하지 않는다면 반드시 next()를 적어줘야 한다. 안 적어주면 다른 라우터를 못 읽는다~