---
layout: post
title: "20 Mar TIL: SQL 트리거 활용, NodeJS 웹 소켓 라우터 연결"
excerpt: "SQL trigger, NodeJS Socket.io router"
date: 2022-03-20 17:01:00 +0900
categories:
  - Study
tags:
  - TIL
---

- [SQL](#sql)
  - [트리거의 활용](#트리거의-활용)
  - [트리거가 사용하는 임시 테이블](#트리거가-사용하는-임시-테이블)
- [네트워크 개론](#네트워크-개론)
  - [1. 홈 네트워크](#1-홈-네트워크)
  - [2. 데이터 센터 네트워크](#2-데이터-센터-네트워크)
  - [프로토콜](#프로토콜)
  - [1. OSI 7계층](#1-osi-7계층)
  - [2. TCP/IP 프로토콜 스택](#2-tcpip-프로토콜-스택)

# SQL

## 트리거의 활용

* **OLD 테이블**은 UPDATE나 DELETE가 수행될 때, 변경되지 전의 데이터가 잠깐 저장되는 임시 테이블이다. OLD 테이블에 UPDATE 문이 작동되면 이 행에 의해서 업데이트되기 전의 데이터가 **백업 테이블**에 입력된다. 즉, 원본 데이터가 보존된다.

* 백업 테이블은 BEGIN과 END 사이에 INSERT INTO를 사용해서 넣는다.

트리거를 DELETE에 사용했기 때문에 TRUNCATE로 모든 행 데이터를 삭제해도 트리거가 작동하지 않아 백업 데이터가 저장되지 않는다.

## 트리거가 사용하는 임시 테이블

DML 문 작업이 수행되면 임시로 사용되는 시스템 테이블 NEW와 OLD가 있다.

먼저 NEW 테이블은 INSERT 문이 실행되면 작동한다. NEW 테이블에 새 값이 입려되고, 다시 테이블에 들어간다.

OLD 테이블은 DELETE 문이 실행되면 예전 값이 **삭제되기 전에 OLD 테이블에 잠깐 들어가 있는다.** 그래서 AFTER DELETE 트리거를 만들어도 삭제된 후에 OLD.열 이름 형식으로 예전 값에 접근할 수 있는 것이다.

마지막으로 UPDATE(새값, 예전 값)을 사용하면 NEW 테이블과 OLD 테이블을 모두 사용한다.

---

# 네트워크 개론

## 1. 홈 네트워크

홈 네트워크 구성은 어떤 인터넷 회선을 연결하더라도 같다. 인터넷, 모뎀, 공유기, 단말로 홈 네트워크가 구성된다. 이때 서로 물리적 연결이 필요하다

* 무선 연결: 무선 랜 카드와 무선 신호를 보낼 수 있는 매체(공기)가 필요
* 유선 연결: 유선 랜 카드(이더넷 랜 카드)와 랜 케이블(랜선)이 필요

## 2. 데이터 센터 네트워크

데이터 센터 네트워크는 안정적이고 빠른 대용량 서비스 제공을 목표로 구성한다.

다양한 이중화 기술을 사용해야 하고 많은 서버와 서비스가 한 네트워크에 연결되어 있으므로 높은 통신량을 수용할 수 있어야 한다. 10G, 25G, 40G, 100G, 400G와 같은 고속 이더넷 기술이 사용된다.

3계층 구성에서 가상화 기술과 높은 대역폭을 요구하는 스케일 아웃(Scale-out) 기반의 애플리케이션과 서비스가 등장하면서 2계층 구성인 스파인-리프(Spine-Leaf) 구조로 데이터 센터 네트워크가 변화되었다.

스파인-리프 구조는 서버 간 통신이 늘어나는 최근 트래픽 경향을 지원하기 위해 제안되었다. 최근에는 일반 서버에 10G Base-T 이더넷 포트가 기본적으로 제공되어 TOR(Top of Rack) 스위치와 연결되고 리프(Leaf) 스위치인 TOR 스위치는 스파인(Spine) 스위치와 40G, 100G로 연결되는 추세이다.

## 프로토콜

네트워크에서 통신할 때의 규약을 프로토콜이라는 용어를 사용한다. 프로토콜은 다양하게 존재해왔는데, 최근에는 복잡하고 산재되어 있던 여러 가지 프로토콜 기술이 이더넷-TCP/IP 기반 프로토콜들로 변경되고 있다.

* 물리적 측면: 데이터 전송 매체, 신호 규약, 회선 규격 등. 이더넷이 널리 쓰인다.
* 논리적 측면: 장치들끼리 통신하기 위한 프로토콜 규격. TCP/IP가 널리 쓰인다.

최대한 적은 데이터를 이용해 한정된 자원으로 통신을 수행해야 했기 떄문에 자연어를 사용함에 있어서 효율적인 프로토콜을 정의하고 사용해야 했다.

최소한의 비트로 내용을 전송하기 위해서 서로 간의 약속을 정의해야 했다. 현재는 문자 기반 프로토콜들이 많이 사용되고 있다. HTTP와 SMTP와 같은 프로토콜이 대표적이다. 비트로 메시지를 전달하지 않고 문자 자체를 이용해 **헤더와 헤더값, 데이터**를 표현하고 전송한다.

일반적으로 TCP/IP는 프로토콜이라고 부르지 않고 프로토콜 스택이라고 부른다. TCP와 IP는 **별도 레이어에서 동작하는 프로토콜이지만 함께 사용**하고 있는데 이런 프로토콜 묶음을 **프로토콜 스택**이라고 부른다.

TCP/IP 프로토콜 스택은 총 4개의 부분으로 나뉜다. 물리 부분인 **이더넷** 외에 데이터가 목적지를 찾아가도록 해주는 **네트워크 계층**, 잘린 패킷을 데이터 형태로 잘 조합하도록 도와주는 **전송 계층**과 **애플리케이션 계층**으로 구성된다.

## 1. OSI 7계층

과거에는 통신용 규약이 표준화되지 않았고 각 벤더에서 별도로 개발했기 때문에 호환되지 않는 시스템이나 애플리케이션이 많았고 통신이 불가능했다. 이를 하나의 규약으로 통합하려는 노력이 현재의 OSI 7계층으로 남아 있다.

> **OSI 레퍼런스 모델**  
> 
> * 피지컬 계층 - Bits
> * 데이터 링크 계층 - Frames
> * 네트워크 계층 - Packets
> * 트랜스포트 계층 - Segments
> * 세션 계층 - Data
> * 프레젠테이션 계층 - Data
> * 애플리케이션 계층 - Data

OSI 7계층은 다시 두 가지 계층으로 나눌 수 있다.

* 1~4계층: 데이터 플로 계층(Data Flow Layer) / 하위 계층(Lower Layer)
* 5~7계층: 애플리케이션 계층(Application Layer) / 상위 계층(Upper Layer)

애플레케이션 개발자는 애플리케이션 계층 프로토콜을 개발할 때 하위 데이터 플로 계층을 고려하지 않고 데이터를 표현하는 데 초점을 맞춘다. 반대로 애플리케이션 계층은 애플리케이션 개발자들이 고려해야 할 영역이므로 네트워크 엔지니어는 이 부분에 대해서는 일반적으로 심각하게 고려하지 않는다. 이런 이유로 애플리케이션 개발자는 하향식(Top-Down) 형식으로 네트워크를 바라보고 네트워크 엔지니어는 상향식(Bottom-Up) 형식으로 네트워크를 인식한다.

## 2. TCP/IP 프로토콜 스택

현대 네트워크는 대부분 TCP/IP와 이더넷으로 이루어져 있다.

OSI 레퍼런스 모델은 7계층으로 이루어진 반면, TCP/IP 모델은 4계층으로 구분한다. OSI 7계층은 데이터 플로 계층과 애플리케이션 계층으로 구분할 수 있다. 각 계층에 맞춰 애플리케이션 개발자가 고려해야 할 부분과 서버 엔지니어나 네트워크 엔지니어가 고려해야 할 부분이 구분되었는데 TCP/IP 모델은 그 부분이 더 확연히 드러난다. 상위 3개 계층을 하나의 애플리케이션 계층으로 묶고 1, 2계층 즉 물리 계층과 데이터 링크 계층을 하나의 네트워크 계층으로 구분한다.