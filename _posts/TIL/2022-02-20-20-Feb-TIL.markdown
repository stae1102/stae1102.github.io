---
layout: post
title:  "20 Feb TIL: JS입문 및 Git 브랜치 관리"
excerpt: "TIL"
date:   2022-02-20 18:57:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# 1. `<script>` 태그
* 기본적으로 자바스크립트는 HTML 위에서 동작하는 언어이다.
* 자바스크립트 코드를 넣기 위해서 우선 웹 브라우저에게 지금부터 HTML에 자바스크립트 코드가 시작된다는 사실을 알려야 한다.
* 이때, 사용하는 태그가 `<script>`태그이다.
```html
<body>
    <script>
        document.write('Hello world');
    </script>
</body>
```
* 자바스크립트를 통해 나타낸 문자와 HTML 태그를 통해 나타낸 문자의 차이는 자바스크립트의 경우 동적이기 때문에 1+1을 논리적으로 계산하여 동작한다는 점이 특징이다.

```html
<body>
    <script>
        document.write(1+1);
    </script>
    1 + 1
</body>
```

# 2. 이벤트
* 이벤트는 자바스크립트가 사용자와 상호작용하는 데 핵심적인 역할을 한다.
* 예를 들어 버튼을 생성한다고 해보자면

## 2-1. 버튼 이벤트
```html
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title></title>
    </head>
    <body>
        <input type="button" value="hi">
    </body>
</html>
```

<body>
    <input type="button" value="hi">
</body>
  
위 코드를 통해 버튼을 생성할 수 있는데 이 기능을 사용자와 상호작용할 수 있도록 자바스크립트 코드를 작성할 수도 있다.

```html
<body>
    <input type="button" value="hi" onclick="alert('hi')">
</body>
```

<body>
    <input type="button" value="hi" onclick="alert('hi')">
</body>

* `onclick`의 속성 값은 웹 브라우저가 기억해 뒀다가, onclick 속성이 위치하고 있는 태그를 사용자가 클릭했을 때, 자바스크립트 코드를 자바스크립트 문법에 따라 해석해서 웹 브라우저가 실행한다.
* 이처럼 웹 브라우저 위에서 일어나는 일들을 사건, 영어로는 이벤트(event)라고 한다.
* 어떤 이벤트가 일어났을 때 어떠한 자바스크립트 코드를 실행하게 하는 것이 `onclick`이라는 것이다.
* 이 외에도 무수한 이벤트가 있는데 다음과 같다.

## 2-2. 텍스트 상자 이벤트
  
```html
<body>
    <input type="text" />
</body>
```
<body>
    <input type="text" />
</body>
  
* 이때 내용이 변했을 때를 체크하는 이벤트도 존재한다.
  
```html
<body>
    <input type="text" onchange="alert('changed')"/>
</body>
```
  
<body>
    <input type="text" onchange="alert('changed')"/>
</body>
  
* 혹은 아무 키를 눌렀을 때 경고창을 생성할 수도 있다.
  
```html
<body>
    <input type="text" onkeydown="alert('key down!')"/>
</body>
```
  
<body>
    <input type="text" onkeydown="alert('key down!')"/>
</body>
  
이처럼 `on`으로 시작하는 속성들이 있는데 이러한 속성들을 자바스크립트에서는 **이벤트**라고 한다.

# 3. 데이터 타입 - 문자열과 숫자

* 데이터 타입은 한국어로 자료형으로 문자와 숫자 등이 존재한다. 

## 3-1. 숫자

html 콘솔창에서 숫자를 표현하면
```
alert(1+1)
```
를 입력했을 때 2가 출력된다. 

* 숫자를 의미하는 Number라는 데이터 타입에서 아주 중요한 것은 **연산**이다.
* **더하기(+)** 는 왼쪽에 있는 값과 오른쪽에 있는 값을 더해서 하나의 값을 만든다는 점에서 **이항 연산자**라고 부르고, 이항 연산자 중 산수를 하는 것이기 때문에 **산술 연산자**라고 부른다.
* 더하기 외에도 **빼기(-)** 와 **곱하기**, **나누기** 등이 있다.

```
1+1
2-1
2*4
6/2
```

## 3-2. 문자열
* 문자열은 **따옴표(" " 혹은 ' ')** 로 이루어져 있다.
* 문자열을 처리할 때 이용할 수 있는 명령은 다양하게 있는데 예를 들어 `.length`는 문자열의 길이를 반환한다.
  
### `.length`
  
```
str.length
```
* 이러한 `.length`와 같은 것들을 **프로퍼티(Properties)** 라고 한다.
* 또한, `.toUpperCase()`같은 것도 있다. 이는 결과를 대문자로 출력한다.
  
### `.toUpperCase()`

```javascript
'Hello World'.toUpperCase()
```

### `.index0f()`
* 찾고자 하는 값을 찾아 가장 처음으로 찾은 인덱스를 반환한다.
  
```javascript
'Hello world'.index0f('O')
```

### `.trim()`
* 문자열에서 공백을 제거한다.
  
```javascript
'        hello        '
'        hello        '.trim()
```

# 4. 변수와 대입 연산자

* 변수는 바뀔 수 있는 값으로 콘솔에 x=1이고 y=1을 입력했을 때, x+y를 실행하면 결과가 2로 출력된다.

```javascript
x = 1;
y = 1;
x + y;

x = 1000;
x + y;
```
  
* 여기서 x라는 것을 **변수(variable)** 라고 하고 =는 **대입 연산자**라고 한다. 
* 그런데, `1=2;`를 입력하면 에러가 발생한다. 1=2는 1에 2를 대입한다는 것인데, 1은 변하지 않는 값이기 때문이다.
* x라는 것은 대입 연산자를 통해 값이 바뀔 수 있다는 뜻에서 변수이고, 숫자 1은 언제나 1이기 때문에 바뀌지 않는다는 점에서 상수(constant)라고 한다.

```javascript
1 = 2;
```

* **변수를 사용할 때는 반드시 `var`라는 키워드를 변수 앞에 써주는 것이 좋다.**

```javascript
var name = 'leezche';
```

아래 내용은 기존 내용을 복습
---

# 5. CSS 기초: style 속성
* 특정 태그를 CSS언어로 디자인하고 싶다면, style이라는 속성을 쓰고 그 안에 CSS의 속성이라는 문법을 사용하면 된다.

```html
<h2 style="background-color: coral; color: powderblue;">JavaScript란 무엇인가?</h2>
```

# 6. CSS 기초: `<style>` 태그
* `<span>`을 통해 줄바꿈하지 않고 스타일을 지정
* `<style>`를 통해 원하는 태그 혹은 클래스, 아이디 선택자를 디자인할 수 있음

# 7. CSS 기초: 선택자
* `<style>`태그 내에서 원하는 것을 꾸미기 위해 사용하는 것을 선택자라고 하며, class를 선택할 때는 앞에 `.`를, id를 선택할 때는 `#`를 앞에 넣어 사용한다.
* 클래스는 무언가를 그루핑한다는 것이고 아이디는 하나의 대상을 식별한다는 것이 핵심.
* 따라서 아이디 선택자는 중복되지 않는다.

# 8. 제어할 태그 선택하기
* `<body>`태그를 선택하고자 할 때, javascript를 통해 프로그래밍적으로 상호작용에 의해 넣을 수 있다.

```javascript
document.querySelector('body');
```

* 선택자는 웹 페이지에 있는 모든 태그 중에서 원하는 것을 선택할 수 있다. 클래스 및 아이디를 포함하여 선택할 수 있으며, 이때 각 유형에 따라 `.` 혹은 `#`를 통해 구분하여 선택할 수 있다.
* 선택한 후 `<body>`태그에 스타일 속성을 집어넣을 수 있는데

```javascript
document.querySelector('body').style.
```
  
다음과 같이 작성한다.
  
* 여기서 예를 들어 style 속성 값 중 배경을 바꾸고자 한다면 또 다음과 같이 작성할 수 있다.
  
```javascript
document.querySelector('body').style.backgroundColor = 'black';
```

# 9. 조건문 예고
* 조건문이라고 하는 것은 하나의 프로그램이 하나의 흐름으로 가는 것이 아니라 조건에 따라 다른 순서의 기능들이 실행되게 하는 것이다.
* 본 교재의 예제에서 night 버튼과 day 버튼이 있는데, 사용자가 상태를 보고 night인지 day인지 선택하는 것보다 야간모드일 때 클릭할 때 누르면 주간모드가, 주간모드일 때 클릭하면 야간모드가 되는 기능을 구현하는 편이 더 사용자 편의에 좋을 것 같다.
* 이러한 것을 **토글(toggle)** 이라고 한다.
* 이때, 이 토글을 구현하기 위해 각 조건에 따라 분기하는 것이 중요하며, 이 분기를 조건문을 통해 적용할 수 있다.

```html
<input id="night_day" type="button" value="night" onclick="
    if(document.querySelector('#night_day').value === 'night') {
        document.querySelector('body').style.backgroundColor = 'black';
        document.querySelector('body').style.color = 'white';
        document.querySelector('#night_day').value = 'day';
    } else {
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color = 'black';
        document.querySelector('#night_day').value = 'night';
    }
">
```
* if라는 조건문에 따라 참일 때 if 하 코드가, 거짓일 때는 else 하 코드가 실행되는 것이다.
* if의 조건에 있는 `===`는 비교 연산자로 이 비교 연산자를 통해 **불리언(boolean)** 이 만들어졌다.

# 10. 중복의 제거를 위한 리팩토링

* 리팩토링이란 단어에서 팩토리(factory)는 '공장'이며, 리(re)는 '다시'라는 뜻이므로 공장으로 다시 보내 개선한다는 느낌이다.
* 코딩을 하고 났을 때, 코드의 가독성을 높이고, 유지보수를 편리하게 만들고, 중복된 코드를 줄이는 방향으로 코드를 개선하는 작업을 리팩토링이라고 한다.
* 앞선 `javascriptdocument.querySelector('#night_day')`와 같은 코드는 사실 자기 자신을 가리키고 있기 때문에, 이를 대신해 다른 코드가 사용되면 더욱 효율적일 것이다.
* 이때, 같은 이벤트 안에서 실행되는 코드에서는 현재 코드가 속해있는 태그를 가리키도록 약속돼 있는 특수한 키워드를 사용하는데 이것이 바로 `this` 키워드다.
* 이를 고려하여 이전 예제를 수정해보자면,

```html
<input type="button" value="night" onclick="
    if(this.value === 'night') {
        document.querySelector('body').style.backgroundColor = 'black';
        document.querySelector('body').style.color = 'white';
        document.querySelector('#night_day').value = 'day';
    } else {
        document.querySelector('body').style.backgroundColor = 'white';
        document.querySelector('body').style.color = 'black';
        this.value = 'night';
    }
">
```

* 또, 여기서 `document.querySelector('body')`도 중복되는데 이러한 것도 간결하게 표현하는 것이 클린 코드라고 할 수 있다.
* 예를 들어 이러한 경우 target이라는 변수를 생성하여 할당하는 방법도 있다.
  
```html
<input id="night_day" type="button" value="night" onclick="
    var target = document.querySelector('body');
    if(this.value === 'night') {
        target.style.backgroundColor = 'black';
        target.style.color = 'white';
        document.querySelector('#night_day').value = 'day';
    } else {
        target.style.backgroundColor = 'white';
        target.style.color = 'black';
        this.value = 'night';
    }
">
```

# 11. 반복문 예고

* 설정한 링크 태그의 style 값을 각각 설정하였을 때, 그 횟수가 적다면 수정하기에 부담스럽지 않지만, 그것이 1억 개라면 1억 번의 반복적인 작업을 수행해야 한다.
* 따라서 이를 해결하기 위해 반복을 통해 내용을 수정하는 것이 더욱 효율적이다.

```javascript
var alist = document.querySelectorAll('a');
var i = 0;
while(i < alist.length) {
    alist[i].style.color = 'powderblue';
    console.log(alist[i]);
    i = i + 1;
}
```

# 12. 배열
* 데이터 중에서 서로 연관된 데이터를 잘 정리 정돈해서 담아두는 일종의 수납 상자를 **배열(array)** 라고 생각하면 된다.

```html
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title></title>
    </head>
    <body>
        <h1>Array</h1>
        <h2>Syntax</h2>
        <script>
            var coworkers = ["egoing", "leezche"];
        </script>
    </body>
</html>
```

* 배열에 들어있는 항목을 가져올 때는 변수에 []를 입력하여 가져올 수 있다.
* 본 코드를 예로 들자면 coworkers[0]라고 쓸 수 있다.

```html
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title></title>
    </head>
    <body>
        <h1>Array</h1>
        <h2>Syntax</h2>
        <script>
            var coworkers = ["egoing", "leezche"];
        </script>

        <h2>get</h2>
        <script>
            document.write(coworkers[0]);
            document.write(coworkers[1]);
        </script>
    </body>
</html>
```

* 배열 안에 몇 개의 값이 있는지도 javascript 코드를 통해 확인할 수 있다.

```html
<script>
    document.write(coworkers.length);
</script>
```
* data를 추가하고 싶을 때는 `.push(value)`를 추가한다.

```html
<script>
    coworkers.push('duru');
    coworkers.push('taeho');
</script>
```
# 13. 반복문

* 반복문(루프)
* 여러 코드를 최소한의 코드로 나타내기 위해 반복문을 사용할 수 있다.
* 반복문은 조건이 True일 때, 코드가 실행되고 false일 때 반복이 종료되어 while문 바깥쪽에 있는 코드가 실행된다.
* 즉, 반복문이라는 것은 순서대로 실행되는 프로그램의 흐름을 제어하는 제어문이라고 할 수 있다.
* 반복문은 언제 종료될 것인가를 잘 지정하는 것이 중요하다. 그러기 위해서는 두 줄의 코드가 몇 번 실행되는지 어딘가에 적어둘 필요가 있다. 이를 위해서 **변수**가 필요하다.
* i=i+1은 '기존의 i의 값에 1을 더한 결과를 i의 새로운 값으로 준다'라는 뜻이다.

```html
<script>
    document.write('<li>1</li>');
    var i = 0;
    while(i < 3) {
        document.write('<li>2</li>');
        document.write('<li>3</li>');
        i = i + 1;
    }
    document.write('<li>4</li>');
</script>
```

# 14. 배열과 반복문

예를 들어 아래와 같은 코드가 있다고 할 때,

```html
<ul>
    <li>egoing</li>
    <li>leezche</li>
    <li>duru</li>
    <li>taeho</li>
</ul>
```
혹은 `<li>` 태그 대신 목록이 아주 복잡한 태그이고 이것에 대한 수정이 빈번하게 일어난다면 글 목록을 작성하는 것이 쉽지 않을 것이다. 이처럼 서로 연관된 데이터를 담는 방법 중 배열이 있는데, 이 배열에 담긴 데이터를 순차적으로 꺼내 `<li>`라는 태그를 만들어 문제를 해결할 수 있다.

```html
<body>
    <h1>Loop & Array</h1>
    <script>
        var coworkers = ['egoing', 'leezche', 'duru', 'taeho'];
    </script>
    <h2>Co workers</h2>
    <ul>
        <script>
            var i = 0;
            while(i < coworkers.length) {
                document.write('<li>' + coworkers[i] + '</li>');
                i = i + 1;
            }
        </script>
    </ul>
</body>
```

하지만 위와 같은 방법은 데이터가 바뀌어도 유연하게 작동하지 않는다. 따라서 `i < 4`가 아니라 coworkers의 배열에 담긴 원소의 개수로 설정하면 직접 개수를 입력하지 않더라도 적절히 실행될 것이다.

# 15. 배열과 반복문의 활용

* 리스트를 변수에 넣어 반복문을 통해 조건을 수행할 수 있다.

```html
<input id="night_day" type="button" value="night" onclick="
            var target = document.querySelector('body');
            if(this.value === 'night') {
                target.style.backgroundColor = 'black';
                target.style.color = 'white';
                this.value = 'day';

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            } else {
                target.style.backgroundColor = 'white';
                target.style.color = 'black';
                this.value = 'night';

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }
            }
">
```

# 16. 함수 예고

* 코드가 많아지면 그 코드를 잘 정돈하기 위한 도구가 필요하다. 그때 사용할 수 있는 도구가 **함수**이고, 그것보다 더 큰 도구는 **객체(추후 살펴 볼 예정)** 이다.

* 위 상황에서도 `<input>`태그가 반복되게 된다면 이를 해결하기 위해 많은 리소스가 소모된다. 따라서, 이를 해결하기 위한 방법이 필요하다.

```html
<head>
    <title>WEB1 - JavaScript</title>
    <meta charset="utf-8">
    <script>
        function nightDayHandler(self) {
            var target = document.querySelector('body');
            if(this.value === 'night') {
                target.style.backgroundColor = 'black';
                target.style.color = 'white';
                this.value = 'day';

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            } else {
                target.style.backgroundColor = 'white';
                target.style.color = 'black';
                this.value = 'night';

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }
            }
        }
    </script>
</head>

... 생략 ...

<input id="night_day" type="button" value="night" onclick="
            nightDayHandler(this);
">

... 생략 ...

<input id="night_day" type="button" value="night" onclick="
    nightDayHandler(this);
">

```

---
# Chapter 3. 여러 명이 함께 Git으로 협업하기

## 3-1. 원격저장소에서 협업하기: 브랜치(Branch)

### 3-1-1. Git이 커밋을 관리하는 방식: 줄줄이 기차
  
* 코드의 변경사항을 묶어 하나의 덩러리로 만드는 것을 익혔습니다. 이것을 커밋이라고 했고, 새로 만든 커밋은 기존 커밋 다음에 시간순으로 쌓인다.
  
* *하지만 두 명이 협업한다면 어떻게 해야 할까?*
  * 한 줄로는 커밋을 이어나가지 못한다 새로운 두 커밋 모두 기준 커밋과 연결되어야 하기 때문에
  * 그렇기에 자연스레 두 줄로 갈래가 나뉘게 된다.

* 이렇게 특정 기준에서 줄기를 나누어 작업할 수 있는 기능을 **브랜치(Branch)** 라고 한다.
  
### 3-1-2. 브랜치

* 보통 브랜치를 문장으로 나타낼 때, 브랜치를 올린다고 하지 않고 브랜치에 커밋을 '가리킨다'라고 표현한다.
* 이것은 브랜치가 나뭇가지처럼 물리적으로 '길'이 존재해서 그 길에 올리는 것이 아니라 단순한 '포인터(pointer)'이기 때문이다.
* 순서대로 커밋1, 커밋2, 커밋3을 만들었다고 해보자. 새로 커밋을 할 때마다 [master] 브랜치의 포인터가 최신 커밋을 가리킨다. 커밋2를 가리키고 있던 [master] 브랜치에서 새로 커밋을 올리면 [master] 브랜치가 커밋3을 가리키도록 움직인다.

  * 커밋3의 상태에서 새로운 [고양이] 브랜치를 만들어 보겠다. 커밋 3에서 만든 브랜치니 [master] 브랜치와 동일하게 커밋3을 가리킬 것이다. 현재 [고양이] 브랜치와 [master] 브랜치의 상태는 모두 커밋3이다.
  
  * [고양이] 브랜치에 커밋을 하나 더 하면 [고양이] 브랜치가 [master] 브랜치보다 커밋 하나만큼 앞서게 된다.
  
  * 그 상태에서 [master] 브랜치로 이동해 커밋을 하나 더 하면, 이제는 [고양이] 브랜치와 [master] 브랜치의 버전이 눈에 띄게 갈라지게 된다. 커밋3을 기준(base)으로 두 가지 버전이 생긴 것이다. 그럼 내 컴퓨터에서 이 [고양이] 브랜치와 [master] 브랜치 사이를 어떻게 넘나들 수 있을까?
  
  * **[HEAD]** 라는 특수한 포인터가 그 비법이다. 브랜치 혹은 커밋을 가리키는 포인터이다. 우리는 [HEAD]를 이용해서 브랜치 사이를 마음대로 넘나들 수 있다. [HEAD] 포인터가 [master] 브랜치가 가리키는 커밋을 가리키고 있을 때는 그 커밋의 상태를 보여주지만, [고양이] 브랜치가 가리키는 커밋을 가리키면 그 커밋의 상태를 보여주게 된다.(브랜치를 가리키기 때문)
  
  * 브랜치의 최신 커밋이 아닌 과거 커밋으로도 [HEAD]를 이동시킬 수 있다. 다만 이 경우에는 [master] 브랜치의 포인터와 [HEAD]가 떨어져있기에 **'분리된 HEAD(Detached HEAD)'** 상태가 된다.

## 3-2. 브랜치 실습 기본: 만들고, 이동한다

### 3-2-1. 새 브랜치 만들기

* 본 실습은 GUI 실습이기 때문에 일부 생략

* 기존 HEAD가 가르치던 master브랜치에서 새 브랜치를 만들고 새로 커밋하게 되면 분기가 나누어지게 된다.

* 그 상태로 푸시하게 되면 원격저장소인 GitHub에도 적용되어 브랜치가 올라온 것을 볼 수 있다.

### 3-2-2. 브랜치 이동하기: 체크아웃(checkout)

* 체크아웃을 통해 브랜치를 이동할 수 있으며, 이를 통해 커밋이 병렬적으로 잘 생성될 수 있도록 할 수 있다.

* 그렇지 않고 계속해서 브랜치를 만들면 서로 다른 수정본이 모두 반영되게 된다.

* 즉, 브랜치를 만들 때는 base 브랜치를 잘 설정하고, checkout을 통해 설정해야 한다.

* 이 상태로 브랜치를 새로 생성하게 되면 본격적으로 나뭇가지처럼 가지를 뻗을 수 있게 된다.

* 각자의 개발이 완료되면 base 브랜치에 내 브랜치 작업물을 합치면 된다.

## 3-3. 브랜치와 브랜치를 합치기: 병합(merge, 머지)

### 3-3-1. 병합은 무엇인가요?
* **병합(merge)** 은 간단히 두 버전의 합집합을 구하는 것이다.
  1. Merge commit(병합 커밋) : 새로운 커밋
  2. Fast-forward(빨리 감기) : 기존 커밋에 내용 변경
  3. Conflict(충돌) : 뭘 커밋해야 할지 모르는 상황

### 3-3-2. 두 브랜치를 합치는 과정
* Git에서 브랜치와 브랜치를 합치는 명령어는 머지(merge)인데, 우리말로 병합이라고 부른다. 앞서 살펴봤듯이 각각 다른 브랜치에서 개발을 완료했기 때문에 각자 만든 두 개의 브랜치를 base 브랜치에 합쳐야 한다.
---
* 앞서 나눴던 브랜치를 예로 들자면
> * base 브랜치[master]-커밋2에 feature/detail-page-커밋4를 먼저 합치고자 한다. 이 커밋은 이전 커밋을 단순하게 수정한 최신본이기 때문에 두 상태를 합치면 따로 바뀌는 상태 없이 커밋4가 될 것이다.
> 
> * 커밋2를 가리키고 있던 [master] 브랜치가 빨리 감기를 해서 커밋4를 가리키게 되었다. 새로 추가되거나 충돌나는 것 없이 그냥 앞으로 이동하기만 하면 되어서 '빨리 감기'라고 부른다. 이제 [master] 브랜치는 [feature/detail-page] 브랜치의 새로운 코드가 반영된 버전이 되었다.
> 
> * [feature/detail-page] 브랜치의 모든 내용이 [master] 브랜치에 반영되었으니 [feature/detail-page] 브랜치는 삭제한다.
> 
> * 하지만, [feature/cart] 브랜치에서의 커밋은 [master] 브랜치가 가리키는 커밋4와 [feature/cart] 브랜치가 가리키는 커밋5는 커밋2를 중심으로 상태가 바뀌었기 때문에 병합 커밋이 될 것이다. 커밋4와 커밋5를 합치는 병합 커밋을 만드는 것이다.
> * 두 브랜치를 합치면서 새로운 병합 커밋은 둘 중 어디든 올릴 수 있으니 상황에 따라 선택하면 된다.

## 3-4. 앗! 둘이 똑같은 코드를 고쳤어요: 충돌(conflict) 해결하기

### 3-4-1. 브랜치 합치기 실습: 병합 커밋 및 충돌 해결
* 커밋3과 커밋4은 서로 다른 분기에 있어서 병합 커밋을 만들면서 코드를 합쳐야 한다.
* **꿀팁**: 혹시 병합하다 코드가 깨질 수 있으니 병합할 때는 다 같이 쓰는 브랜치 말고 내 전용 브랜치에서 먼저 병합하고 문제가 없는지 확인한다.
* 병합된 커밋이 문제가 없는 것을 확인하고 나서 병합 커밋을 브랜치에 반영한다.

#### 병합 충돌 발생
* 서로 다른 코드를 작성하여 병합 충돌이 발생할 수 있다.
```
<<<<<<< HEAD
3. 장바구니 담기
=======
3. 디테일 페이지 보여주기
>>>>>>> master
```

* 위처럼 베이스 브랜치인 [feature/cart] 브랜치의 코드가, 아래는 병합의 대상인 [master] 브랜치의 코드가 보인다.
* 이를 수정하기 위해서는 필요없는 텍스트를 모두 삭제한 후 `Crtl + S`로 저장
* 모든 충돌이 해결된 후 스테이지로 Add하고 최종적으로 커밋해준다.
* 이후 푸시하여 원격저장소에도 반영한다.
  
## 3-5. 브랜치를 합치는 예의바른 방법: 풀 리퀘스트