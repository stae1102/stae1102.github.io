---
layout: post
title:  "28 Feb TIL: js 복습, 문서 객체 모델(DOM)"
excerpt: "js remind, DOM"
date:   2022-02-28 23:41:00 +0900
categories: 
  - Study
tags:
  - TIL
---

- [1. if문, if···else문과 조건 연산자](#1-if문-ifelse문과-조건-연산자)
  - [if문과 if···else](#if문과-ifelse)
  - [조건 연산자 - ?(물음표), :(콜론)](#조건-연산자---물음표-콜론)
  - [truthy와 falsy 값](#truthy와-falsy-값)
- [2. 조건이 많을 때 - switch문](#2-조건이-많을-때---switch문)
- [3. 명령 반복 실행 - for문](#3-명령-반복-실행---for문)
- [4. 중첩 for문](#4-중첩-for문)
- [5. 특정 조건에 따라 반복 - while문, do···while문](#5-특정-조건에-따라-반복---while문-dowhile문)
- [6. 반복을 건너뛰거나 멈추기 - break문과 continue문](#6-반복을-건너뛰거나-멈추기---break문과-continue문)

# 1. if문, if···else문과 조건 연산자

## if문과 if···else

프로그램을 제작할 때 작동 순서대로 실행하기도 하지만, 작동 순서를 고려하지 않고 조건에 따라 순서를 조절해야 하는 경우가 있다. 이런 조건에 따라 명령 순서를 정하기 위해 사용하는 것이 if문이다.

* if문

if문의 소괄호 안 조건이 true일 경우 중괄호 속 코드를 실행하고 false일 때 조건문에서 벗어난다.

```js
if (true) {
    document.write("조건문이 참이라면 이 문장이 출력된다.");
}
```

* if···else문
  
if문이 참 거짓을 판단하여 참일 때만 코드를 실행시키지만, 참이 아닐 때는 조건문을 벗어나 코드를 실행시키지 않는다. 하지만 참이 아닐 때도 코드를 실행시켜야 하는 경우가 있는데 이때, if···else문을 사용한다.

```js
var age = prompt("나이를 입력하세요.");
if (age > 19) {
    document.write("물품 구입이 가능합니다.");
}
else {
    document.write("미성년자 구매 제한 상품입니다.");
}
```

## 조건 연산자 - ?(물음표), :(콜론)

조건이 하나이고 참 거짓일 때 실행하는 코드가 하나뿐이라면 조건 연산자를 통해 조건문을 작성할 수 있다. ? 왼쪽에 조건을 넣고 : 왼쪽에는 참일 때 실행할 코드를, 오른쪽에는 거짓일 때 실행할 코드를 작성한다.

## truthy와 falsy 값

* truthy는 명시적으로 true는 아니지만 true로 인정하는 값이며, falsy는 그 반대입니다. falsy가 truthy보다 훨씬 적기 때문에 falsy를 외우면 truthy는 falsy 외의 전부이기 때문에 falsy를 외우는 것이 좋다.

1. 0 # 숫자
2. "" # 빈 문자열
3. NaN # 숫자가 아님(Not a Number)
4. undefined
5. null

# 2. 조건이 많을 때 - switch문

소스를 작성할 때 조건이 여러 개일 때가 있다. 이 경우 switch 문을 사용한다.

switch 소괄호 안에는 변수를 넣고 중괄호 안에 case 별로 값을 지정해서, 소괄호의 변수가 case와 같을 때, 그 case문의 코드를 실행합니다.

```js
switch(variable) {
    case "1" : document.write("case 1");
        break;
    case "2" : document.write("case 2");
        break;
    case "3" : document.write("case 3");
        break;
    default: alert("존재하지 않는 case 입니다.");
}
```

* 각 케이스에서도 실행할 명령이 두 개 이상이라면 중괄호로 묶어 작성합니다.

* break문을 사용하여 명령을 실행한 다음 완전히 switch문을 빠져나오도록 소스를 작성합니다.

* default는 변수가 모든 case에서 일치하지 않을 때 실행할 명령입니다.

# 3. 명령 반복 실행 - for문

반복문을 사용하면 긴 코드를 짧게 줄여서 사용할 수 있어 반복이 많을 때 사용합니다.

```js
var sum = 0;
for (let i=1; i<11; i++) {
    sum += i;
}
```

for문의 반복 횟수를 기준으로 하기 위해 카운터 변수를 정의해주고(보통 i를 사용) i의 조건을 만들어 카운터 횟수를 정합니다.

* ES6에서는 인덱스를 사용하지 않고 값을 기준으로 반복합니다. 파이썬의 for문 처럼 배열의 값들을 모두 받아옵니다.

```js
var seasons = ['봄', '여름', '가을', '겨울'];
for(let value of seasons) {
    console.log(value);
}
```

# 4. 중첩 for문

for문 안에 for문을 넣어 사용할 수 있습니다. 아래 소스는 for문을 두 개 사용하여 구구단을 구현한 것입니다.

```js
for(let i=2; i<10; i++) {
    for(let j=1; j<10; j++) {
        document.write(i + ' X ' + j + ' = ' + i * j + '<br>');
    }
    document.write("<br>")
}
```

# 5. 특정 조건에 따라 반복 - while문, do···while문

while문은 괄호 안의 값이 조건을 만족할 때 중괄호 안의 명령을 실행합니다.

```js
var number = 10;
while (number > 0) {
    document.write("카운트 다운 " + number);
    number -= 1;
}
```

do···while문은 조건이 맨 뒤에 붙습니다. while문과 달리 일단 명령을 한 번 실행한 후 조건을 확인합니다.

# 6. 반복을 건너뛰거나 멈추기 - break문과 continue문

* 파이썬의 break 및 continue와 같습니다.

* break문은 반복문을 바로 빠져나갑니다.

* continue문은 해당 반복을 건너뜁니다.

두 기능은 조건과 함께 사용하여 반복문을 실행하고 싶지 않을 때, 혹은 반복을 멈춰야 할 때 유용하게 사용할 수 있습니다.

---

- [1. 함수](#1-함수)
  - [함수의 정의와 실행](#함수의-정의와-실행)
- [2. let과 constant로 변수 선언](#2-let과-constant로-변수-선언)
  - [변수의 적용 범위](#변수의-적용-범위)
  - [지역 변수](#지역-변수)
  - [전역 변수](#전역-변수)
  - [var를 사용한 변수의 특징](#var를-사용한-변수의-특징)
  - [let과 constant를 사용한 변수의 특징](#let과-constant를-사용한-변수의-특징)
    - [블록 안에서만 사용할 수 있는 변수](#블록-안에서만-사용할-수-있는-변수)
    - [호이스팅이 없는 변수](#호이스팅이-없는-변수)
    - [const 변수](#const-변수)
  - [변수 사용 꿀팁](#변수-사용-꿀팁)
- [3. 여러 번 사용할 수 있는 함수 만들기](#3-여러-번-사용할-수-있는-함수-만들기)
  - [함수의 매개변수와 인수](#함수의-매개변수와-인수)
    - [매개변수 지정](#매개변수-지정)
    - [인수 넘겨주기](#인수-넘겨주기)
  - [함수의 return문](#함수의-return문)
- [4. 함수 표현식](#4-함수-표현식)
  - [익명 함수](#익명-함수)
  - [즉시 실행 함수](#즉시-실행-함수)
  - [화살표 함수](#화살표-함수)
    - [매개변수가 없을 때 => 로 함수 선언](#매개변수가-없을-때--로-함수-선언)
    - [매개변수가 1개일 때 => 로 함수 선언](#매개변수가-1개일-때--로-함수-선언)
    - [매개 변수가 2개일 때 => 로 함수 선언](#매개-변수가-2개일-때--로-함수-선언)
- [5. 이벤트 다루기](#5-이벤트-다루기)
  - [마우스 이벤트](#마우스-이벤트)
  - [키보드 이벤트](#키보드-이벤트)
  - [문서 로딩 이벤트](#문서-로딩-이벤트)
  - [폼 이벤트](#폼-이벤트)
  - [이벤트 처리기](#이벤트-처리기)

# 1. 함수

함수를 사용하면 각 명령의 시작과 끝을 명확하게 구분할 수 있습니다. 또 같은 기능을 반복하고자 할 때, 기능들을 묶어 하나의 함수로 구현하면 여러 번 반복하여 사용할 수 있습니다.

## 함수의 정의와 실행

함수가 어떤 명령을 처리해야 할지 알려주는 것을 함수 선언, 이렇게 만든 함수를 사용하는 것이 함수 실행이라고 합니다.  

* 함수를 선언할 때는 `function` 예약어를 사용합니다.

```js
function sumNumber() {
    var sum = 1 + 2;
    alert(sum);
}
```

# 2. let과 constant로 변수 선언

## 변수의 적용 범위

변수가 다른 함수에서 사용할 수 없는 경우가 있고, 어느 함수에서나 사용할 수 있는 변수가 있습니다.

* 한 함수 안에서만 사용할 수 있는 변수를 지역 변수 혹은 로컬 변수(local variable)라고 하고, 스크립트 전체에서 사용할 수 있는 변수는 전역 변수 혹은 글로벌 변수(global variable)라고 합니다.

## 지역 변수 

지역 변수는 함수 안에서 선언하고 함수 안에서만 사용해야 합니다. **함수를 선언할 때 지역 변수를 선언하려면 예약어 var와 함께 변수 이름을 지정해야 합니다.**

```js
function myFunc() {
    var func = "함수입니다.";
    alert(func);
}
```

## 전역 변수

스크립트 소스 전체에서 자유롭게 사용할 수 있는 변수를 말합니다. **함수 안에서 전역변수를 사용하고자 한다면, var 예약어 없이 변수 이름을 지정해야 합니다.**

## var를 사용한 변수의 특징

var 뱐수를 사용할 때 조심해야 할 것이 **호이스팅(hoisting)** 입니다. 상황에 따라 변수의 선언과 할당을 분리해서 선언 부분을 스코프의 가장 위쪽으로 끌어올리는 것입니다. 값이 할당되지 않았을 때의 자료형인 undefined가 할당될 수도 있습니다. 변수를 선언하기 전에 사용해도 문제가 되지 않는다는 단점이 있습니다.  
  
또 다른 단점은 **재선언**입니다. var를 통해서 변수 이름을 재선언 할 수 있기 때문에 이전에 선언한 부분을 덮어쓰기 때문에 예상치 못한 결과를 낳을 수도 있습니다.

## let과 constant를 사용한 변수의 특징

### 블록 안에서만 사용할 수 있는 변수

let 예약어로 선언한 변수는 변수를 선언한 블록({}로 묶은 부분)에서만 유효하고 블록을 벗어나면 사용할 수 없습니다.

```js
function sumNumber(n) {
    let sum = 0;
    for(let i=1; i<n+1; i++) {
        sum += i;
    }
    console.log(sum);
}
```

* let 예약어를 사용하면 재할당은 가능하지만 변수를 재선언할 수는 없습니다. 실수로 함수를 재선언 하더라도 오류를 발생시킵니다.

### 호이스팅이 없는 변수

* let 예약어를 사용한 변수는 선언하기 전에 사용할 경우 오류 메시지를 나타냅니다.

### const 변수

* const 예약어를 사용해 변수를 선언하며, **재선언하거나 재할당할 수 없으며, let예약어와 같이 블록레벨의 스코프를 가집니다.**

## 변수 사용 꿀팁

* 젼역 변수는 최소한으로 사용한다.

* var 변수는 함수의 시작부분에서 선언한다. - 호이스팅

* for문에서 카운터 변수를 사용할 때 블록 변수를 사용하는 것이 좋다.

* ES6를 사용할 때는 var 보다 let 예약어를 사용하는 것이 좋다.

# 3. 여러 번 사용할 수 있는 함수 만들기

## 함수의 매개변수와 인수

### 매개변수 지정

함수를 사용하기 위해 필요하다고 지정한 변수를 매개변수라고 합니다. 함수를 실행할 때 필요한 입력입니다.

```js
function addNumber(a, b) {
    let sum = a + b;
    alert(sum);
}
```

### 인수 넘겨주기

매개변수에 할당하는 값을 인수라고 합니다. 인수를 넣어 함수에서 사용하는 매개변수의 사용을 가능하게 합니다.  
  
또한, 함수의 매개변수를 지정하면서 기본값을 선언할 수도 있습니다.

```js
function addNumber(a = 1, b = 2) {
    let sum = a + b;
    alert(sum);
}
```

## 함수의 return문

함수의 결괏값을 함수 밖으로 넘기는 것을 '함숫값을 반환한다(return)'라고 합니다. 함수의 결괏값을 변수에 저장할 수 있는 등 다용도로 활용이 가능하다는 점에서 장점이 있습니다.

# 4. 함수 표현식

## 익명 함수

이름 자체가 없는 식을 익명 함수라고 부릅니다. 익명 함수 자체가 '식(Expression)'이기 때문에 익명 함수를 변수에 할당할 수 있습니다.

```js
var add = function(a, b) {
    return a + b;
}
```

이렇게 선언한 함수는 변수에 할당하였기 때문에 이 변수를 함수 이름처럼 사용해서 익명 함수를 실행합니다.

```js
var sum = add(10, 20);
```

## 즉시 실행 함수

함수를 정의함과 동시에 사용하는 함수입니다.

```js
(function() {
    ...
})();
```
```js
(function() {
    ...
}());
```
즉시 실행 함수는 변수에 할당할 수 있고, 함수에서 반환하는 값을 변수에 할당할 수도 있습니다. 또한, 매개변수를 사용할 수도 있습니다.

## 화살표 함수

ES6 버전부터는 => 표기법(화사룦 표기법)을 통해 함수 선언을 더 간단하게 작성할 수 있습니다. 이 방법은 화살표 함수라고 하며 **익명 함수**에서만 사용할 수 있습니다.

### 매개변수가 없을 때 => 로 함수 선언

```js
const hi = function() {
    return "안녕하세요?";
}
```
↓
```js
const hi = () => { return "안녕하세요?"};
```
중괄호의 내용이 한 줄뿐이라면 중괄호를 생략해서 사용할 수도 있습니다(return 문도 생략 가능).

### 매개변수가 1개일 때 => 로 함수 선언

```js
let hi = function(user) {
    document.write(user + "님, 안녕하세요?");
}
```
↓
```js
let hi = user => document.write(user + "님, 안녕하세요?");
```

### 매개 변수가 2개일 때 => 로 함수 선언
```js
let sum = function(a, b) {
    return a + b;
}
```
↓
```js
let sum = (a, b) => { return a + b }
```
↓
```js
let sum = (a, b) => a + b;
```

# 5. 이벤트 다루기

이벤트는 웹 브라우저나 사용자가 행하는 어떤 동작을 말합니다.

## 마우스 이벤트

1. click: 사용자가 HTML 요소를 마우스로 눌렀을 때 이벤트가 발생
2. dblclick: 사용자가 HTML 요소를 마우스로 두 번 눌렀을 때 이벤트가 발생
3. mousedown: 사용자가 요소 위에서 마우스 버튼을 누르는 동안 이벤트가 발생
4. mousemove: 사용자가 요소 위에서 마우스 포인터를 움직일 때 이벤트가 발생
5. mouseover: 마우스 포인터가 요소 위로 옮겨질 때 이벤트가 발생
6. mouseout: 마우스 포인터가 요소를 벗어날 때 이벤트가 발생
7. mouseup: 사용자가 누르고 있던 마우스 버튼에서 손을 뗄 때 이벤트가 발생

## 키보드 이벤트

1. keypress: 사용자가 키를 눌렀을 때 이벤트가 발생
2. keydown: 사용자가 키를 누르는 동안 이벤트가 발생
3. keyup: 사용자가 키에서 손을 뗄 때 이벤트가 발생

## 문서 로딩 이벤트

1. abort: 웹 문서가 완전히 로딩하기 전에 불러오기를 멈췄을 때 이벤트가 발생
2. error: 문서가 정확히 로딩되지 않았을 때 이벤트가 발생
3. load: 문서 로딩이 끝나면 이벤트가 발생
4. resize: 문서 크기가 바뀌었을 때 이벤트가 발생
5. scroll: 문서 화면이 스크롤되었을 때 이벤트가 발생
6. unload: 문서를 벗어날 때 이벤트가 발생

## 폼 이벤트

1. blur: 폼 요소에 포커스를 잃었을 때 이벤트가 발생
2. change: 목록이나 체크 상태 등이 변경되었을 때 이벤트가 발생(`<input>`, `<select>`, `<textarea>` 태그에서 사용)
3. focus: 폼 요소에 포커스가 놓였을 때 이벤트가 발생(`<label>`, `<select>`, `<textarea>`, `<button>` 태그에서 사용)
4. reset: 폼이 다시 시작되었을 때 이벤트가 발생
5. submit: submit 버튼을 눌렀을 때 이벤트가 발생

## 이벤트 처리기

웹 문서에서 이벤트가 발생했을 때 어떤 함수를 실행해야 할지 웹 브라우저에게 알려 주어야 합니다. 이때 이벤트와 이벤트 처리 함수를 연결해 주는 것을 '이벤트 처리기' 또는 '이벤트 핸들러' 라고 합니다. 이벤트 핸들러는 이벤트 이름 앞에 on을 붙여서 사용합니다.

---

- [1. 객체란?](#1-객체란)
  - [자바스크립트에서 객체의 종류](#자바스크립트에서-객체의-종류)
    - [내장객체](#내장객체)
    - [문서 객체 모델](#문서-객체-모델)
    - [브라우저 객체 모델](#브라우저-객체-모델)
    - [사용자 정의 객체](#사용자-정의-객체)
  - [객체의 속성과 메서드](#객체의-속성과-메서드)
  - [객체의 프로토타입과 인스턴스 소개](#객체의-프로토타입과-인스턴스-소개)
  - [객체의 인스턴스 만들기](#객체의-인스턴스-만들기)
- [2. 사용자 정의 객체 만들기](#2-사용자-정의-객체-만들기)
  - [리터럴 표기법을 사용해 객체를 만드는 방법](#리터럴-표기법을-사용해-객체를-만드는-방법)
  - [생성자 함수를 사용해 객체를 만드는 방법](#생성자-함수를-사용해-객체를-만드는-방법)

# 1. 객체란?

하나의 변수에 다양한 정보를 담기 위해 사용하는 자료형이 객체입니다.

```js
var book = {
    title: '자바스크립트',
    author: '홍길동',
    pages: 500,
    price: 15000
}
```

## 자바스크립트에서 객체의 종류

자바스크립트 프로그램에서 인식할 수 있는 모든 대상을 객체로 해석할 수 있습니다. 그렇다면 자바스크립트에서는 어떤 것들을 객체로 다룰까요?

### 내장객체

미리 객체로 정의된 객체를 **'내장 객체(Built-in Object)'** 라고 합니다. Number, Boolean, Math, Array 등이 있습니다.

### 문서 객체 모델

객체를 사용해 웹 문서를 관리하는 방식을 말합니다.웹 문서뿐만 아니라 웹 문서 안에 포함된 이미지·링크 등도 모두 객체로 미리 만들어 놓았습니다. Document, Image 등이 있습니다.

### 브라우저 객체 모델

웹 브라우저 정보를 객체로 다루는 것이 '브라우저 객체 모델'입니다. 브라우저 종류나 버전을 담고 있는 Navigator 객체, 브라우저에서 방문한 기록을 남기는 History 객체 등이 있습니다.

### 사용자 정의 객체

사용자가 필요할 때마다 객체를 정의해 사용할 수 있습니다.

## 객체의 속성과 메서드

객체의 값을 담고 있는 정보를 **속성(Property)** 이라고 부릅니다. 객체의 속성 값을 가져올 때는 객체 이름 뒤에 마침표(.)를 찍고 그 뒤에 속성 이름을 적습니다.  

속성 외에도 중요한 개념이 **메서드(Method)** 입니다. 메서드는 개체가 어떻게 동작할지를 선언해 놓은 함수입니다. alert() 또한 Window 객체의 메서드입니다.

## 객체의 프로토타입과 인스턴스 소개

웹 문서에 있는 요소를 프로그램에서 사용하려면 객체 형태여야 합니다. 이런 요소들을 처리하기 위한 속성과 기능을 모아놓은 것이 **'프로토타입(Prototype)'** 이라고 합니다. 웹 문서에 3개의 이미지를 포함시켜야 한다면 Image 객체를 사용해서 똑같은 모양의 객체 3개를 찍어낸 다음 원하는 이미지를 담으면 됩니다. 이렇게 프로토타입을 사용해 만들어낸 객체는 **'인스턴스(Instance)'** 라고 합니다.

## 객체의 인스턴스 만들기

객체의 인스턴스를 만들 때, 즉 객체를 똑같이 찍어 새 객체를 만들 때는 **new 예약어**를 사용합니다. new 예약어 뒤에 프로토 타입 객체 이름과 괄호를 써주면 됩니다.

```js
var now = new Date()
now
Fri Nov 02 2018 21:50:52 GMT+0900
```

# 2. 사용자 정의 객체 만들기

## 리터럴 표기법을 사용해 객체를 만드는 방법

리터럴(Literal)이란 프로그래밍에서 자료를 표기하는 방식을 말합니다. 즉, 객체 리터럴 표기법이란 객체를 선언하면서 동시에 값을 지정해주는 것을 말합니다.

```js
var book = {
    title: '자바스크립트',
    author: '고쌤',
    pages: 500,
    price: 15000,
    info: function() {
        alert(this.title + '책의 분량은 ' + this.pages + '쪽입니다.');
    }
}
book.info()
```

만약 프로그램에서 사용하다가 새로운 속성을 추가하고자 할 때는 다음과 같은 방법으로 속성을 추가합니다.

```js
book.field = "IT"
"IT"
```

## 생성자 함수를 사용해 객체를 만드는 방법

**리터럴 표기법을 사용해 객체를 만드는 방법은 정해진 값을 가진 객체를 한 번만 만들어 냅니다.** 하지만 생성자 함수를 사용한 객체는 틀을 미리 만들어두어 필요할 때마다 인스턴스를 만들어 객체를 저장하는 것이 편리합니다.  

생성자 함수 또한 함수이므로 **`function`** 예약어를 사용해 선언합니다. 생성자 함수 안에 객체의 속성과 함수를 정의할 때는 this 예약어 다음에 마침표와 속성 이름을 입력합니다. this는 선언하고 있는 객체 자체를 가리킵니다.

```js
function Book(author, pages, price, title) {
    this.author = author;
    this.pages = pages;
    this.price = price;
    this.title = title;
}
```

인스턴스로 사용하면 이렇습니다.  

```js
jsBook = new Book("홍길동", 500, 15000, "자바스크립트")
jsBook.title;
'자바스크립트'
```

---

- [1. Array 객체란?](#1-array-객체란)
  - [Array 객체로 배열 만들기](#array-객체로-배열-만들기)
  - [배열에서 for문 사용하기](#배열에서-for문-사용하기)
- [2. Array 객체의 함수 알아보기](#2-array-객체의-함수-알아보기)
  - [둘 이상의 배열을 연결하는 `concat()` 함수](#둘-이상의-배열을-연결하는-concat-함수)
  - [배열 요소를 연결하는 `join()` 함수](#배열-요소를-연결하는-join-함수)
  - [새로운 요소를 추가하는 `push()` 함수와 `unshift()` 함수](#새로운-요소를-추가하는-push-함수와-unshift-함수)
  - [배열에서 요소를 추출하는 `pop()` 함수와 `shift()` 함수](#배열에서-요소를-추출하는-pop-함수와-shift-함수)
  - [원하는 위치의 요소를 삭제하거나 추가하는 `splice()`](#원하는-위치의-요소를-삭제하거나-추가하는-splice)
    - [인수가 1개일 경우](#인수가-1개일-경우)
    - [인수가 2개일 경우](#인수가-2개일-경우)
    - [인수가 3개 이상일 경우](#인수가-3개-이상일-경우)
  - [원하는 위치의 요소들을 추출하는 `slice()` 함수](#원하는-위치의-요소들을-추출하는-slice-함수)

# 1. Array 객체란?

여러 개의 항목을 하나의 변수에 저장해야 할 때 '배열(Array)'을 자주 사용합니다.

## Array 객체로 배열 만들기

자바스크립트에서는 배열을 쉽게 만들고 다룰 수 있게 미리 Array 객체가 만들어져 있습니다.

```js
var myArray = new Array(); // Array 객체의 인스턴스를 만듭니다.
```

초깃값이 있는 배열이라면 리터럴을 사용한 방법으로 배열을 만들 수도 있고 Array 객체를 사용해서 만들 수도 있습니다.

```js
var numbers = ["one", "two", "three", "four"];  // 리터럴을 사용한 배열
var numbers = new Array("one", "two", "three", "four");  // Array 객체를 사용한 배열
```

## 배열에서 for문 사용하기

배열은 for문과 함께 자주 사용됩니다. for문을 통해 요소를 처음부터 끝까지 반복할 수 있으며, 배열의 요소 개수를 활용하기 위해서 length 속성을 이용하기도 합니다.

```js
for (let i=0; i<numbers.length; i++) {
    console.log(numbers[i])
}
```

# 2. Array 객체의 함수 알아보기

## 둘 이상의 배열을 연결하는 `concat()` 함수

기존의 배열에 또 다른 배열이나 값을 합쳐서 새로운 배열을 만드는 함수입니다.

```js
var nums = ["1", "2", "3"];
var chars = ["a", "b", "c", "d"];
nums.concat(chars)  // nums 배열에 chars 배열 연결
▶ (7) ["1", "2", "3", "a", "b", "c", "d"]
```

concat()은 새로운 배열을 만들기 때문에 함수에 사용한 기존의 두 배열에는 영향을 미치지 않습니다.

## 배열 요소를 연결하는 `join()` 함수

join() 함수는 배열 요소를 연결하는 함수입니다. 배열요소를 연결할 때 요소들을 구분할 기호가 필요한데 기본값은 콤마(,)이며, 괄호 한에 연결할 기호를 넣어 연결할 수 있습니다.

```js
nums.join("-")
"1-2-3"
```

## 새로운 요소를 추가하는 `push()` 함수와 `unshift()` 함수

배열의 맨 끝에 요소를 추가하려면 push() 함수를, 맨 앞에 요소를 추가하려면 unshift() 함수를 사용합니다.

```js
var nums = ["1", "2", "3"];
nums.push("4", "5");
5   // 새 요소가 추가된 후의 배열 요소의 개수가 반환됨
nums.unshift("0");
6
```

## 배열에서 요소를 추출하는 `pop()` 함수와 `shift()` 함수

배열의 맨 끝에서 요소를 추출하려면 pop() 함수를, 맨 앞에서 요소를 추출하려면 shift() 함수를 사용합니다.

```js
var js = ["es6+", "node", "react", "angular", "vue"]
js.shift()
"es6+"
```

## 원하는 위치의 요소를 삭제하거나 추가하는 `splice()`

배열의 중간 부분에 요소를 추가하거나 삭제하기 위해서 사용하는 함수가 splice() 함수입니다.

### 인수가 1개일 경우

이 경우에 splice() 함수는 인수가 가리키는 인덱스 요소부터 배열의 끝 요소까지 삭제합니다.

```js
var numbers = [0, 1, 2, 3, 4, 5]
numbers.splice(2)
▶ (4) [2, 3, 4, 5]
numbers
▶ (2) [0, 1]
```

### 인수가 2개일 경우

첫 번째 인수는 **인덱스 값**이고, 두 번째 인수는 **삭제할 개수**입니다.
numbers.splice(2, 1)이라고 한다면, numbers에서 인덱스가 2인 값에서 1개를 삭제한다는 의미입니다.

```js
var study = ["html", "css", "web", "jquery"]
study.splice(2, 1)
▶ ["web"]
study
▶ (3) ["html", "css", "jquery"]
```

### 인수가 3개 이상일 경우

첫 번째 인수는 해당 배열에서 삭제할 위치, 두 번째 인수는 삭제할 개수를 알려주며, 세 번째 인수부터는 삭제한 위치에 새로 추가할 요소를 지정합니다.

* 기존 요소를 삭제하지 않고 새로운 요소를 추가하고 싶다면 삭제할 개수를 지정하는 두 번째 인수에 0을 넣으면 됩니다.

## 원하는 위치의 요소들을 추출하는 `slice()` 함수

* 파이썬의 슬라이싱과 사용방법이 동일합니다.

slice() 함수의 첫 번째 인수는 시작위치를, 두 번째 인수는 종료 위치를 의미합니다. slice() 함수는 첫 번째 인수 위치부터 두 번째 인수 위치 직전까지 추출해 반환합니다. 시작 인덱스만 지정할 경우, 시작 인덱스부터 끝까지 추출합니다. **원래 배열에 영향을 주지 않습니다.**

---

# Chapter 8. 웹 문서를 다루는 방법, 문서 객체 모델(DOM)

자바스크립트를 사용해 웹 문서의 텍스트나 이미지 등의 요소를 제어하기 위해서는 문서 객체 모델(Document Object Model)을 이해해야 합니다.

## 8-1. 문서 객체 모델이란?

### 문서 객체 모델의 정의

* DOM의 정의: 웹 문서의 모든 요소를 자바스크립트를 이용하여 조작할 수 있도록 객체를 사용해 문서를 해석하는 방법.

* document는 웹 문서의 소스가 그대로 들어있으며 수많은 DOM 요소 중 하나입니다.

### DOM 트리

DOM은 웹 문서의 요소를 부모 요소와 자식 요소로 구분합니다.

```html
<body>
    <h1>제목</h1>
    <p>본문</p>
</body>
```

DOM은 body를 h1, p의 부모 요소로, h1, p를 body의 자식 요소로 이해하고 구조화합니다.  

DOM 트리는 가지와 노드로 표현합니다. 노드(Node)는 그림에서 네모 상자를 가리키고, 웹 문서에 있는 요소나 속성을 나타냅니다. 가지는 노드와 노드를 잇는 연결 관계를 나타냅니다. 또한, HTML의 요소가 품고 있는 텍스트, 이미지도 자식으로 간주하여 DOM 트리에 표현합니다.  

DOM 트리는 웹 문서 요소를 다음과 같이 표현합니다.

* 웹 문서의 태그는 요소(Element) 노드로 표현합니다.
* 태그가 품고 있는 텍스트는 해당 요소 노드(태그)의 자식인 텍스트(Text) 노드로 표현합니다.
* 태그의 속성은 모두 해당 요소 노드(태그)의 자식 노드인 속성(Attribute) 노드로 표현합니다.
* 주석은 주석(Comment) 노드로 표현합니다.

### DOM 트리 자세히 살펴보기

![DOMTREE](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/JavaScript/DOM%20TREE.png)
  
맨 위에 있는 html 노드는 요소 노드(Element Node)이면서 다른 요소 노드가 뻗어 나가기 시작하는 노드이기도 합니다. 이를 루트 노드(Root Node)라고 부릅니다.

## 8-2. DOM 요소에 접근하기

자바스크립트로 프로그램에 사용할 요소에 접근하는 것을 **'DOM 요소에 접근한다'** 고 이야기합니다.

#### DOM 요소를 id 선택자로 접근하는 함수 - getElementById()

id 선택자를 사용하여 DOM 요소에 접근하는 함수가 바로 getElementById() 함수입니다.

```js
document.getElementById("heading")
    <h1 id="heading">에디오피아 게뎁</h1>
```

활용 ↓

```js
document.getElementById("heading").onclick = function() {
    this.style.fontSize = '5em';
}
```
위 소스를 작성한 후 heading을 id로 가지는 요소를 클릭하면 폰트 사이즈가 변경된다.

#### DOM 요소를 class 값으로 찾아내는 함수 - getElementsByClassName()

class 속성값을 사용하여 DOM 요소에 접근하려면 getElementsByClassName() 함수를 사용합니다. class는 여러 개를 사용할 수 있기 때문에 Element**s**임을 기억합시다.

```js
document.getElementsByClassName("accent")[0].style.textDecoration = "underline";
document.getElementsByClassName("accent")[1].style.textDecoration = "underline";
```

#### DOM 요소를 태그 이름으로 찾아내는 함수 - getElementsByTagName()

id나 class 선택자가 없는 DOM 요소는 getElementsByTagName() 함수를 사용하여 태그 이름을 찾아 DOM 요소에 접근하면 됩니다.

```js
document.getElementsByTagName('h2')[0].style.backgroundColor = "#eee"
```

#### DOM 요소를 다양한 방법으로 찾아주는 함수 - querySelector(), querySelectorAll()

id, class 값을 사용해도 되고 태그 이름을 사용해도 되는 querySelector() 함수와 querySelectorAll() 함수가 있습니다.  

id를 선택할 때는 id값 앞에 샵(#)을 붙이고, class값 앞에는 마침표(.)를 붙입니다. 태그는 기호 없이 태그 이름만 입력하면 됩니다.

```js
document.querySelector("#heading")
```

그런데 querySelectorAll() 함수를 사용해 요소를 탐색하면 getElementsByClassName() 함수와는 다르게 NodeList를 반환합니다.

```js
document.querySelectorAll(".accent");
▶ NodeList(2) [span.accent, span.accent]
document.getElementsByClassName("accent");
▶ HTMLCollection(2) [span.accent, span.accent]
```

NodeList는 HTMLCollection과 같은 방법으로 다룰 수 있습니다. 즉, NodeList는 여러 개의 노드를 모아 놓은 것으로 배열과 비슷하다고 생각하면 됩니다.

```js
document.querySelectorAll(".accent")[1].style.backgroundColor = "yellow";
"yellow"
```

#### getElementById()함수와 querySelector() 함수의 차이

getElementById() 함수는 단순히 id 선택자를 사용해서 요소에 접근하지만 querySelector()를 사용하면 id선택자뿐만 아니라 둘 이상의 선택자를 사용해서 요소에 접근할 수 있습니다.

## 8-3. 웹 요소의 태그 속성 가져와서 수정하기

### HTML 태그 속성을 가져오거나 수정하는 함수 - getAttribute(), setAttribute()

```js
document.querySelector("#prod-img > img").getAttribute("src");
'images/coffee-pink.jpg'
```

위를 통해 태그가 가지고 있는 속성을 추출해낼 수 있습니다. HTML 태그의 속성 값을 바꾸기 위해서는 **setAttribute()** 함수를 사용하고, 괄호 안에 속성 이름과 속성 값을 넣으면 됩니다. 이때 지정한 속성이 아직 없다면 새로 속성과 속성 값을 추가하고, 지정한 속성이 있다면 괄호 안에 넣은 속성 값으로 수정합니다.

```js
document.querySelector("#prod-img > img").setAttribute("src", "images/coffee-blue.jpg")
```

## 8-4. DOM에서 이벤트 처리하기

### 이벤트 처리 방법 복습하기

#### HTML 태그 안에서 이벤트 처리기 연결하기

이벤트가 발생하는 HTML 태그 안에 직접 이벤트 처리기를 추가하는 방법입니다. 예를 들어 img 태그에 onclick을 사용하여 이미지를 클릭했을 때 이벤트를 실행하는 방법입니다.

```js
<img onclick="changePic()"> // 사전에 만들어둔 함수
```

이 방법은 HTML에 자바스크립트 소스를 섞은 형태이기 때문에 이벤트를 바꾼다거나 연결 함수를 바꾸기 위해서는 HTML 소스를 수정해야 합니다. 또한 하나의 요소에 하나의 이벤트 처리기만 사용할 수 있습니다.

#### DOM 요소에 이벤트 처리기 연결하기

이벤트 처리기를 자바스크립트 소스에서 실행합니다. 이미지 요소를 가져와 pic 변수에 저장한 후 click 이벤트가 발생했을 때 changePic() 함수를 실행합니다.  

```js
var pic = document.querySelector('#pic');
pic.onclick = changePic; // pic 요소를 클릭하면 changePic() 함수 실행
```

DOM 요소에 이벤트 처리기를 연결하는 방법은 HTML 태그와 뒤섞이지 않고 자바스크립트 소스를 사용한다는 점에서는 좋지만, 역시 하나의 요소에 하나의 이벤트 처리기만 사용할 수 있습니다.

#### addEventListener() 함수로 여러 이벤트를 한 번에 처리하기

한 요소에 여러 이벤트가 발생했을 때 이를 동시에 처리하기 위해서 DOM의 addEventListener() 함수를 사용하면 됩니다.

```js
var pic = document.querySelector('#pic');
pic.addEventListener("mouseover", changePic, false);

function changePic() {			
    pic.src = "images/boy.png";
}
function originPic() {
    pic.src = "images/girl.png";
}
```

addEventListener()의 **첫 번째 인수**는 **처리할 이벤트 유형**을 지정합니다. **두 번째 인수**는 이벤트가 발생했을 때 **실행할 명령**을 나열합니다. **세 번째 인수**는 **이벤트를 캡처링하는지 여부**를 지정하는데 생략할 수 있습니다. true면 캡처링, false이면 버블링한다는 의미힌데, 기본값은 false입니다. 이벤트 캡처링은 **DOM의 부모 노드에서 자식 노드로 이벤트가 전달되는 것**이고, 이벤트 버블링은 **DOM의 자식 노드에서 부모 노드로 이벤트가 전달되는 것**입니다.

pic 변수에 addEventListener() 함수를 추가하여 마우스가 벗어나면 다시 원래 이미지로 되돌아가는 이벤트를 수행할 수 있습니다. 두 이벤트가 한 요소에서 처리되는 것입니다.

```js
var pic = document.querySelector('#pic');
pic.addEventListener("mouseover", changePic, false);
pic.addEventListener("mouseout", originPic, false);
document.addEventListener("click", function() {alert('안녕하세요?')}, false);

function changePic() {			
    pic.src = "images/boy.png";
}
function originPic() {
    pic.src = "images/girl.png";
}
```

## 8-5. 웹 요소의 스타일 가져와서 수정하기

### DOM으로 CSS 속성에 접근하고 수정하기

자바스크립트로 특정 웹 요소에 접근하는 방법으로 CSS 속성에 접근할 수 있고 수정도 가능합니다.

#### 텍스트 색상 바꾸기

제목 텍스트의 id 가 heading일 때 웹 요소의 스타일 속성에 접근할 때는 요소 다음에 .style 예약어를 쓰고 그 다음에 CSS 속성을 적습니다.

```js
document.getElementById('heading').style.color = 'red';
```

background-color나 border-radius처럼 가운데 하이픈(-)이 포함된 속성은 **backgroundColor**나 **borderRadius**처럼 두 단어를 합치고 두 번째 단어의 첫 글자를 대문자로 쓰는 낙타 표기법으로 입력합니다.

```js
document.querySelector('#heading').style.backgroundColor = 'gray';
```

#### 웹 요소를 화면에 표시하기/감추기

웹 문서에서 무엇인가 화면에 표시하거나 감추려면 CSS 속성 중 **display 속성**이나 **visibility 속성**을 사용합니다.

* **display: none**을 사용해서 웹 요소를 화면에서 감추면 **그 요소가 차지하던 공간도 사라지지만**, **visibility: hidden**을 사용해서 웹 요소를 감추면 **요소가 있던 공간은 빈 상태로 남아 있게 된다**는 점이 큰 차이입니다.

## 8-6. DOM에 요소 추가하기

### DOM에 새로운 노드를 추가하는 방법

* 모든 HTML 태그는 '요소(Element) 노드'로 표현합니다.
* HTML 태그에서 사용하는 텍스트 내용은 '텍스트(Text) 노드'로 표현합니다.
* HTML 태그에 있는 속성은 모두 '속성(Attribute) 노드'로 표현합니다.
* 주석은 '주석(Comment) 노드'로 표현합니다.

웹 문서에 있는 요소는 단순히 태그만 있는 게 아니라 태그 속성과 내용을 함께 사용합니다. 그래서 `<h1>`이나 `<p>` 태그를 추가하고 싶다면 태그에 해당하는 요소 노드뿐만 아니라 태그 안에 있는 텍스트 내용과 속성도 노드로 추가해야 합니다.  

현재 문서의 DOM 트리에 새로운 노드를 추가하려면 **웹 문서에 어떤 소스를 추가할지 먼저 생각해야 합니다**. 그러고 나서 그 소스에 따라 요소 노드나 텍스트 노드, 속성 노드 등을 만들고 연결합니다. 예를 들어 웹 문서에 텍스트를 추가한다고 가정해 보겠습니다.

```js
<p class="accent">주문이 완료되었습니다.</p>
```

이 소스를 DOM 트리에 추가하려면 p 요소 노드와 "accent" 속성 값을 넣을 class 속성 노드, '주문이 완료되었습니다.'라는 텍스트를 넣을 텍스트 노드가 필요합니다. 그리고 이렇게 만든 노드를 부모 노드에 연결해서 웹 문서에 추가합니다.  

새로운 노드를 만들거나 부모 노드에 연결할 때는 다음 함수를 사용합니다.

* createElement(): 새 요소 노드를 만듭니다.
* createTextNode(): 텍스트 내용이 있을 경우 텍스트 노드를 만듭니다.
* appendChild(): 텍스트 노드를 요소 노드에 자식 노드로 추가합니다.
* createAttribute(): 요소에 속성이 있을 경우 속성 노드를 만듭니다.
* setAttributeNode(): 속성 노드를 요소 노드에 연결합니다.
* appendChild(): 새로 만든 요소 노드를 부모 노드에 추가합니다.

### 웹 문서에 새로운 노드 추가하기

body 태그에 아무 소스도 없는 문서에 텍스트 단락을 추가하겠습니다. `<p>` 태그와 class 속성, 그리고 '주문이 완료되었습니다.'라는 내용을 추가해보겠습니다.

```js
<p class="accent">주문이 완료되었습니다.</p>
```

#### 요소 노드 만들기 - createElement() 함수

DOM에 새로운 요소를 추가할 때 가장 먼저 할 일은 요소 노드를 만드는 것입니다. 새로운 요소 노드를 만드는 함수는 createElement() 인데, 괄호 안의 요소에 해당하는 요소 노드를 적습니다. 콘솔 창에서 다음 소스를 입력해 새로운 p 요소를 만들고 newP 변수에 저장합니다.

```js
var newP = document.createElement("p");
```

#### 텍스트 노드 만들기 - createTextNode() 함수

새 요소 노드를 만든 후에는 요소에서 표시할 내용(주문이 완료되었습니다.)을 텍스트 노드로 만듭니다. 텍스트 노드를 만드는 함수는 createTextNode()이고 괄호 안에 내용을 입력합니다. 콘솔 창에 다음 소스를 입력해 텍스트 노드를 만들어 newText 변수에 저장합니다.

```js
var newText = document.createTextNode("주문이 완료되었습니다.");
```

#### 자식 노드로 추가하기 - appendChild() 함수

앞에서 새로운 `<p>` 노드와 거기에 사용할 텍스트 노드를 만들었습니다. 아직까지는 노드가 만들어지기만 하고 서로 부모 노드와 자식 노드로 연결되지 않은 상태입니다. appendChild() 함수는 텍스트 노드를 요소 노드의 자식 노드로 연결하거나 요소 노드를 다른 요소 노드의 자식 노드로 연결할 때 사용하는 함수입니다. 이 함수로 텍스트 노드 newText를 newP 노드의 자식 노드로 축가하는 소스를 콘솔 창에 작성합니다.

```js
newP.appendChild(newText)
```

새로 만든 `<p>` 태그 소스는 웹 문서의 `<body>` 태그 안에 추가해야 하므로 newP노드를 body 노드의 자식 노드로 추가합니다.

```js
document.body.appendChild(newP)
```

#### 속성 노드 만들기 - createAttribute() 함수

콘솔 창에서 추가한 `<p>` 태그에 class="accent" 속성을 추가해 보겠습니다. 새로운 속성 노드를 만들 때는 createAttribute() 함수를 사용하여 함수의 괄호 안에 추가할 속성 이름을 지정합니다. 여기에서는 새로운 class 속성 노드를 만들어 변수 attr에 저장합니다. 그리고 attr.value를 사용해 attr 속성 값을 "accent"로 지정합니다.

```js
var attr = document.createAttribute("class");
attr.value = "accent";
"accent"
```

#### 속성 노드 연결하기 - setAttributeNode() 함수

속성 노드를 만들었으면 앞에서 선언해 놓은 p 노드에 연결해야 합니다. 속성 노드를 요소 노드에 연결할 때는 setAttributeNode() 함수를 사용합니다.

```js
newP.setAttributeNode(attr);
null
```

혹은 `setAttribute("class", "accent")`로 사용할 수도 있습니다.

## 8-7. 추가한 노드 순서 바꾸거나 삭제하기

### DOM 트리를 활용해 원하는 노드 다루기

DOM 트리는 여러 노드가 부모 노드와 자식 노드 혹은 형제 노드라는 관계를 유지하며 구성되어 있습니다. 이제부터 이 관계를 사용해 원하는 노드에 접근하는 것부터 내용을 수정·삭제하는 방법까지 알아보겠습니다.

#### 자식 노드 확인하기 - hasChildNodes() 함수

hasChildNodes() 함수는 특정 노드에 자식 노드가 있는지 확인하는 함수입니다. 자식 노드가 있다면 true를, 그렇지 않다면 false를 반환합니다.

```js
document.querySelectorAll('p')[0].hasChildNodes()
true
```

#### 자식 노드에 접근하기 - childNodes 속성

자식 노드가 있다면 childNodes 속성을 사용해서 현재 노드의 자식 노등 접근할 수 있습니다. 이때 요소 노드 뿐만 아니라 태그와 태그 사이의 줄바꿈도 빈 텍스트 노드인 자식 노드로 인식합니다.

```js
<div id="nameList">
    <p>홍길동 <span class="del">X</span></p>
    <p>백두산 <span class="del">X</span></p>
    <p>도레미 <span class="del">X</span></p>
</div>
```

위와 같은 소스가 있다고 할 때 다음과 같이 자식노드를 확인한다.

```js
document.querySelector("#nameList").childNodes
▶ NodeList(7) [text, p, text, p, text, p, text]
```

빈 텍스트 노드도 자식 노드로 인식하기에 총 7개의 노드가 있습니다.

**요소에만 접근하려면 children 속성을 사용합니다.**

#### 원하는 위치에 노드 삽입하기 - insertBefore() 함수

자식 노드를 추가하는 appendChild() 함수는 부모 노드에 자식 노드가 있을 경우 마지막 노드로 추가됩니다. 하지만 insertBefore() 함수를 사용하면 부모 노드에 자식 노드를 추가할 때 기준이 되는 노드를 지정하고 그 앞에 자식 노드를 추가할 수 있습니다.  

insertBefore() 함수를 사용해서 이름 순서를 바꿔봅니다. 먼저 부모 노드를 저장합니다.

```js
var nameList = document.querySelector("#nameList")
```

콘솔창에서 insertBefore() 함수를 사용해 다음과 같이 입력합니다. insertBefore() 함수에서는 2개의 인수를 사용하는데, **첫 번째 인수는 추가하는 노드, 두 번째 인수는 기준이 되는 노드**입니다. 다음 소스에서 기준이 되는 노드는 nameList의 첫 번째 자식 노드이고, 삽입할 노드는 nameList의 세 번째 자식 노드입니다. 즉, 세 번째 자식 노드를 첫 번째 자식 노드 앞에 추가하는 것입니다.

```js
nameList.insertBefore(nameList.children[2], nameList.children[0])
```

#### 특정 노드 삭제하기 - removeChild() 함수와 parentNode 속성

DOM 트리에 있는 노드를 삭제할 때는 removeChild() 함수를 사용합니다. 함수 이름에서 알 수 있듯이 부모 노드에서 자식 노드를 삭제하는 함수이고, 괄호 안에는 삭제하려는 자식 노드가 들어갑니다.  

노드는 스스로 자신을 삭제할 수 없기 때문에 부모 노드에 접근한 후 부모 노드에서 삭제해야 합니다. **특정 노드를 삭제하기 위해선 부모 노드를 먼저 찾아야 하는데, 부모 노드 정보를 가지고 있는 속성이 parentNode 속성입니다. parentNode 속성은 현재 노드의 부모 요소 노드를 반환합니다.

```js
var firstDel = document.querySelectorAll('.del')[0] // 첫 번째 X
var firstP = document.querySelectorAll('p')[0] // 첫 번째 p 요소
firstP.removeChild(firstDel) // 첫 번째 p 요소에 있는 첫 번째 X 삭제
<span class=​"del">​X​</span>​
```