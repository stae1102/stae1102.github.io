---
layout: post
title: "백준: 2503 숫자야구"
excerpt: "Python, brute_force"
date: 2022-03-17 14:40:00 +0900
categories:
  - Baekjoon
tags:
  - brute_force
---

# 문제

정보문화진흥원 정보 영재 동아리에서 동아리 활동을 하던 영수와 민혁이는 쉬는 시간을 틈타 숫자야구 게임을 하기로 했다.

* 영수는 1에서 9까지의 서로 다른 숫자 세 개로 구성된 세 자리 수를 마음속으로 생각한다. (예: 324)
* 민혁이는 1에서 9까지의 서로 다른 숫자 세 개로 구성된 세 자리 수를 영수에게 묻는다. (예: 123)
* 민혁이가 말한 세 자리 수에 있는 숫자들 중 하나가 영수의 세 자리 수의 동일한 자리에 위치하면 스트라이크 한 번으로 센다. 숫자가 영수의 세 자리 수에 있긴 하나 다른 자리에 위치하면 볼 한 번으로 센다.

예) 영수가 324를 갖고 있으면 

* 429는 1 스트라이크 1 볼이다.
* 241은 0 스트라이크 2 볼이다.
* 924는 2 스트라이크 0 볼이다.
* 영수는 민혁이가 말한 수가 몇 스트라이크 몇 볼인지를 답해준다.
* 민혁이가 영수의 세 자리 수를 정확하게 맞추어 3 스트라이크가 되면 게임이 끝난다. 아니라면 민혁이는 새로운 수를 생각해 다시 영수에게 묻는다.

현재 민혁이와 영수는 게임을 하고 있는 도중에 있다. 민혁이가 영수에게 어떤 수들을 물어보았는지, 그리고 각각의 물음에 영수가 어떤 대답을 했는지가 입력으로 주어진다. 이 입력을 바탕으로 여러분은 영수가 생각하고 있을 가능성이 있는 수가 총 몇 개인지를 알아맞혀야 한다.

아래와 같은 경우를 생각해보자.  

* 민혁: 123
* 영수: 1 스트라이크 1 볼.
* 민혁: 356
* 영수: 1 스트라이크 0 볼.
* 민혁: 327
* 영수: 2 스트라이크 0 볼.
* 민혁: 489
* 영수: 0 스트라이크 1 볼.
* 이때 가능한 답은 324와 328, 이렇게 두 가지이다.

영수는 동아리의 규율을 잘 따르는 착한 아이라 민혁이의 물음에 곧이곧대로 정직하게 답한다. 그러므로 영수의 답들에는 모순이 없다.

민혁이의 물음들과 각각의 물음에 대한 영수의 답이 입력으로 주어질 때 영수가 생각하고 있을 가능성이 있는 답의 총 개수를 출력하는 프로그램을 작성하시오.

# 입력

첫째 줄에는 민혁이가 영수에게 몇 번이나 질문을 했는지를 나타내는 1 이상 100 이하의 자연수 N이 주어진다. 이어지는 N개의 줄에는 각 줄마다 민혁이가 질문한 세 자리 수와 영수가 답한 스트라이크 개수를 나타내는 정수와 볼의 개수를 나타내는 정수, 이렇게 총 세 개의 정수가 빈칸을 사이에 두고 주어진다.

# 출력

첫 줄에 영수가 생각하고 있을 가능성이 있는 답의 총 개수를 출력한다.

# 문제 풀이

## A. 아이디어

완전탐색, 브루트포스를 해결하는 방법은 세 가지가 있다.

* 순열
* 백트래킹
* BFS

큰 갈래로 저렇게 세 가지 카테고리에서 브루트포스 문제를 풀이하더라. 이번 문제는 백트래킹인가 순열인가 고민이 되었는데 수가 중복되지 않고 여러 개 등장하고 아직 백트래킹이 명확하게 머리에 안 들어와서 순열로 풀었다.

민혁의 추측과 영수의 대답으로 그 조건을 일치하는 수들만 남겨놓고 나머지는 제외하는 식으로 문제를 풀어나간다.

**조건을 충족하는 것을 추가해 나가는 것도 있겠지만, 충족하지 않는 것을 제외해 나가는 것도 하나의 방법임을 알았다.**

특히 이 문제는 서서히 답을 좁혀가는 문제라서 더욱이 불충족을 제거해 나가는 것이 문제의 핵심이다.

예를 들어 2 스트라이크라고 하면, 123부터 987까지 2스트라이크에 맞는 조건은 제쳐두고 나머지는 다 떨어뜨리는 것이다. 그렇게 하면 문제의 예처럼 32X 숫자, 3X7숫자, X27숫자만 남고 나머지는 다 삭제된다.

## B. 코드 분석

### 전체 코드

```python
import sys
input = sys.stdin.readline

n = int(input())
ans = [True] * 1001
cnt = 0
for i in range(n):
    num, s, b = map(int, input().split())
    num = str(num)
    for j in range(123, 988):
        j = str(j)
        if ('0' in j) or (j[0] == j[1] or j[1] == j[2] or j[2] == j[0]):
            ans[int(j)] = False
            continue
        s_cnt, b_cnt = 0, 0
        for x in range(3):
            for y in range(3):
                if j[x] == num[y]:
                    if x == y:
                        s_cnt += 1
                    else:
                        b_cnt += 1

        if ans[int(j)] and s_cnt == s and b_cnt == b:
            ans[int(j)] = True
        else:
            ans[int(j)] = False

for i in range(123, 988):
    if ans[i]:
        cnt += 1
print(cnt)
```

### B-1. 준비

```python
import sys
input = sys.stdin.readline

n = int(input())
ans = [True] * 1001
cnt = 0
for i in range(n):
    num, s, b = map(int, input().split())
    num = str(num)
```

ans로 충족하는 수를 True로 표현하기로 정했다. cnt는 가능한 숫자들을 카운트하는 변수이다.

본격적으로 for문으로 명령들을 읽는다. 그리고, num과 숫자를 비교하기 위해 str() 함수를 사용했다.

### B-2. 풀이

```python
    for j in range(123, 988):
        j = str(j)
        if ('0' in j) or (j[0] == j[1] or j[1] == j[2] or j[2] == j[0]):
            ans[int(j)] = False
            continue
        s_cnt, b_cnt = 0, 0
        for x in range(3):
            for y in range(3):
                if j[x] == num[y]:
                    if x == y:
                        s_cnt += 1
                    else:
                        b_cnt += 1

        if ans[int(j)] and s_cnt == s and b_cnt == b:
            ans[int(j)] = True
        else:
            ans[int(j)] = False
```

123부터 987까지 반복하고, 0이 숫자 안에 있거나 중복되는 수가 있다면 거짓으로 설정하고 continue한다.

그후, strike와 ball을 카운트하는 변수를 초기화한다.

이제 각 수들을 돌며 겹치는 수가 있을 때, 자리까지 겹친다면 스트라이크를, 그렇지 않다면 볼을 카운트한다. 문제에서 주어진 스트라이크와 볼의 개수가 같다면 그 수는 true로 저장한다.

### B-3. 출력

```python
for i in range(123, 988):
    if ans[i]:
        cnt += 1
print(cnt)
```

전체를 다시 돌며 cnt를 출력한다.

## C. 좋은 풀이

> 출처: https://www.acmicpc.net/source/12927250  
> 백준 kkh44711님 풀이

```python
import sys
input = sys.stdin.readline

N = int(input())

def strike_ball(x,y):
    x = str(x)
    y = str(y)
    s=0
    b=0
    for i in range(3):
        if x[i] == y[i]:
            s +=1
        elif x[i] in y:
            b +=1
    return s,b
def dup(x):
    x = str(x)
    if(x[0] == x[1]):
        return True
    elif(x[0] == x[2]):
        return True
    elif(x[1] == x[2]):
        return True
    return False

old = []
for i in range(100,1000):
    if(dup(i) or '0' in str(i)):
        continue
    old.append(i)

new = []

for h in range(N):
    com = list(map(int,input().split()))
    num = com[0]
    strike = com[1]
    ball =com[2]

    for number in old:
        if(strike_ball(num,number) == (strike,ball)):
            new.append(number)
    old = new
    new = []

print(len(old))
```

### C-1. 준비

```python
import sys
input = sys.stdin.readline

N = int(input())

def strike_ball(x,y):
    x = str(x)
    y = str(y)
    s=0
    b=0
    for i in range(3):
        if x[i] == y[i]:
            s +=1
        elif x[i] in y:
            b +=1
    return s,b
def dup(x):
    x = str(x)
    if(x[0] == x[1]):
        return True
    elif(x[0] == x[2]):
        return True
    elif(x[1] == x[2]):
        return True
    return False

old = []
for i in range(100,1000):
    if(dup(i) or '0' in str(i)):
        continue
    old.append(i)

new = []
```
사전에 스트라이크와 볼을 세는 함수를 만들었다. 이때 for문은 3번만 돌도록 하였고, 두 수의 자리와 수가 같다면 스트라이크를, 자리는 같지 않지만 숫자에 포함이 된다면 볼을 카운트했다. 리턴 값은 스트라이크와 볼이다.

이처럼 **최대한 for문의 반복을 줄이는 것**이 좋은 아이디어였다.

중복을 체크하는 함수도 따로 만들어서 조금 더 깔끔하게 코드를 볼 수 있었다.

그 이후, 가능한 숫자들을 담는 old 리스트 변수에 가능한 숫자들을 전부 저장한다. new 변수는 조건을 충족하는 것들을 다시 담는 리스트 변수이다.

### C-2. 풀이

```python
for h in range(N):
    com = list(map(int,input().split()))
    num = com[0]
    strike = com[1]
    ball =com[2]

    for number in old:
        if(strike_ball(num,number) == (strike,ball)):
            new.append(number)
    old = new
    new = []
```

풀이 부분이 상당히 압축적으로 간단하다. old에 담긴 수들에 대해서 순회한다. 만약 조건을 충족한다면 new 변수에 append 해주고, old에 그 수들을 저장한 다음 다시 new를 초기화한다.

이렇게 하면 `for number in old`의 반복을 계속해서 줄여나갈 수 있다는 장점이 있다.

### C-3. 제출

```python
print(len(old))
```

제출 또한 심플하다. 또, 이렇게 풀이하는 장점 중 하나는 만족하는 수가 무엇인지도 알 수 있다는 점이다.

# 총평

완전탐색이 감이 잘 잡히지 않았었는데 이 문제를 통해 꽤 많은 것을 배웠다. 단어가 있을 것 같은데 불충족을 점점 제거해 나가는 식으로 풀이하는 것이다. 미켈란젤로는 피에타 상을 만들 때, 이미 성모가 대리석 안에 있고 자신은 필요 없는 부스러기를 제거했다는 이야기가 있다(~~나는 무교임~~). **때로는 덜어냄으로써 문제를 풀 수 있다.**

![2503](https://user-images.githubusercontent.com/83271772/158748075-6b7704c7-c51d-47ce-8d8b-a2984fe2ee2c.PNG)