---
layout: post
title:  "04 Mar TIL: SQL 프로그래밍"
excerpt: "SQL Programming"
date:   2022-03-04 17:27:00 +0900
categories: 
  - Study
tags:
  - TIL
---

## 4-3. SQL 프로그래밍

스토어드 프로시저는 MySQL에서 프로그래밍 기능이 필요할 때 사용하는 데이터베이스 개체입니다.

```sql
DELIMITER $$
CREATE PROCEDURE 스토어드_프로시저_이름()
BEGIN
  SQL 프로그래밍 코딩
END $$ -- 스토어드 프로시저 종료
DELIMITER ; -- 종료 문자를 다시 세미콜론으로 변경
CALL 스토어드_프로시저_이름() -- 스토어드 프로시저 실행
```
### 4-3-1. IF문

#### IF문의 기본 형식

```sql
IF <조건식> THEN
  SQL 문장들
END IF;
```

'SQL 문장들'이 한 문장이라면 그 문장만 써도 되지만, 두 문장 이상이 처리되어야 할 때는 `BEGIN~END`로 묶어줘야 합니다.

```sql
DROP PROCEDURE IF EXISTS ifProc1;
DELIMITER $$
CREATE PROCEDURE ifProc1()
BEGIN
	IF 100 = 100 THEN
		SELECT '100은 100과 같습니다.';	
	END IF;
END $$
DELIMITER ;
CALL ifProc1;
```

#### IF ~ ELSE 문

참일 때와 더불어 거짓일 때 실행할 SQL문을 입력합니다.

```sql
DROP PROCEDURE IF EXISTS ifProc2;
DELIMITER $$
CREATE PROCEDURE ifProc2()
BEGIN
	DECLARE myNum INT;
    SET myNum = 200;
    IF myNum = 100 THEN
		SELECT '100입니다.';
	ELSE
		SELECT '100이 아닙니다.';
	END IF;
END $$
DELIMITER ;
CALL ifProc2;
```

#### IF 문의 활용

```sql
DROP PROCEDURE IF EXISTS ifProc3;
DELIMITER $$
CREATE PROCEDURE ifProc3()
BEGIN
	DECLARE debutDate DATE; -- 데뷔일자
    DECLARE curDate DATE; -- 오늘
    DECLARE days INT; -- 활동한 일수
    SELECT debut_date INTO debutDate
		FROM market_db.member
        WHERE mem_id = 'APN';
	
    SET curDate = CURRENT_DATE(); -- 현재 날짜
    SET days = DATEDIFF(curDate, debutDate); -- 날짜의 차이, 일 단위
    
    IF (days/365) >= 5 THEN -- 5년이 지낫다면
		SELECT CONCAT('데뷔한 지 ', days, '일이나 지났습니다. 핑순이들 축하합니다!');
	ELSE
		SELECT '데뷔한 지 ' + days + '일밖에 안되었네요. 핑순이들 화이팅~';
	END IF;
END $$
DELIMITER ;
CALL ifProc3 ;
```

SELECT INTO 변수는 결과를 변수에 저장합니다. CURRENT_DATE() 함수로 현재 날짜를 curDate에 저장합니다. DATEDIFF() 함수로 데뷔 일자부터 현재 날짜까지 일수를 days에 저장했습니다.(CURRENT_TIMESTAMP()는 오늘 날짜 및 시간을 함께 알려줍니다.)

### 4-3-2. CASE 문

여러 조건 중에서 선택하는 경우 CASE 문을 사용합니다.

#### CASE 문의 기본 형식

CASE 문은 2가지 이상의 여러 가지 경우일 때 처리가 가능하므로 '다중 분기'라고 부릅니다.

```sql
CASE
  WHEN 조건1 THEN
    SQL 문장들1
  WHEN 조건2 THEN
    SQL 문장들2
  WHEN 조건3 THEN
    SQL 문장들3
  ELSE
    SQL 문장들4
END CASE;
```
모든 조건에 해당하지 않으면 ELSE를 실행합니다. 학점을 나누는 경우를 예로 들어보겠습니다.

```sql
DROP PROCEDURE IF EXISTS caseProc;
DELIMITER $$
CREATE PROCEDURE caseProc()
BEGIN
	DECLARE point INT ;
    DECLARE credit CHAR(1);
    SET point = 88;
    
    CASE
		WHEN point >= 90 THEN
			SET credit = 'A';
		WHEN point >= 80 THEN
			SET credit = 'B';
		WHEN point >= 70 THEN
			SET credit = 'C';
		WHEN point >= 60 THEN
			SET credit = 'D';
		ELSE
			SET credit = 'F';
	END CASE;
    SELECT CONCAT('취득점수==>', point), CONCAT('학점==>', credit);
END $$
DELIMITER ;
CALL caseProc();
```

#### CASE 문의 활용

CASE 문의 활용입니다. 총 구매액이 1500 이상인 경우 최우수 고객, 1000 ~ 1499일 경우 우수 고객, 1 ~ 999는 일반 고객, 0 이하는 유령 고객으로 세그먼트를 만들겠습니다.

```sql
SELECT mem_id, SUM(price*amount) "총 구매액"
	FROM buy
    GROUP BY mem_id;
```
추가적으로 구매액으로 내림차순 정렬합니다.
```sql
SELECT mem_id, SUM(price*amount) "총 구매액"
	FROM buy
    GROUP BY mem_id
    ORDER BY SUM(price*amount) DESC;
```
회원의 이름을 출력하기 위해 구매 테이블과 조인합니다.
```sql
SELECT B.mem_id, M.mem_name, SUM(price*amount) "총 구매액"
	FROM buy B
		INNER JOIN member M
        ON B.mem_id = M.mem_id
    GROUP BY B.mem_id
    ORDER BY SUM(price*amount) DESC;
```
구매하지 않은 회원의 아이디와 이름도 출력해보겠습니다.
```sql
SELECT M.mem_id, M.mem_name, SUM(price*amount) "총 구매액"
	FROM buy B
		RIGHT OUTER JOIN member M
        ON B.mem_id = M.mem_id
    GROUP BY M.mem_id
    ORDER BY SUM(price*amount) DESC;
```
이제 CASE문을 활용해 회원등급을 지정합니다.
```sql
SELECT M.mem_id, M.mem_name, SUM(price*amount) "총 구매액",
		CASE
			WHEN (SUM(price*amount) >= 1500) THEN '최우수고객'
            WHEN (SUM(price*amount) >= 1000) THEN '우수고객'
            WHEN (SUM(price*amount) >= 1) THEN '일반고객'
            ELSE '유령고객'
		END "회원등급"
	FROM buy B
		RIGHT OUTER JOIN member M
        ON B.mem_id = M.mem_id
    GROUP BY M.mem_id
    ORDER BY SUM(price*amount) DESC;
```
### 4-3-3. WHILE 문

WHILE문은 필요한 만큼 계속 같은 내용을 반복할 수 있습니다.

#### WHILE 문의 기본 형식

```sql
DROP PROCEDURE IF EXISTS whileProc;
DELIMITER $$
CREATE PROCEDURE whileProc()
BEGIN
	DECLARE i INT; -- 1에서 100까지 증가할 변수
    DECLARE hap INT; -- 더한 값을 누적할 변수
    SET i = 1;
    SET hap = 0;
    
    WHILE (i <= 100) DO
		SET hap = hap + i; -- hap의 원래 값에 i를 더해서 다시 hap에 넣으라는 의미
        SET i = i + 1;     -- i의 원래 값에 1을 더해서 다시 i에 넣으라는 의미
	END WHILE;
	
    SELECT '1부터 100까지의 합==>', hap;
END $$
DELIMITER ;
CALL whileProc();
```

#### WHILE 문의 응용

1에서 100까지의 합계에서 4의 배수를 제외시키려면 어껗게 해야 할까요? 추가로 숫자를 더하는 중간에 합계가 1,000이 넘는 순간의 숫자를 출력한 후 프로그램을 종료하고 싶다면 어떻게 해야 할까요? 이런 경우에 **ITERATE**문과 **LEAVE**문을 활용할 수 있습니다.

* ITERATE[레이블]: 지정한 레이블로 가서 계속 진행합니다.
* LEAVE[레이블]: 지정한 레이블을 빠져나갑니다. 즉 WHILE 문이 종료됩니다.

```sql
DROP PROCEDURE IF EXISTS whileProc2;
DELIMITER $$
CREATE PROCEDURE whileProc2()
BEGIN
	DECLARE i INT; -- 1에서 100까지 증가할 변수
    DECLARE hap INT; -- 더한 값을 누적할 변수
    SET i = 1;
    SET hap = 0;
    
    myWhile: -- 레이블 지정
    WHILE (i <= 100) DO
		IF(i%4 = 0) THEN
			SET i = i + 1;
            ITERATE myWhile; -- 지정한 label 문으로 가서 계속 진행
		END IF;
        SET hap = hap + i;
        IF (hap > 1000) THEN
			LEAVE myWhile; -- 지정한 label 문을 떠남. 즉 While 종료
		END IF;
        SET i = i + 1;
	END WHILE;
    
    SELECT '1부터 100까지의 합(4의 배수 제외), 1000 넘으면 종료 ==>', hap;
END $$
DELIMITER ;
CALL whileProc2();
```
WHILE 문을 myWhile이라는 레이블로 지정했습니다. i가 4의 배수라면 i를 1증가시키고 ITERATE를 만나서 `myWhile:`로 올라갑니다. 즉, WHILE 문을 계속 진행합니다. hap이 1000을 초과하면 myWhile 레이블을 빠져나갑니다.

### 4-3-4. 동적 SQL

SQL 문은 내용이 고정되어 있는 경우가 대부분입니다. 하지만 상황에 따라 내용 변경이 필요할 때 동적 SQL을 사용하면 변경되는 내용을 실시간으로 적용시켜 사용할 수 있습니다.

#### PREPARE와 EXECUTE
**PREPARE**는 SQL 문을 실행하지는 않고 미리 준비해놓고, **EXECUTE**는 준비한 SQL 문을 실행합니다. 그리고 실행 후에는 **DEALLOCATE PREPARE**로 문장을 해제해주는 것이 바람직합니다.

```sql
USE market_db;
PREPARE myQuery FROM 'SELECT * FROM member WHERE mem_id = "BLK"';
EXECUTE myQuery;
DEALLOCATE PREPARE myQuery;
```
PREPARE 문에서는 `SELECT * FROM member WHERE mem_id = "BLK"`를 바로 실행하지 않고 myQuery에 입력만 시켜놓습니다. 실행이 필요한 시점에서 `EXECUTE myQuery`문으로 실행합니다

이렇게 미리 SQL을 준비한 후에 나중에 실행할 것을 동적 SQL이라고 부릅니다.

#### 동적 SQL의 활용

PREPARE 문에서는 ?로 향후에 입력될 값을 비워 놓고, EXECUTE에서 USING으로 ?에 값을 전달할 수 있습니다.

```sql
DROP TABLE IF EXISTS gate_table;
CREATE TABLE gate_table (
	id INT AUTO_INCREMENT PRIMARY KEY,
    entry_time DATETIME);

SET @curDate = CURRENT_TIMESTAMP(); -- 현재 날짜와 시간

PREPARE myQuery FROM 'INSERT INTO gate_table VALUES(NULL, ?)';
EXECUTE myQuery USING @curDate;
DEALLOCATE PREPARE myQuery;

SELECT * FROM gate_table;
```

일반 SQL에서 변수는 @변수명으로 지정하는데 별도의 선언은 없어도 됩니다. 스토어드 프로시저에서 변수는 DECLARE로 선언한 후에 사용해야 합니다.

---

- [3.1 REPL 사용하기](#31-repl-사용하기)
- [3.2 JS 파일 실행하기](#32-js-파일-실행하기)
- [3.3 모듈로 만들기](#33-모듈로-만들기)
- [3.4 노드 내장 객체 알아보기](#34-노드-내장-객체-알아보기)
  - [3.4.1 global](#341-global)
  - [3.4.2 console](#342-console)
  - [3.4.3 타이머](#343-타이머)
  - [3.4.4 __filename, __dirname](#344-__filename-__dirname)
  - [3.4.5 module, exports, require](#345-module-exports-require)
  - [3.4.6 process](#346-process)
    - [3.4.6.1 `process.env`](#3461-processenv)
    - [3.4.6.2 process.nextTick(콜백)](#3462-processnexttick콜백)
    - [3.4.6.3 process.exit(코드)](#3463-processexit코드)
- [3.5 노드 내장 모듈 사용하기](#35-노드-내장-모듈-사용하기)
  - [3.5.1 os](#351-os)
  - [3.5.2 path](#352-path)
  - [3.5.3 url](#353-url)

# 3.1 REPL 사용하기

노드도 자바스크립트의 브라우저 콘솔과 같은 콘솔을 제공하는데, 입력한 코드를 **읽고(Read)**, **해석하고(Eval)**, **결과물을 반환하고(Print)**, **종료할 때까지 반복한다(Loop)**고 해서 **REPL(Read Eval Print Loop)** 이라고 부릅니다.

콘솔창에 node를 입력하면 노드의 REPL를 사용할 수 있습니다.

```
$ node
>
```

프롬프트가 > 로 바뀌었다면 자바스크립트 코드를 입력할 수 있습니다.

```
> const str = 'Hello world, hello node';
undefined
> console.log(str);
Hello world, hello node
undefined
>
```

REPL을 종료하려면 ctrl+c를 두 번 누르거나 REPL 창에 .exit을 입력하면 됩니다.

REPL은 한두 줄짜리 코드를 테스트해보는 용도로는 좋지만 여러 줄의 코드를 실행하기에는 불편합니다. 긴 코드인 경우에는 코드를 자바스크립트 파일로 만든 후 파일을 통째로 실행하는 것이 좋습니다.

# 3.2 JS 파일 실행하기

```js
function helloWorld() {
    console.log('Hello World');
    helloNode();
}

function helloNode() {
    console.log('Hello Node');
}

helloWorld();
```

콘솔에서 node [자바스크립트 파일 경로]로 실행합니다. 확장자(.js)는 생략해도 됩니다. REPL에서 입력하는 것이 아니므로 주의하세요. REPL이 아니라 콘솔에서 입력해야 합니다. 콘솔에서 REPL로 들어가는 명령어가 node고, 노드를 통해 파일을 실행하는 명령어는 node [자바스크립트 파일 경로]입니다.

```
$ node helloWorld
Hello World
Hello Node
```

# 3.3 모듈로 만들기

노드는 코드를 모듈로 만들 수 있다는 점에서 브라우저의 자바스크립트와 다릅니다. **모듈**이란 특정한 기능을 하는 함수나 변수들의 집합입니다. 모듈은 자체로도 하나의 프로그램이면서 다른 프로그램의 부품으로도 사용할 수 있습니다.

**모듈로 만들어두면 여러 프로그램에 해당 모듈을 재사용할 수 있습니다.** 자바스크립트에서 코드를 재사용하기 위해 함수로 만드는 것과 비슷합니다.

**보통 파일 하나가 모듈이 됩니다.**

모듈을 만들 때는 모듈이 될 파일과 모듈을 불러와서 사용할 파일이 필요합니다. var.js와 func.js, index.js를 같은 폴더에서 만들어봅니다.

```js
const odd = '홀수입니다';
const even = '짝수입니다';

module.exports = {
    odd,
    even
}
```
var.js에 변수 두 개를 선언하고 module.exports에 변수들을 담은 객체를 대입했습니다. 이제 모듈로서 기능합니다. 다른 파일에서 해당 모듈을 불러오면 module.exports에 대입된 값을 사용할 수 있습니다.

```js
const { odd, even } = require('./var');

function checkOddOrEven(num) {
    if (num % 2) {  // 홀수면
        return odd;
    }
    return even;
}

module.exports = checkOddOrEven;
```

**require** 함수 안에 불러올 모듈의 경로를 적습니다. 파일 경로에서 js나 json 같은 확장자는 생략 가능합니다.

var.js에서 변수를 불러온 뒤, 숫자의 홀짝을 판별하는 함수를 선언했습니다. 그리고 다시 module.exports에 함수를 대입했습니다. 그런데 module.exports에는 객체뿐만 아니라 함수나 변수 등을 대입할 수도 있습니다.

```js
const { odd, even } = require('./var');
const checkNumber = require('./func');

function checkStringOddOrEven(str) {
    if (str.length % 2) { // 홀수면
        return odd;
    }
    return even
}

console.log(checkNumber(10));
console.log(checkStringOddOrEven('hello'));
```

index.js는 var.js와 func.js를 모두 참조합니다. 모듈로부터 값을 불러올 때 변수 이름을 다르게 지정할 수도 있습니다.

```
$ node index
짝수입니다
홀수입니다
```

여러 파일에 걸쳐 재사용되는 함수나 변수를 모듈로 만들어두면 편리하지만, 모듈이 많아지고 모듈 간의 관계가 얽히게 되면 구조를 파악하기 어렵습니다. 노드에서는 대부분의 파일이 다른 파일을 모듈로 사용하고 있으므로 모듈을 만들고 사용하는 방법을 꼭 알아두어야 합니다.

방금 살펴본 require 함수나 module 객체는 노드에서 기본적으로 제공하는 내장 객체이기 때문에 바로 사용이 가능했습니다.

# 3.4 노드 내장 객체 알아보기

노드는 기본적인 내장 객체와 내장 모듈을 제공합니다.

## 3.4.1 global

브라우저의 window와 같은 전역 객체입니다. window처럼 global도 생략할 수 있습니다. require 함수도 원래는 global.require이며, console객체도 global.console입니다.

전역 객체라는 점을 이용하여 파일 간에 간단한 데이터를 공유할 때 사용하기도 합니다. globalA.js와 globalB.js를 만들어 봅시다.

```js
module.exports = () => global.message;
```
```js
const A = require('./globalA');

global.message = '안녕하세요';
console.log(A());
```
globalA 모듈의 함수는 global.message 값을 반환하며, globalB.js는 global 객체에 속성명이 message인 값을 대입하고 globalA 모듈의 함수를 호출합니다. 콘솔 결과는 globalB에서 넣은 global.message 값을 globalA에서도 접근할 수 있음을 보여줍니다.

```
$ node globalB
안녕하세요
```

## 3.4.2 console

console 객체도 window 대신 global 객체 안에 들어있습니다. **주로 디버깅을 위해 사용합니다.** 개발하면서 변수에 값이 제대로 들어 있는지 확인하기 위해 사용하고, 에러 발생 시 에러 내용을 콘솔에 표시하기 위해 사용하며, 코드 실행 시간을 알아보려고 할 때도 사용합니다.

```js
const string = 'abc';
const number = 1;
const boolean = true;
const obj = {
    outside: {
        inside: {
            key: 'value',
        },
    },
};
console.time('전체 시간');
console.log('평범한 로그입니다 쉼표로 구분해 여러 값을 찍을 수 있습니다.');
console.log(string, number, boolean);
console.error('에러 메시지는 console.error에 담아주세요');

console.table([{ name: '제로', birth: 1994 }, { name: 'hero', birth: 1988 }]);

console.dir(obj, { colors: false, depth: 2 });
console.dir(obj, { colors: true, depth: 1 });

console.time('시간 측정');
for (let i = 0; i < 100000; i++) {}
console.timeEnd('시간 측정');

function b() {
    console.trace('에러 위치 추적');
}
function a() {
    b();
}
a();

console.timeEnd('전체 시간');
```
* console.time(레이블): console.timeEnd(레이블)고 대응되어 같은 레이블을 가진 time과 timeEnd 사이의 시간을 측정합니다.
* console.log(내용): 평범한 로그를 콘솔에 표시합니다. console(내용, 내용, ...)처럼 여러 내용을 동시에 표시할 수도 있습니다(값 사이에 띄어쓰기되어 출력됨).
* console.error(에러 내용): 에러를 콘솔에 표시합니다.
* console.table(배열): 배열의 요소로 객체 리터럴을 넣으면, 객체의 속성들이 테이블 형식으로 표현됩니다.
* console.dir(객체, 옵션): 객체를 콘솔에 표시할 때 사용합니다. 옵션의 colors를 true로 하면 콘솔에 색이 추가되어 가독성이 좋습니다. depth는 객체 안의 객체를 몇 단계까지 보여줄지를 결정합니다. 기본 값은 2입니다.
* console.trace(레이블): 에러가 어디서 발생했는지 추적할 수 있게 합니다. 위치를 알려주므로 자주 사용하지는 않습니다.

```
$ node console
평범한 로그입니다 쉼표로 구분해 여러 값을 찍을 수 있습니다.
abc 1 true
에러 메시지는 console.error에 담아주세요
┌─────────┬────────┬───────┐
│ (index) │  name  │ birth │
├─────────┼────────┼───────┤
│    0    │ '제로' │ 1994  │
│    1    │ 'hero' │ 1988  │
└─────────┴────────┴───────┘
{ outside: { inside: { key: 'value' } } }
{ outside: { inside: [Object] } }
시간 측정: 1.703ms
Trace: 에러 위치 추적
    at b (C:\Users\stae1\workspace\NodeJS\ch3\console.js:26:13)
    at a (C:\Users\stae1\workspace\NodeJS\ch3\console.js:29:5)
    at Object.<anonymous> (C:\Users\stae1\workspace\NodeJS\ch3\console.js:31:1)
전체 시간: 14.787ms
```

## 3.4.3 타이머

setTimeout, setInterval, setImmediate는 노드에서 window 대신 global 객체 안에 들어 있습니다.

* setTimeout(콜백 함수, 밀리초): 주어진 밀리초(1,000분의 1초) 이후에 콜백 함수를 실행합니다.
* setInterval(콜백 함수, 밀리초): 주어진 밀리초마다 콜백 함수를 반복 실행합니다.
* setImmediate(콜백 함수): 콜백 함수를 즉시 실행합니다.

이 타이머 함수들은 모두 **아이디를 반환**합니다. 아이디를 사용하여 타이머를 취소할 수 있습니다.

* clearTimeout(아이디): setTimeout을 취소합니다.
* clearInterval(아이디): setInterval을 취소합니다.
* clearImmediate(아이디): setImmediate를 취소합니다.

```js
const timeout = setTimeout(() => {
    console.log('1.5초 후 실행');
}, 1500);

const interval = setInterval(() => {
    console.log('1초마다 실행');
}, 1000);

const timeout2 = setTimeout(() => {
    console.log('실행되지 않습니다');
}, 3000);

setTimeout(() => {
    clearTimeout(timeout2);
    clearInterval(interval);
}, 2500);

const immediate = setImmediate(() => {
    console.log('즉시 실행');
});

const immediate2 = setImmediate(() => {
    console.log('실행되지 않습니다');
});

clearImmediate(immediate2);
```

제일 먼저 실행되는 것은 immediate이며, immediate2는 clearImmediate로 인해 바로 취소됩니다. 그 이후 interval이 실행되고. timeout이 실행된 후에 interval이 다시 실행되고 2.5초가 지났기 때문에 timeout2와 interval이 취소됩니다.

```
$ node timer
즉시 실행
1초마다 실행
1.5초후 실행
1초마다 실행
```

## 3.4.4 __filename, __dirname

노드에서는 파일 사이에 모듈 관계가 있는 경우가 많으므로 때로는 현재 파일의 경로나 피일명을 알아야 합니다. 노드는 __filename, __dirname이라는 키워드로 경로에 대한 정보를 제공합니다. 파일에 __filename과 __dirname을 넣어두면 실행 시 현재 파일명과 현재 파일 경로로 바뀝니다.

```js
console.log(__filename);
console.log(__dirname);
```
```
$ node filename
C:\Users\stae1\workspace\NodeJS\ch3\filename.js
C:\Users\stae1\workspace\NodeJS\ch3
```

윈도가 아니라면 \ 대신 /로 폴더 경로가 구분될 수 있습니다. 이렇게 얻은 정보를 사용해서 경로 처리를 할 수도 있습니다. 하지만 경로가 문자열로 반환되기도 하고, \나 /같은 구분자 문제도 있으므로 보통은 이를 해결해주는 **path 모듈과 함께 씁니다.**

## 3.4.5 module, exports, require

모듈을 만들 때 module.exports만 사용했는데, module 객체 말고 exports 객체로도 모듈을 만들 수 있습니다.

```js
exports.odd = '홀수입니다';
exports.even = '짝수입니다';
```
```
$ node index
짝수입니다
홀수입니다
```
module.exports로 한 번에 대입하는 대신, **각각의 변수를 exports 객체에 하나씩 넣었습니다.** 동일하게 동작하는 이유는 *module.exports와 exports가 같은 객체를 참조하기 때문입니다.* (`console.log(module.exports === exports)`의 출력은 true) 따라서 exports 객체에 add 함수를 넣으면 module.exports에도 add 함수가 들어갑니다.

> exports 객체를 사용할 때 module.exports와의 참조 관계가 깨지지 않도록 주의해야 합니다. exports에는 반드시 객체처럼 속성명과 속성값을 대입해야 합니다. exports에 다른 값을 대입하면 객체의 참조 관계가 끊겨 더 이상 모듈로 기능하지 않습니다.  
> exports를 사용할 때는 **객체**만 사용할 수 있으므로 func.js와 같이 함수를 대입한 경우에는 exports로 바꿀 수 없습니다.  
> exports와 module.exports에는 참조 관계가 있으므로 한 모듈에 exports 객체와 module.exports를 동시에 사용하지 않는 것이 좋습니다.

* 노드에서의 this

```js
console.log(this);
console.log(this === module.exports);
console.log(this === exports);

function whatIsThis() {
    console.log('function', this === exports, this === global);
}
whatIsThis();
```
```
$ node this
{}
true
true
function false true
```

최상위 스코프에 존재하는 this는 module.exports(또는 exports 객체)를 가리킵니다. 또한, 함수 선언문 내부의 this는 global 객체를 가리킵니다.

require는 함수이고, 함수는 객체이므로 require는 객체로서 몇 가지 속성을 갖고 있습니다. 그중에서 require.cache와 require.main에 대해서 알아보겠습니다.

```js
console.log('require가 가장 위에 오지 않아도 됩니다.');

module.exports = '저를 찾아보세요.';

require('./var');

console.log('require.cache입니다.');
console.log(require.cache);
console.log('require.main입니다.');
console.log(require.main === module);
console.log(require.main.filename);
```
```
$ node require
require가 가장 위에 오지 않아도 됩니다.
require.cache입니다.
[Object: null prototype] {
  'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\require.js': Module {
    id: '.',
    path: 'C:\\Users\\stae1\\workspace\\NodeJS\\ch3',
    exports: '저를 찾아보세요.',
    filename: 'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\require.js',
    loaded: false,
    children: [ [Module] ],
    paths: [
      'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\node_modules',
      'C:\\Users\\stae1\\workspace\\NodeJS\\node_modules',
      'C:\\Users\\stae1\\workspace\\node_modules',
      'C:\\Users\\stae1\\node_modules',
      'C:\\Users\\node_modules',
      'C:\\node_modules'
    ]
  },
  'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\var.js': Module {
    id: 'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\var.js',
    path: 'C:\\Users\\stae1\\workspace\\NodeJS\\ch3',
    exports: { odd: '홀수입니다', even: '짝수입니다' },
    filename: 'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\var.js',
    loaded: true,
    children: [],
    paths: [
      'C:\\Users\\stae1\\workspace\\NodeJS\\ch3\\node_modules',
      'C:\\Users\\stae1\\workspace\\NodeJS\\node_modules',
      'C:\\Users\\stae1\\workspace\\node_modules',
      'C:\\Users\\stae1\\node_modules',
      'C:\\Users\\node_modules',
      'C:\\node_modules'
    ]
  }
}
require.main입니다.
true
C:\Users\stae1\workspace\NodeJS\ch3\require.js
```

require가 반드시 파일 최상단에 위치할 필요가 없고, module.exports도 최하단에 위치할 필요가 없습니다.

require.cache 객체에 require.js나 var.js 같은 파일 이름이 속성명으로 들어있는데, 속성값으로는 **각 파일의 모듈 객체**가 들어 있습니다. 한 번 require한 파일은 require.cache에 저장되므로 다음 번에 require할 때는 새로 불러오지 않고 require.cache에 있는 것이 재사용됩니다.

**만약 새로 require하길 원한다면, require.cache의 속성을 제거하면 됩니다.** 다만, 프로그램의 동작이 꼬일 수 있으니 권장하지 않습니다. 

require은 노드 실행 시 첫 모듈을 가리킵니다. 현재 node require로 실행했으므로 require.js가 require.main이 됩니다. require.main 객체의 모양은 require.cache의 모듈 객체와 같습니다. 현재 파일이 첫 모듈인지 알아보려면 `require.main === module`을 해보면 됩니다. node require로 실행한 경우, var.js에서 `require.main === module`을 실행하면 false가 반환될 것입니다. 첫 모듈의 이름을 알아보려면 `require.main.filename`으로 확인하면 됩니다.

만약 두 모듈 dep1과 dep2가 있고 이 둘이 서로를 require한다면 어떻게 될까요?

```js
const dep2 = require('./dep2');
console.log('require dep2', dep2);
module.exports = () => {
    console.log('dep2', dep2);
};
```
```js
const dep1 = require('./dep1');
console.log('require dep1', dep1);
module.exports = () => {
    console.log('dep1', dep1);
};
```
```js
const dep1 = require('./dep1');
const dep2 = require('./dep2');
dep1();
dep2();
```
코드가 위에서부터 실행되므로 require('./dep1')이 먼저 실행됩니다. dep1.js에서는 제일 먼저 require('./dep2')가 실행되는데, dep2.js에서는 require('./dep1')이 실행됩니다. 

```
$ node dep-run
require dep1 {}
require dep2 [Function (anonymous)]
dep2 [Function (anonymous)]
dep1 {}
(node:16600) Warning: Accessing non-existent property 'Symbol(nodejs.util.inspect.custom)' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
(node:16600) Warning: Accessing non-existent property 'constructor' of module exports inside circular dependency
(node:16600) Warning: Accessing non-existent property 'Symbol(Symbol.toStringTag)' of module exports inside circular dependency
(node:16600) Warning: Accessing non-existent property 'Symbol(Symbol.iterator)' of module exports inside circular dependency
(node:16600) Warning: Accessing non-existent property 'Symbol(nodejs.util.inspect.custom)' of module exports inside circular dependency
(node:16600) Warning: Accessing non-existent property 'constructor' of module exports inside circular dependency
(node:16600) Warning: Accessing non-existent property 'Symbol(Symbol.toStringTag)' of module exports inside circular dependency
(node:16600) Warning: Accessing non-existent property 'Symbol(Symbol.iterator)' of module exports inside circular dependency
```
dep1의 module.exports가 함수가 아니라 빈 객체로 표시됩니다. 이러한 현상을 **순환 참조(circular dependency)** 라고 부릅니다. 이렇게 순환 참조가 있을 경우에는 순환 참조되는 대상을 빈 객체로 만듭니다. 이때 에러가 발생하지 않고 조용히 빈 객체로 변경되므로 예기치 못한 동작이 발생할 수 있습니다. 따라서 순환 참조가 발생하지 않도록 구조를 잘 잡는 것이 중요합니다.

## 3.4.6 process

process 객체는 **현재 실행되고 있는 노드 프로세스에 대한 정보**를 담고 있습니다. process 객체 안에는 다양한 속성이 있는데, 하나씩 REPL에 따라 입력해봅시다.

```
> process.version
'v16.14.0' // 설치된 노드의 버전입니다.
> process.arch
'x64' // 프로세스 아키텍처 정보입니다.
> process.platform
'win32' // 운영체제 플랫폼 정보입니다
> process.pid
18996 // 현재 프로세스 아이디입니다. 프로세스를 여러 개 가질 때 구분할 수 있습니다.
> process.uptime()
41.8934884 // 프로세스가 시작된 후 흐른 시간입니다. 단위는 초입니다.
> process.execPath
'C:\\Program Files\\nodejs\\node.exe' // 노드의 경로입니다.
> process.cwd()
'C:\\Users\\stae1\\workspace\\NodeJS' // 현재 프로세스가 실행되는 위치입니다.
> process.cpuUsage()
{ user: 406000, system: 281000 } // 현재 cpu 사용량입니다.
```

### 3.4.6.1 `process.env`

REPL에 precess.env를 입력하면 매우 많은 정보가 출력됩니다. 자세히 보면 이 정보들이 시스템의 환경 변수임을 알 수 있습니다. 시스템 환경 변수는 노드에 직접 영향을 미치기도 합니다. 대표적인 것으로 **UV_THREADPOOL_SIZE**와 **NODE_OPTIONS**가 있습니다.

```
NODE_OPTIONS=--max-old-space-size=8192
UV_THREADPOOL_SIZE=8
```
NODE_OPTIONS: 노드를 실행할 때 옵션들을 입력받는 환경 변수(--max-old-space-size=8192 => 노드의 메모리를 8GB까지 사용)  
UV_THREADPOOL_SIZE: 노드에서 기본적으로 사용하는 스레드풀의 스레드 개수를 조절

process.env는 서비스의 중요한 키를 저장하는 공간으로도 사용되기 때문에 서버나 데이터베이스의 비밀번호와 각종 API 키를 코드에 입력하는 것은 위험
```js
const secretId = process.env.SECRET_ID;
const secretCode = process.env.SECRET_CODE;
```
중요한 데이터는 다음과 같이 속성으로 대체

### 3.4.6.2 process.nextTick(콜백)

이벤트 루프가 다른 콜백 함수들보다 nextTick의 콜백 함수를 우선으로 처리하도록 함

```js
setImmediate(() => {
    console.log('immediate');
});
process.nextTick(() => {
    console.log('nextTick');
});
setTimeout(() => {
    console.log('timeout');
}, 0);
Promise.resolve().then(() => console.log('promise'));
```
```
$ node nextTick
nextTick
promise
timeout
immediate
```
process.nextTick은 setImmediate와 setTimeout보다 먼저 실행. 코드 맨 밑에 Promise를 넣은 것은 resolve된 Promise도 nextTick처럼 다른 콜백보다 우선시되기 때문.

**process.nextTick과 Promise를 *마이크로 태스크(microtask)* 라고 따로 구분지어 부름**

![마이크로태스크](microtask.png)(직접 제작)

> 이벤트 루프에서 대기하는 콜백 함수보다 먼저 실행되기 때문에 setImmediate보다 process.nextTick을 더 선호하는 개발자도 있는데, 마이크로태스크를 재귀 호출하게 되면 이벤트 루프는 다른 콜백 함수보다 마이크로태크스를 우선하여 처리하므로 콜백 함수들이 실행되지 않을 수도 있음.

### 3.4.6.3 process.exit(코드)

실행중인 노드 프로세스를 종료한다. 서버 환경에서 사용하면 서버가 멈추기에 서버에서 잘 사용하지 않는다. 서버 외 독립적인 프로그램에서는 수동으로 노드를 멈추기 위해 사용한다.

```js
let i = 1;
setInterval(() => {
    if (i === 5) {
        console.log('종료!');
        process.exit();
    }
    console.log(i);
    i += 1;
}, 1000);
```
```
$ node exit
1
2
3
4
종료!
```

process.exit 메서드는 인수로 코드번호를 줄 수 있다. 인수를 주지 않거나 0을 입력하면 정상 종료, 1을 입력하면 비정상 종료를 뜻한다. 에러가 발생해서 종료하는 경우에는 1을 넣으면 된다.

# 3.5 노드 내장 모듈 사용하기

## 3.5.1 os

노드는 os 모듈에 운영체제의 정보를 담고 있어 정보를 가져올 수 있다.

```js
const os = require('os');

console.log('운영체제 정보------------------------------');
console.log('os.arch():', os.arch());
console.log('os.platform():', os.platform());
console.log('os.type():', os.type());
console.log('os.uptime():', os.uptime());
console.log('os.hostname():', os.hostname());
console.log('os.release():', os.release());

console.log('경로---------------------------------------');
console.log('os.homedir():', os.homedir());
console.log('os.tmpdir():', os.tmpdir());

console.log('cpu 정보-----------------------------------');
console.log('os.cpus():', os.cpus());
console.log('os.cpus().length', os.cpus().length);

console.log('메모리 정보--------------------------------');
console.log('os.freemem():', os.freemem());
console.log('os.totalmem():', os.totalmem());
```
```
운영체제 정보------------------------------
os.arch(): x64
os.platform(): win32
os.type(): Windows_NT
os.uptime(): 352272
os.hostname(): DESKTOP-A8S2FSG
os.release(): 10.0.19044
경로---------------------------------------
os.homedir(): C:\Users\stae1
os.tmpdir(): C:\Users\stae1\AppData\Local\Temp
cpu 정보-----------------------------------
os.cpus(): [
  {
    model: 'AMD Ryzen 7 4700U with Radeon Graphics         ',
    speed: 1996,
    times: {
    // 생략
]
os.cpus().length 8
메모리 정보--------------------------------
os.freemem(): 8574967808
os.totalmem(): 16505954304
```
* os.arch(): process.arch와 동일
* os.platform: process.platform과 동일
* os.type(): 운영체제의 종류를 보여줌
* os.uptime(): 운영체제 부팅 이후 흐른 시간(초)를 보여줌. process.uptime()은 노드의 실행시간
* os.hostname(): 컴퓨터의 이름을 보여줌
* os.release(): 운영체제의 버전을 보여줌
* os.homedir(): 홈 디렉터리 경로를 보여줌
* os.tmpdir(): 임시 파일 저장 경로를 보여줌
* os.cpus(): 컴퓨터의 코어 정보를 보여줌
* os.freemem(): 사용 가능한 메모리(RAM)를 보여줌
* os.totalmem(): 전체 메모리 용량을 보여줌

## 3.5.2 path

폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈. path 모듈은 운영체제별로 경로 구분자가 다르기 떄문에 필요하다. 크게 윈도 타입과 POSIX 타입으로 구분된다. POSIX는 유닉스 기반의 운영체제들을 의미하며 맥과 리눅스가 속한다.
* 윈도: C:\Users\stae1처럼 \로 구분
* POSIX: /home/stae1처럼 /로 구분

```js
const path = require('path');

const string = __filename;

console.log('path.sep:', path.sep);
console.log('path.delimiter:', path.delimiter);
console.log('------------------------------');
console.log('path.dirname():', path.dirname(string));
console.log('path.extname():', path.extname(string));
console.log('path.basename():', path.basename(string));
console.log('path.basename - extname:', path.basename(string, path.extname(string)));
console.log('------------------------------');
console.log('path.parse():', path.parse(string));
console.log('path.format():', path.format({
    dir: 'C:\\users\\stae1',
    name: 'path',
    ext: '.js',
}));
console.log('path.normalize():', path.normalize('C://users\\\\stae1\\\path.js'));
console.log('------------------------------');
console.log('path.isAbsolute(C:\\):', path.isAbsolute('C:\\'));
console.log('path.isAbsolute(./home):', path.isAbsolute('./home'));
console.log('------------------------------');
console.log('path.relative():', path.relative('C:\\users\\stae1\\path.js', 'C:\\'));
console.log('path.join():', path.join(__dirname, '..', '..', '../users', '.', '/stae1'));
console.log('path.resolve():', path.resolve(__dirname, '..', 'users', '.', '/stae1'));
```
```
path.sep: \
path.delimiter: ;
------------------------------
path.dirname(): C:\Users\stae1\workspace\NodeJS\ch3
path.extname(): .js
path.basename(): path.js
path.basename - extname: path
------------------------------
path.parse(): {
  root: 'C:\\',
  dir: 'C:\\Users\\stae1\\workspace\\NodeJS\\ch3',
  base: 'path.js',
  ext: '.js',
  name: 'path'
}
path.format(): C:\users\stae1\path.js
path.normalize(): C:\users\stae1\path.js
------------------------------
path.isAbsolute(C:\): true
path.isAbsolute(./home): false
------------------------------
path.relative(): ..\..\..
path.join(): C:\Users\stae1\users\stae1
path.resolve(): C:\stae1
```
* path.sep: 경로의 구분자. 윈도는 \, POSIX는 /
* path.delimiter: 환경 변수의 구부자. process.env.PATH를 입력하면 여러 개의 경로가 구분자로 구분. 윈도는 세미콜론(;), POSIX는 콜론(:)
* path.dirname(경로): 파일이 위치한 폴더 경로를 보여줌
* path.dirname(경로): 파일의 확장자를 보여줌
* path.basename(경로, 확장자): 파일의 이름(확장자 포함)을 표시. 파일의 이름만 표시하고 싶다면 basename의 두 번째 인수로 파일의 확장자를 넣는다.
* path.parse(경로): 파일 경로를 root, dir, base, ext, name으로 분리
* path.format(객체): path.parse()한 객체를 파일 경로로 합칩니다.
* path.normalize(경로): /나 \를 실수로 여러 번 사용했거나 혼용했을 때 정상적인 경로로 변환
* path.isAbsolute(경로): 파일의 경로가 절대 경로인지 상대경로인지를 true나 false로 알림
* path.relative(기준경로, 비교경로): 경로를 두 개 넣으면 첫 번째 경로에서 두 번째 경로로 가는 방법을 알려줌
* path.join(경로, ···): 여러 인수를 넣으면 하나의 경로로 합침. 상대경로인 ..(부모 디렉터리)과 .(현 위치)도 알아서 처리
* path.resolve(경로): /를 만나면 path.resolve는 절대 경로로 인식해서 앞의 경로를 무시하고, path.join은 상대경로로 처리한다.
  
```js
path.join('/a', '/b', '/c'); /* 결과: /a/b/c/ */
path.resolve('/a', '/b', 'c'); /* 결과: /b/c */
```

기본적으로 경로는 \ 하나를 사용해서 표시하는데, 자바스크립트 문자열에서는 \가 특수 문자이므로 \를 두 개 붙여 경로를 표시해야 한다. path 모듈은 위와 같은 경우에 발생하는 문제를 알아서 처리하므로, 윈도에서 path 모듈이 꼭 필요하다.

* 상대경로와 절대경로

절대 경로는 루트 폴더(윈도 C:\ 혹은 POSIX의 /)나 노드 프로세스가 실행되는 위치가 기준이 되며, 상대 경로는 현재 파일이 기준이 된다.

윈도에서 POSIX 스타일 경로를 사용하거나 혹은 그 반대상황이 생길 때는 윈도에서는 `path.posix.sep`이나 `path.posix.join()`과 같이 사용하면 되고, POSIX에서는 `path.win32.sep`이나 `path.win32.join()`과 같이 사용하면 된다.

노드는 require.main 파일을 기준으로 상대 경로를 인식한다. 이때, require.main과는 다른 디렉터리의 파일이 상대 경로를 갖고 있다면 예상과 다르게 동작할 수 있다. **이 문제는 path 모듈을 통해 해결할 수 있다.**

## 3.5.3 url

인터넷 주소를 쉽게 조작하도록 도와주는 모듈.

<url 처리 방식>
* WHATWG(웹 표준을 정하는 단체의 이름) 방식의 url
* 예전부터 노드에서 사용하던 방식의 url

```js
const url = require('url');

const { URL } = url;
const myURL = new URL('http://www.gilbut.co.kr/book/bookList.aspx?sercate1=001001000#anchor');
console.log('new URL():', myURL);
console.log('url.format():', url.format(myURL));
console.log('-------------------------------');
const parsedUrl = url.parse('http://www.gilbut.co.kr/book/bookList.aspx?sercate1=001001000#anchor')
console.log('url.parse():', parsedUrl);
console.log('url.format():', url.format(parsedUrl));
```
url 모듈 안에 URL 생성자가 있고 이 생성자에 주소를 넣어 객체로 만들면 부분별로 정리가 완료된다. 이 방식이 **WAHTWG의 url**이다. WHATWG에만 있는 username, password, origin, searchParams 속성이 존재

```
$ node url
new URL(): URL {
  href: 'http://www.gilbut.co.kr/book/bookList.aspx?sercate1=001001000#anchor',
  origin: 'http://www.gilbut.co.kr',
  protocol: 'http:',
  username: '',
  password: '',
  host: 'www.gilbut.co.kr',
  hostname: 'www.gilbut.co.kr',
  port: '',
  pathname: '/book/bookList.aspx',
  search: '?sercate1=001001000',
  searchParams: URLSearchParams { 'sercate1' => '001001000' },
  hash: '#anchor'
}
url.format(): http://www.gilbut.co.kr/book/bookList.aspx?sercate1=001001000#anchor
-------------------------------
url.parse(): Url {
  protocol: 'http:',
  slashes: true,
  auth: null,
  host: 'www.gilbut.co.kr',
  port: null,
  hostname: 'www.gilbut.co.kr',
  hash: '#anchor',
  search: '?sercate1=001001000',
  query: 'sercate1=001001000',
  pathname: '/book/bookList.aspx',
  path: '/book/bookList.aspx?sercate1=001001000',
  href: 'http://www.gilbut.co.kr/book/bookList.aspx?sercate1=001001000#anchor'
}
url.format(): http://www.gilbut.co.kr/book/bookList.aspx?sercate1=001001000#anchor
```

기존 노드 방식에서는 두 메서드를 주로 사용한다.
* url.parse(주소): 주소를 분해한다. WHATWG 방식과 비교하면 username과 password 대신 auth 속성이 있고, searchParams 대신 query가 있다.

host 부분 없이 pathname 부분만 오는 주소인 경우(예시: /book/bookList.apsx)에는 WHATWG 방식이 처리할 수 없다.

WHATWG 방식은 search 부분을 searchParams 라는 특수한 객체로 반환하므로 유용하다. search 부분은 보통 주소를 통해 데이터를 전달할 때 사용된다. search는 물음표(?)로 시작하고, 그 뒤에 키=값 형식으로 데이터를 전달한다. 여러 키가 있을 경우에는 &로 구분

http://www.gilbut.co.kr/?page=3&limit=10&category=nodejs&category=javascript 와 같은 주소에서는 ?page=3&limit=10&category=nodejs&category=javascript 부분이 search이다.

```js
const { URL } = require('url');

const myURL = new URL('http://www.gilbut.co.kr/?page=3&limit=10&category=nodejs&category=javascript');
console.log('searchParams:', myURL.searchParams);
console.log('searchParams.getAll():', myURL.searchParams.getAll('category'));
console.log('searchParams.get():', myURL.searchParams.get('limit'));
console.log('searchParams.has():', myURL.searchParams.has('page'));

console.log('searchParams.keys():', myURL.searchParams.keys());
console.log('searchParams.values():', myURL.searchParams.values());

myURL.searchParams.append('filter', 'es3');
myURL.searchParams.append('filter', 'es5');
console.log(myURL.searchParams.getAll('filter'));

myURL.searchParams.set('filter', 'es6');
console.log(myURL.searchParams.getAll('filter'));

myURL.searchParams.delete('filter');
console.log(myURL.searchParams.getAll('filter'));

console.log('searchParams.toString():', myURL.searchParams.toString());
myURL.search = myURL.searchParams.toString();
```
```
searchParams: URLSearchParams {
  'page' => '3',
  'limit' => '10',
  'category' => 'nodejs',
  'category' => 'javascript' }
searchParams.getAll(): [ 'nodejs', 'javascript' ]
searchParams.get(): 10
searchParams.has(): true
searchParams.keys(): URLSearchParams Iterator { 'page', 'limit', 'category', 'category' }
searchParams.values(): URLSearchParams Iterator { '3', '10', 'nodejs', 'javascript' }
[ 'es3', 'es5' ]
[ 'es6' ]
[]
searchParams.toString(): page=3&limit=10&category=nodejs&category=javascript
```

myURL 안에는 searchParams 객체가 있고 search 부분을 조작하는 다양한 메서드를 지원.

* getAll(키): 키에 해당하는 모든 값을 가져옴
* get(키): 키에 해당하는 첫 번째 값만 가져옴
* has(키): 해당 키의 유무를 검사하여 불리언으로 반환
* keys(): searchParams의 모든 키를 반복기(iterator) 객체로 가져옴
* values(): searchParams의 모든 값을 반복기 객체로 가져옴
* append(키, 값): 해당 키를 추가
* set(키, 값): 같은 키의 값들을 모두 지우고 새로 추가
* delete(키): 해당 키를 삭제
* toString(): 조작한 searchParams 객체를 다시 문자열로 변환

query는 querystring 모듈을 한 번 더 사용해야 하기 때문에 searchParams가 유용하다.