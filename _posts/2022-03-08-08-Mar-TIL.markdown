---
layout: post
title: "08 Mar TIL: NodeJS 패키지 명령어, 배포, 익스프레스 미들웨어, 라우터"
excerpt: "nodejs package commands, express middleware, router"
date: 2022-03-08 11:25:00 +0900
categories:
  - Study
tags:
  - TIL
---

- [5.3 패키지 버전 이해하기](#53-패키지-버전-이해하기)
- [5.4 기타 npm 명령어](#54-기타-npm-명령어)
- [5.5 패키지 배포하기](#55-패키지-배포하기)
- [6.1 익스프레스 프로젝트 시작하기](#61-익스프레스-프로젝트-시작하기)
- [6.2 자주 사용하는 미들웨어](#62-자주-사용하는-미들웨어)
  - [6.2.1 morgan](#621-morgan)
  - [6.2.2 static](#622-static)
  - [6.2.3 body-parser](#623-body-parser)
    - [요청 데이터 종류](#요청-데이터-종류)
  - [6.2.4 cookie-parser](#624-cookie-parser)
  - [6.2.5 express-session](#625-express-session)
  - [6.2.6 미들웨어의 특성 활용하기](#626-미들웨어의-특성-활용하기)
    - [미들웨어 안에 미들웨어를 넣는 방식](#미들웨어-안에-미들웨어를-넣는-방식)
  - [6.2.7 multer](#627-multer)
    - [여러 파일을 업로드하는 경우](#여러-파일을-업로드하는-경우)
    - [input 태그나 폼 데이터의 키가 다른 경우](#input-태그나-폼-데이터의-키가-다른-경우)
    - [파일을 업로드하지 않고 멀티파트로 업로드하는 경우](#파일을-업로드하지-않고-멀티파트로-업로드하는-경우)
- [6.3 Router 객체로 라우팅 분리하기](#63-router-객체로-라우팅-분리하기)
  - [next 함수로 다음 라우터로 넘어가기](#next-함수로-다음-라우터로-넘어가기)
  - [패턴사용-라우트 매개변수](#패턴사용-라우트-매개변수)
  - [에러 처리](#에러-처리)
  - [라우터 활용](#라우터-활용)
- [6.4 req, res 객체 살펴보기](#64-req-res-객체-살펴보기)
  - [req 객체](#req-객체)
  - [res 객체](#res-객체)
- [6.5 템플릿 엔진 사용하기](#65-템플릿-엔진-사용하기)
  - [6.5.1 퍼그(제이드)](#651-퍼그제이드)
    - [6.5.1.1 HTML 표현](#6511-html-표현)
  - [5-3. 가상의 테이블: 뷰](#5-3-가상의-테이블-뷰)
    - [5-3-1. 뷰의 개념](#5-3-1-뷰의-개념)
      - [뷰의 기본 개념](#뷰의-기본-개념)
      - [뷰의 작동](#뷰의-작동)
      - [뷰를 사용하는 이유](#뷰를-사용하는-이유)
    - [5-3-2. 뷰의 실제 작동](#5-3-2-뷰의-실제-작동)
      - [뷰의 실제 생성, 수정, 삭제](#뷰의-실제-생성-수정-삭제)
      - [뷰의 정보 확인](#뷰의-정보-확인)
      - [뷰를 통한 데이터의 수정/삭제](#뷰를-통한-데이터의-수정삭제)
      - [뷰를 통한 데이터의 입력](#뷰를-통한-데이터의-입력)
      - [뷰가 참조하는 테이블의 삭제](#뷰가-참조하는-테이블의-삭제)

# 5.3 패키지 버전 이해하기

노드의 버전은 항상 세 자리로 이루어져 있다. SemVar(Semantic Versioning, 유의적 버전) 방식의 버전 넘버링을 따르기 때문이다.

* 첫 번째 자리: major 버전. major 버전이 0이면 초기 개발 중이라는 뜻이다. 1부터 정식 버전을 의미한다. major 버전은 하위 호환이 안 될 정도로 패키지의 내용이 수정되었을 때 올린다.

* 두 번째 자리: minor 버전. 하위 호환이 되는 기능 업데이트를 할 때 올린다. 1.5.0에서 1.6.0으로 업데이트했을 때 아무 문제가 없어야 한다.

* 세 번째 자리: patch 버전. 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 올린다.

새 버전을 배포한 후에는 그 버전의 내용을 절대 수정하면 안 된다. 수정 사항이 생기면 세 자리의 버전 중 하나를 맞게 올려서 새로운 버전으로 배포해야 한다.

package.json에는 SemVar식 세 자리 버전 외에도 버전 앞에 ^이나 ~ 또는 >, < 같은 문자가 붙어 있는데, 이 문자는 버전에는 포함되지 않지만 설치하거나 업데이트할 때 어떤 버전을 설치해야 하는지 알려준다.

* ^ 기호: minor 버전까지만 설치하거나 업데이트 한다. `npm i express@^1.1.1`이라면 1.1.1 이상부터 2.0.0 미만 버전까지 설치된다. 1.x.x와 같이 표현할 수도 있다.

* ~ 기호: patch 버전까지만 설치하거나 업데이트 한다. `npm i express@~1.1.1`이라면 1.1.1 이상부터 1.2.0 미만 버전까지 설치된다. 1.1.x와 같은 표현도 가능하다.

* \>, <, > =, < =, =기호: 초과, 미만 이상, 이하, 동일을 뜻한다. `npm i express@>1.1.1`이라면 반드시 1.1.1 버전보다 높은 버전이 설치된다.

* @latest: 가장  최신 버전의 패키지를 설치. x로도 표현할 수 있다. `npm i express@latest` or `npm i express@x`

* @next: 가장 최근의 배포판을 설치할 수 있다. 안정되지 않은 알파나 베타 버전의 패키지를 설치할 수 있다는 것이다.

# 5.4 기타 npm 명령어

* npm outdated: 업데이트할 수 있는 패키지가 있는지 확인한다. Current와 Wanted가 다르다면 업데이트가 필요한 경우이다. `npm update [패키지명]`으로 업데이트할 수 있다. 그냥 `npm update`를 하면 업데이트 가능한 모든 패키지가 Wanted에 적힌 버전으로 업데이트된다. Latest는 해당 패키지의 최신 버전이지만 **package.json에 적힌 버전 범위와 다르다면 설치되지 않는다.**

* `npm uninstall [패키지명]`: 해당 패키지를 제거하는 명령어. 패키지가 node_modules폴더와 package.json에서 사라진다. `npm rm [패키지명]`으로 줄여쓸 수 있다.

* `npm search [검색어]`: npm의 패키지를 검색할 수 있다.

* `npm info [패키지명]`: 패키지의 세부 정보를 파악하고자 할 때 사용하는 명령어. package.json의 내용과 의존 관계, 설치 가능한 버전 정보 등이 표시된다.

* `npm adduser`: npm 로그인을 위한 명령어. npm 공식 사이트에서 가입한 계정으로 로그인하면 된다. 패키지를 배포할 때 로그인이 필요하다.

* `npm whoami`: 로그인한 사용자가 누구인지 알려준다.

* `npm logout`: npm adduser로 로그인한 계정을 로그아웃할 때 사용한다.

* `npm version [버전]`: package.json의 버전을 올린다. 원하는 버전의 숫자를 넣으면 된다.

* `npm deprecate [패키지명] [버전] [메시지]`: 해당 패키지를 설치할 때 경고 메시지를 띄우게 하는 명령어. 자신의 패키지에만 적용할 수 있다.

* `npm publish`: 자신이 만든 패키지를 배포할 때 사용.

* `npm unpublish`: 배포한 패키지를 제거할 때 사용. 24시간 이내에 배포한 패키지만 제거할 수 있다.

* `npm ci`: package.json 대신 package-lock.json에 기반하여 패키지를 설치. 더 엄격하게 버전을 통제하여 패키지를 설치하고 싶을 때 사용한다.

# 5.5 패키지 배포하기

npm은 패키지의 이름이 겹치는 것을 허용하지 않는다. 따라서 패키지의 이름을 바꿔서 배포해야 한다.

package.json에서 원하는 이름으로 name을 바꾸고, 다시 npm publish 명령어를 입력한다. 패키지에 대한 정보가 나오면 성공이다.

배포한 패키지를 삭제하기 위해서는 `npm unpublish [패키지명] --force`를 입력하여 삭제한다. `npm info [패키지명]`을 통해 제대로 지워졌는지 확인한다.

# 6.1 익스프레스 프로젝트 시작하기

`npm init`명령어로 package.json을 만들어준다. **scripts 부분에 start 속성은 잊지 말고 넣어줘야 한다.** nodemon app은 app.js를 nodemon으로 실행한다는 뜻이다. 서버 코드에 수정사항이 생길 때마다 자동으로 서버를 재시작한다.

```js
const express = require('express');

const app = express();
app.set('port', process.env.PORT || 3000);

app.get('/', (req, res) => {
    res.send('Hello, Express');
});

app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 대기 중');
});
```
Express 모듈을 실행해 app 변수에 할당한다. 익스프레스 내부에 http 모듈이 내장되어 있으므로 서버의 역할을 할 수 있다.

* `app.set('port', 포트)`로 서버가 실행될 포트를 설정한다. **process.env 객체에 PORT 속성이 있다면 그 값을 사용하고, 없다면 3000번 포트를 이용하도록 되어 있다.** 이런 식으로 `app.set(키, 값)`을 사용하여 **데이터를 저장**할 수 있다.

* `app.get(주소, 라우터)`는 **주소에 대한 GET 요청이 올 때 어떤 동작을 할지 적는 부분**이다. 매개변수 req는 요청에 관한 정보가 들어 있는 객체이고, res는 응답에 관한 정보가 들어 있는 객체이다. 현재 GET / 요청 시 응답으로 Hello, Express를 전송한다. 익스프레스에서는 res.write나 res.end 대신 **res.send를 사용**한다.

* GET 요청 외에도 POST, PUT, PATCH, DELETE, OPTIONS에 대한 라우터를 위한 app.post, app.put, app.patch, app.delete, app.options 메서드가 존재한다.

---

단순한 문자열 대신 HTML로 응답하고 싶다면 res.sendFile 메서드를 사용하면 된다. 파일의 경로를 **path 모듈**을 설정해서 지정한다.

```js
const express = require('express');
const path = require('path');

const app = express();
app.set('port', process.env.PORT || 3000);

app.get('/', (req, res) => {
    // res.send('Hello, Express');
    res.sendFile(path.join(__dirname, '/index.html'));
});

app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 대기 중');
});
```

# 6.2 자주 사용하는 미들웨어

미들웨어는 익스프레스의 핵심으로, 요청과 응답의 중간(미들(middle))에 위치하여 미들웨어라고 부른다. 요청과 응답을 조작하여 기능을 추가하기도 하고, 나쁜 요청을 걸러내기도 한다.

미들웨어는 app.use와 함께 사용된다. `app.use(미들웨어)` 꼴이다.

app.use에 매개변수가 req, res, next인 함수를 넣으면 된다. 미들웨어는 **위에서부터 아래로 순서대로 실행되면서 요청과 응답 사이에 특별한 기능을 추**가할 수 있다. 이번에는 next라는 세 번째 매개변수를 사용했는데, 다음 미들웨어로 넘어가는 함수이다. next를 실행하지 않으면 다음 미들웨어가 실행되지 않는다.

주소를 첫 번째 인수로 넣어주지 않으면 미들웨어는 모든 요청에서 실행되고, 주소를 넣는다면 해당하는 요청에서만 실행된다.app.use나 app.get 같은 라우터에 미들웨어를 여러 개 장착할 수 있다.

에러 처리 미들웨어는 매개변수가 err, req, res, next로 네 개이다. **모든 매개변수를 사용하지 않더라도 매개변수가 네 개여야 한다.** 첫 번째 err에는 에러에 관한 정보가 담겨 있다. res.status 메서드로 HTTP 상태 코드를 지정할 수 있다(기본값은 200-성공). 에러 처리 미들웨어를 직접 연결하지 않아도 기본적으로 익스프레스가 에러를 처리하긴 한다. 에러 처리 미들웨어는 특별한 경우가 아니면 가장 아래에 위치한다.

---

설치했던 패키지들을 불러온 뒤 app.use에 연결한다. req, res, next 같은 것들은 미들웨어 내부에 들어있어서 다음 미들웨어로 넘어갈 수 있다.

dotenv 패키지는 .env 파일을 읽어서 process.env로 만든다. process.env.COOKIE_SECRET에 cookiesecret 값이 할당된다. 키=값 형식으로 추가하면 된다. process.env를 별도의 파일로 관리하는 이유는 보안과 설정의 편의성 때문이다.

## 6.2.1 morgan

콘솔에 나오는 GET / 500 15.140 ms - 50 로그는 morgan 미들웨어에서 나오는 것이다. 요청과 응답에 대한 정보를 콘솔에 기록한다.

```js
app.use(morgan('dev'));
```

인수로 dev 외에 combined, common, short, tiny 등을 넣을 수 있다. dev 모드 기준으로 `GET / 500 15.140 ms - 50`은 각각 `[HTTP 메서드] [주소] [HTTP 상태 코드] [응답속도] - [응답 바이트]`를 의미한다.

## 6.2.2 static

static 미들웨어는 정적인 파일들을 제공하는 라우터 역할을 한다.

```js
app.use('요청 경로', express.static('실제 경로'));

app.use('/', express.static(path.join(__dirname, 'public')));
```

**함수의 인수로 정적 파일들이 담겨 있는 폴더를 지정**하면 된다. 예를 들어 public/stylesheets/style.css는 http://localhost:3000/stylesheets/style.css 로 접근할 수 있다. public 폴더를 만들고 css나 js, 이미지 파일들을 public 폴더에 넣으면 브라우저에서 접근할 수 있게 된다.

실제 서버의 폴더 경로에는 public이 들어 있지만, 요청 주소에는 public이 들어있지 않기 때문에 외부인이 서버의 구조를 쉽게 파악할 수 없다. ***보안에 큰 도움이 된다.***

정적 파일들을 알아서 제공해주므로 fs.readFile로 파일을 직접 읽어서 전송할 필요가 없다. 요청 경로에 해당하는 파일이 없으면 알아서 내부적으로 next를 호출한다.

## 6.2.3 body-parser

요청의 본문에 있는 데이터를 해석해서 req.body 객체로 만들어주는 미들웨어이다. 보통 폼 데이터나 AJAX 요청의 데이터를 처리한다. 단, 멀티파트(이미지, 동영상, 파일) 데이터는처리하지 못하므로 multer 모듈을 사용하면 된다.

```js
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
```

익스프레스에 일부 body-parser 미들웨어 기능이 내장되어 있지만, body-parser를 직접 설치해야 하는 경우가 있다. body-parser는 JSON과 URL-encoded 형식의 데이터 외에도 Raw, Text 형식의 데이터를 추가로 해석할 수 있다.

* Raw: 요청의 본문이 버퍼 데이터일 때 해석
* Text: 텍스트 데이터일 때 해석

### 요청 데이터 종류

* JSON: JSON 형식의 데이터 전달 방식
* URLencoded: 주소 형식으로 데이터를 보내는 방식. 폼 전송은 URL-encoded 방식을 주로 사용한다. urlencoded의 { extended: false }라는 옵션이 있는데, 이 옵션이 false,면 노드의 querystring 모듈을 사용하여 쿼리스트링을 해석하고, true면 qs 모듈을 사용하여 쿼리스트링을 해석한다. qs 모듈은 npm 패키지로 querystring 모듈의 기능을 좀 더 확장한 모듈

이전에 `req.on('data')`와 `req.on('end')`를 통해 스트림을 사용해야 했지만, body-parser를 사용하면 **패키지가 내부적으로 스트림을 처리해 req.body에 추가**한다.

> 예를 들어, JSON 형식으로 `{ name: 'seongtae', book: 'nodejs' }`를 본문으로 보낸다면 req.body에 그대로 들어간다. URL-encoded 형식으로 `name=seongtae&book=nodejs`를 본문으로 보낸다면 req.body에 `{ name: 'seongtae', book: 'nodejs' }`가 들어간다.

## 6.2.4 cookie-parser

cookie-parser는 요청에 동봉된 쿠키를 해석해 req.cookies 객체로 만든다. 

```js
app.use(cookieParser(비밀키));
```

해석된 쿠키들은 req.cookies 객체에 들어간다.

> 예를 들어 name=seongtae 쿠키를 보냈다면 req.cookies는 `{ name: 'seongtae' }`가 된다.

첫 번째 인수로 비밀 키를 넣어줄 수 있다. 서명된 쿠키가 있는 경우, 제공한 비밀 키를 통해 해당 쿠키가 내 서버가 만든 쿠키임을 검증할 수 있다. 쿠키는 클라이언트에서 위조하기 쉬우므로 비밀 키를 통해 만들어낸 서명을 쿠키 값 뒤에 붙인다. 서명이 붙으면 쿠키가 `name=seongtae.sign`과 같이 모양이 된다. 서명된 쿠키는 req.cookies 대신 req.signedCookies 객체에 들어있다.

cookie-parser가 쿠키를 생성할 때 쓰이는 것이 아니다. 쿠키를 생성/제거하기 위해서는 res.cookie, res.clearCookie 메서드를 사용해야 한다. res.cookie(키, 값, 옵션) 형식으로 사용한다. 옵션은 domain, expires, httpOnly, maxAge, path, secure 등이 있다.

```js
res.cookie('name', 'seongtae', {
    expires: new Date(Date.now() + 900000),
    httpOnly: true,
    secure: true,
});
res.clearCookie('name', 'seongtae', { httpOnly: true, secure: true});
```

쿠키를 지우려면 키와 값 외에 옵션도 정확히 일치해야 쿠키가 지워진다(단, expires나 maxAge 옵션은 일치할 필요가 없다).

옵션 중에는 signed라는 옵션이 있는데, 이를 true로 설정하면 쿠키 뒤에 서명이 붙기 때문에 내 서버가 쿠키를 만들었다는 것을 검증하기 위해 서명 옵션을 켜두는 것이 좋다. 서명을 위한 비밀 키는 cookieParser 미들웨어에 인수로 넣은 process.env.COOKIE_SECRET이 된다.

## 6.2.5 express-session

세션 관리용 미들웨어. 로그인 등의 이유로 세션을 구현하거나 특정 사용자를 위한 데이터를 임시적으로 저장해둘 때 유용하다. 세션은 사용자별로 req.session 객체 안에 유지됩니다.

```js
app.use(session({
    resave: false,
    saveUninitialized: false,
    secret: process.env.COOKIE_SECRET,
    cookie: {
        httpOnly: true,
        secure: false,
    },
    name: 'session-cookie',
}));
```

보통 cookie-parser 미들 웨어 뒤에 놓는 것이 안전하다.

express-session은 인수로 **세션에 대한 설정**을 받는다. resave는 요청이 올 때 세션에 수정 사항히 생기지 않더라도 세션을 다시 저장할지 설정하는 것이고, saveUninitialized는 세션에 저장할 내역이 없더라도 처음부터 세션을 생성할지 설정하는 것이다.

express-session은 **세션 관리시 클라이언트에 쿠키를 보낸다.** 안전하게 쿠키를 전송하려면 쿠키에 서명을 추가해야 하고, 쿠키를 서명하는 데 secret의 값이 필요하다. cookie-parser의 secret과 같게 설정하는 것이 좋다. 세션 쿠키의 이름은 name옵션으로 설정한다. 

cookie 옵션은 세션 쿠키에 대한 설정이다. maxAge, domain, path, expires, sameSite, httpOnly, secure 등 일반적인 쿠키 옵션이 모두 제공된다. 현재 **httpOnly를 true로 설정해 클라이언트에서 쿠키를 확인하지 못하도록 했고**, **secure는 false로 해서 https가 아닌 환경에서도 사용할 수 있게 했다**. 배포 시에는 https를 적용하고 secure도 true로 설정하는 것이 좋다.

store라는 옵션도 있다. 데이터베이스에 연결하여 세션을 유지하도록 하는 것으로 주로 레디스(Redis)가 자주 쓰인다.

```js
req.session.name = 'seongtae'; // 세션 등록
req.sessionID; // 세션 아이디 확인
req.session.destroy(); // 세션 모두 제거
```

express-session으로 만들어진 req.session 객체에 값을 대입하거나 삭제해서 세션을 변경할 수 있다. 나중에 세션을 한 번에 삭제하려면 **req.session.destory**메서드를 호출한다. 현재 세션의 아이디는 **req.sessionID**로 확인할 수 있다. 세션을 강제로 저장하기 위해 req.session.save 메서드가 존재하지만 일반적으로 요청이 끝날 때 자동으로 호출되므로 직접 save를 호출할 일은 없다.

express-session에서 서명한 쿠키 앞에는 s:이 붙는다. 실제로는 encodeURIComponent 함수가 실행되어 s%3A가 된다. 앞에 **s%3A가 붙은 경우**, 이 쿠키가 **express-session 미들웨어에 의해 암호화된 것**이라고 생각하면 된다.

## 6.2.6 미들웨어의 특성 활용하기

```js
app.use((req, res, next) => {
    console.log('모든 요청에 다 실행됩니다.');
    next();
});
```

미들웨어는 req, res, next를 매개변수로 가지는 함수(에러 처리 미들웨이는 err 포함 4개)로서 app.use나 app.get, app.post 등으로 장착한다. 특정한 주소의 요청에만 미들웨어가 실행되게 하려면 첫 번째 인수로 주소를 넣는다.

```js
app.use(
    morgan('dev')
    express.static('/', path.join(__dirname, 'public')),
    express.json(),
    express.urlencoded({ extended: false }),
    cookieParser(process.env.COOKIE_SECRET),
);
```
* 미들 웨어의 처리

위와 같이 동시에 여러 개의 미들웨어를 장착할 수도 있으며, 다음 미들웨어로 넘어가려면 next 함수를 호출해야 한다. 위 미들웨어들은 내부적으로 next를 호출하고 있으므로 연달아 쓸 수 있다. **next를 호출하지 않는 미들웨어**는 res.send나 res.sendFile 등의 메서드로 응답을 보내야 한다. express.static과 같은 미들웨어는 정적 파일을 제공할 때 next 대신 res.sendFile 메서드로 **응답**을 보낸다. 따라서 **정적 파일을 제공하는 경우 express.json, express.urlencoded, cookieParser 미들웨어는 실행되지 않는다.** 미들웨어 장착 순서에 따라 어떤 미들웨어는 실행되지 않을 수도 있다.

* next 인수

next에 인수를 넣을 수도 있다. 단, **인수를 넣는다면 특수한 동작을 한다.** **route**라는 문자열을 넣으면 **다음 라우터의 미들웨어**로 바로 이동하고, 그 외의 인수를 넣는다면 **에러 처리 미들웨어**로 이동한다. 이때의 인수를 **에러 처리 미들웨어의 err 매개변수**가 된다. 라우터에서 에러가 발생할 때 에러를 next(err)을 통해 에러 처리 미들웨어로 넘긴다.

* 미들웨어 간에 데이터를 전달

세션을 사용한다면 req.session 객체에 데이터를 넣어도 되지만, 세션이 유지되는 동안에도 데이터가 계속 유지된다는 단점이 있다. 만약 요청이 끝날 때까지만 데이터를 유지하고 싶다면 req 객체에 데이터를 넣어두면 된다.

```js
app.use((req, res, next) => {
    req.data = '데이터 넣기';
    next();
}, (req, res, next) => {
    console.log(req.data); // 데이터 받기
    next();
});
```
현재 요청이 처리되는 동안 req.data를 통해 미들웨어 간에 데이터를 공유할 수 있다. 새로운 요청이 오면 req.data는 초기화된다(꼭 속성명이 data일 필요는 없다).

> **app.set과의 차이**
> 
> app.set은 익스프레스에서 전역적으로 사용되므로 사용자 개개인의 값을 넣기에는 부적절하며, 앱 전체의 설정을 공유할 때 사용하면 된다. req 객체는 요청을 보낸 사용자 개개인에게 귀속되므로 req 객체를 통해 개인의 데이터를 전달하는 것이 좋다.

### 미들웨어 안에 미들웨어를 넣는 방식

```js
app.use(morgan('dev'));
// 또는
app.user((req, res, next) => {
    morgan('dev')(req, res, next);
});
```

이 패턴은 기존 미들웨어의 기능을 확장할 수 있어 유용하다. 예를 들어 다음과 같이 분기 처리를 할 수도 있다.

```js
app.use((req, res, next) => {
    if (process.env.NODE_ENV === 'production') {
        morgan('combined')(req, res, next);
    } else {
        morgan('dev')(req, res, next);
    }
});
```

## 6.2.7 multer

이미지, 동영상을 비롯한 여러 가지 파일들을 멀티파트 형식으로 업로드할 때 사용하는 미들웨어. 멀티파트 형식이란 enctype이 multipart/form-data인 폼을 통해 업로드하는 데이터의 형식을 의미한다. 폼을 통해 업로드하는 파일은 body-parser로는 처리할 수 없고 직접 파싱하기도 어려우므로 multer라는 미들웨어를 따로 사용한다.

기본적인 설정은 다음과 같다

```js
const multer = require('multer');

const upload = multer({
    storage: multer.diskStorage({
        destination(req, file, done) {
            done(null, 'uploads/');
        },
        filename(req, file, done) {
            const ext = path.extname(file.originalname);
            done(null, path.basename(file.originalname, ext) + Date.now() + ext);
        },
    }),
    limits: { fileSize: 5 * 1024 * 1024 },
});
```

multer 함수의 인자로 설정을 넣는다.

* storage 속성: 어디에(destination) 어떤 이름으로(filename) 저장할지를 넣었다.

* destination과 filename 함수의 req 매개변수에는 요청에 대한 정보가, file 객체에는 업로드한 파일에 대한 정보가 있다.

* done 매개변수는 함수이다. **첫 번째 인수**에는 에러가 있다면 에러를 넣고, **두 번째 인수**에는 실제 경로나 파일 이름을 넣어주면 된다. req나 file의 데이터를 가공해서 done으로 넘기는 형식이다.

현재 설정으로는 uploads라는 폴더에 [파일명+현재시간.확장자] 파일명으로 업로드하고 있다. 현재시간을 넣어서 파일명의 중복을 피한다.

* limits 속성에는 업로드에 대한 제한 사항을 설정할 수 있다.

위 설정을 활용하기 위해서는 서버에 uploads 폴더가 반드시 존재해야 한다.

설정이 완료되면 upload 변수가 생기는데, 먼저 파일을 하나만 업로드하는 경우에는 **single 미들웨어**를 사용한다.

```js
app.post('/upload', upload.single('image'), (req, res) => {
    console.log(req.file, req.body);
    res.send('ok');
});
```

single 미들웨어를 라우터 미들웨어 앞에 넣어두면, multer 설정에 따라 파일 업로드 후 req.file 객체가 생성된다. 인수는 input 태그의 name이나 폼 데이터의 키와 일치하게 넣으면 된다. 업로드 성공 시 결과는 req.file 객체 안에 들어있다. req.body에는 데이터인 title이 들어 있다.

---

### 여러 파일을 업로드하는 경우

HTML의 input 태그에는 multiple을 쓰면 된다. 미들웨어는 single 대신 **array로 교체한다.**

```js
app.post('/upload', upload.array('many'), (req, res) => {
    console.log(req.files, req.body);
    res.send('ok');
})
```

업로드 결과도 req.files 배열에 들어 있다.

### input 태그나 폼 데이터의 키가 다른 경우

fields 미들 웨어를 사용한다. fields 미들웨어의 인수로 input 태그의 name을 각각 적는다.

```js
app.post('/upload',
    upload.fields([{ name: 'image1' }, { name: 'image2' }]),
    (req, res) => {
        console.log(req.files, req.body);
        res.send('ok');
    },
);
```

업로드 결과도 req.files.image1, req.files.image2에 각각 들어 있다.

### 파일을 업로드하지 않고 멀티파트로 업로드하는 경우

none 미들웨어를 사용한다.

```js
app.post('/upload', upload.none(), (req, res) => {
    console.log(req.body);
    res.send('ok');
});
```

파일을 업로드하지 않았으므로 req.body만 존재한다.

# 6.3 Router 객체로 라우팅 분리하기

app.js에서 app.get 같은 메서드가 라우터 부분이다. 라우터를 많이 연결하면 app.js 코드가 길어지므로 익스프레스에는 라우터를 분리할 수 있는 방법을 제공한다.

index.js와 user.js를 만들고 `const router = express.Router();`로 router를 만들고 `module.exports = router;`를 통해 모듈로 만든다.

indexRouter를 ./routes로 require할 수 있는 이유는 index.js를 생략할 수 있기 때문이다. `require('./routes/index.js')`와 `require('./routes')`는 같다.

indexRouter는 use의 '/'와 get의 '/'가 합쳐져 GET / 라우터가 되었고, userRouter는 use의 '/user'와 get의 '/'가 합쳐져 GET /user 라우터가 되었다. 이렇게 **app.use로 연결할 때 주소가 합져진다는 것**을 염두에 두면 된다.

## next 함수로 다음 라우터로 넘어가기

next('route')를 통해 라우터에 연결된 나머지 미들웨어들을 건너뛸 수 있다.

```js
router.get('/', function(req, res, next) {
    next('route');
}, function(req, res, next) {
    console.log('실행되지 않습니다');
    next();
}, function(req, res, next) {
    console.log('실행되지 않습니다');
    next();
});
router.get('/', function(req, res) {
    console.log('실행됩니다');
    res.send('Hello, Express');
});
```

첫 번째 라우터의 첫 번째 미들웨어에서 next() 대신 next('route')를 호출하였기에 두 번째, 세 번째 미들웨어가 실행되지 않는다. 대신 주소가 일치하는 다음 라우터로 넘어간다.

## 패턴사용-라우트 매개변수

```js
router.get('/user/:id', function(req, res) {
    console.log(req.params, req.query);
});
```

주소에 :id가 있는데 문자 그대로 :id를 의미하는 것이 아니다. 이 부분에는 다른 값을 넣을 수 있다. /user/1이나 /user/123 등의 요청도 이 라우터가 처리하게 된다.

이의 장점은 **:id에 해당하는 1이나 123을 조회할 수 있다는 점**이고, req.params 객체 안에 들어있다. **:id**면 `req.params.id`로, **:type**이면 `req.params.type`으로 조회할 수 있다.

단, 이 패턴을 사용하기 위해서는 **일반 라우터보다 뒤에 위치해야 한다**는 것이다. 다양한 라우터를 아우르는 역할을 하므로 일반 라우터보다 뒤에 위치해야 다른 라우터를 방해하지 않는다.

```js
router.get('/user/:id', function(req, res) {
    console.log('이 라우터만 실행됩니다.');
});
router.get('/user/like', function(req, res) {
    console.log('실행되지 않는다.');
})
```

주소에 쿼리스트링을 쓸 때도 있다. 쿼리스트링의 키-값 정보는 req.query 객체 안에 들어있다. 예를 들어 /users/123?limit=5&skip=10이라는 요청이 들어왔을 때 req.params와 req.query 객체는 다음과 같다

```
{ id: '123' }{ limit: '5', skip: '10' }
```

## 에러 처리

app.js에서 에러 처리 미들웨어 위에 넣어둔 미들웨어는 일치하는 라우터가 없을 때 404 상태 코드를 응답하는 역할을 한다. 미들웨어가 없어도 자체적으로 처리해주긴 하나, 웬만하면 404 응답 미들웨어와 에러 처리 미들웨어를 연결해주는 것이 좋다.

## 라우터 활용

라우터에 자주 쓰이는 활용법으로 `app.route`와 `router.route`가 있다.

```js
router.get('/abc', (req, res) => {
    res.send('GET /abc');
});

router.post('/abc', (req, res) => {
    res.send('POST /abc');
});
```

다음과 같이 관련 있는 코드끼리 묶는 것이 더 읽기 좋아진다.

```js
router.route('/abc')
    .get((req, res) => {
        res.send('GET /abc');
    })
    .post((req, res) => {
        res.send('POST /abc');
    });
```

# 6.4 req, res 객체 살펴보기

## req 객체

* req.app: req 객체를 통해 app 객체에 접근할 수 있다. req.app.get('port')와 같은 식으로 사용할 수 있다.

* req.body: body-parser 미들웨어가 만드는 요청의 본문을 해석한 객체이다.

* req.cookies: cookie-parser 미들웨어가 만드는 요청의 쿠키를 해석한 객체이다.

* req.ip: 요청의 ip 주소가 담겨 있다.

* req.params: 라우트 매개변수에 대한 정보가 담긴 객체이다.

* req.query: 쿼리스트링에 대한 정보가 담긴 객체이다.

* req.signedCookies: 서명된 쿠키들은 req.cookies 대신 여기 담겨있다.

* req.get(헤더 이름): 헤더의 값을 가져오고 싶을 때 사용하는 메서드

## res 객체

* res.app: req.app처럼 res 객체를 통해 app 객체에 접근할 수 있다.

* res.cookie(키, 값, 옵션): 쿠키를 설정하는 메서드이다.

* res.clearCookie(키, 값, 옵션): 쿠키를 제거하는 메서드이다.

* res.end(): 데이터 없이 응답을 보낸다.

* res.json(JSON): JSON 형식의 응답을 보낸다.

* res.redirect(주소): 리다이렉트할 주소와 함께 응답을 보낸다.

* res.render(뷰, 데이터): 템플릿 엔진을 렌더링해서 응답할 때 사용하는 메서드

* res.send(데이터): 데이터와 함께 응답을 보낸다. 데이터는 문자열일 수도 있고 HTML일 수도 있으며, 버퍼일 수도 있고 객체나 배열일 수도 있다.

* res.sendFile(경로): 경로에 위치한 파일을 응답한다.

* res.set(헤더, 값): 응답의 헤더를 설정한다.

* res.status(코드): 응답 시의 HTTP 상태 코드를 지정한다.

> **메서드 체이닝**
> 
> 메서드 체이닝을 통해 코드 양을 줄일 수 있다.  
> ```js
> res
>   .status(201)
>   .cookie('test', 'test')
>   .redirect('/admin');
> ```

# 6.5 템플릿 엔진 사용하기

템플릿 엔진은 자바스크립트를 사용해서 HTML을 렌더링할 수 있게 한다. 따라서 기존 HTML과는 문법이 살짝 다를 수도 있고, 자바스크립트 문법이 들어있기도 하다.

## 6.5.1 퍼그(제이드)

* views: 템플릿 파일들이 위치한 폴더를 지정하는 것이다. res.render 메서드가 이 폴더 기준으로 템플릿 엔진을 찾아서 렌더링한다. `res.render('index')`라면 views/index.pug를 렌더링 한다. `res.render('admin/main')`이라면 views/admin/main.pug를 렌더링한다.

* view engine: 어떠한 종류의 템플릿 엔진을 사용할지를 나타낸다.

### 6.5.1.1 HTML 표현

기존 HTML과 다르게 화살괄호(<>)와 닫는 태그가 없다.탭 또는 스페이스로만 태그의 부모 자식 관계를 규명한다. 모든 파일에 동일한 종류의 들여쓰기를 적용한다.

`doctype html`은 `<!DOCTYPE html>`과 같다. 화살괄호가 없으므로 태그의 속성도 조금 다르게 표현한다.

```pug
doctype html
html
    head
        title= title
        link(rel='stylesheet', href='/stylesheets/style.css')
```

* 속성 중 아이디와 클래스가 있는 경우에는 다음과 같이 표현할 수 있다. div 태그인 경우 div 문자는 생략할 수 있다.

```pug
#login-button
.post-image
span#highlight
p.hidden.full
```

* HTML 텍스트는 다음과 같이 태그 또는 속성 뒤에 한 칸을 띄고 입력한다.

```pug
p Welcome to Express
button(type='submit') 전송
```

* 에디터에서 텍스트를 여러 줄 입력하고 싶다면 다음과 같이 파이프(|)를 넣는다. HTML 코드에서는 한 줄로 나온다.

```pug
p
    | 안녕하세요.
    | 여러 줄을 입력합니다.
    br
    | 태그도 중간에 넣을 수 있습니다.
```

* style이나 script 태그로 CSS 또는 자바스크립트 코드를 작성하고 싶다면 다음과 같이 태그 뒤에 점을 붙인다.

```pug
style.
    h1 {
        font-size: 30px;
    }
script.
    const message = 'Pug';
    alert(message);
```

---

## 5-3. 가상의 테이블: 뷰

뷰는 데이터베이스 개체 중 하나이다. **단순 뷰**는 하나의 테이블과 연관된 뷰를 말하고, **복합 뷰**는 2개 이상의 테이블과 연관된 뷰를 말한다.

### 5-3-1. 뷰의 개념

#### 뷰의 기본 개념

SELECT 문으로 실행해서 나온 결과가 뷰의 실체이다.

```sql
CREATE VIEW 뷰_이름
AS
  SELECT 문;
```

뷰를 만든 후에는 테이블과 동일하게 SELECT 문을 사용할 수 있다.

```sql
SELECT 열_이름 FROM 뷰_이름
  [WHERE 조건];
```

#### 뷰의 작동

사용자가 조회 또는 변경을 하고자 할 때 뷰를 통해 쿼리를 실행하고 결괏값을 테이블로부터 가져오면 그 결과를 사용자가 확인한다.

뷰는 '읽기 전용'으로 사용되지만, 뷰를 통해서 원본 테이블의 데이터를 수정할 수도 있다.

#### 뷰를 사용하는 이유

1. 보안에 도움이 된다.
   - 뷰에는 사용자의 중요한 정보를 제외한 정보를 볼 수 없기 때문에 보안에 도움이 된다. 테이블에 접근할 권한을 다르게 하는 것이다. 이런 방식으로 데이터베이스도 사용자마다 테이블에 접근하는 권한에 차별을 둬서 처리하고 있으며, 사용자별 권한이 데이터베이스 보안의 중요한 주제 중 하나이다.

2. 복잡한 SQL을 단순하게 만들 수 있다.
```sql
CREATE VIEW v_memberbuy
AS
	SELECT B.mem_id, M.mem_name, B.prod_name, M.addr,
					CONCAT(M.phone1, M.phone2) '연락처'
		FROM buy B
			INNER JOIN member M
            ON B.mem_id = M.mem_id;
```
이러한 길고 복잡한 쿼리를 자주 사용해야 한다면 뷰로 생성해놓고 뷰에만 접근하도록 하면 복잡한 SQL을 입력할 필요가 없어진다.

### 5-3-2. 뷰의 실제 작동

#### 뷰의 실제 생성, 수정, 삭제

뷰를 조회할 때 열 이름에 공백이 있으면 백틱(`)으로 묶어줘야 한다.

뷰의 수정은 ALTER VIEW 구문을 사용하고, 열 이름에 한글을 사용해도 된다.

뷰의 삭제는 DROP VIEW를 사용한다.

#### 뷰의 정보 확인

DESC 혹은 DESCRIBE로 기존 뷰의 정보를 확인한다. 테이블과 달리 PRIMARY KEY의 정보는 확인되지 않는다.

```sql
SHOW CREATE VIEW [뷰_이름];
```
으로 뷰의 소스 코드도 확인할 수 있다.

#### 뷰를 통한 데이터의 수정/삭제

뷰를 통해 테이블의 데이터를 수정할 수도 있다.

```sql
UPDATE v_member SET addr = '부산' WHERE mem_id = 'BLK';
```

그런데 데이터를 입력할 때 만약 뷰에 참조하지 않는 열을 추가하려고 할 때 오류가 발생하곤 한다(NOT NULL로 설정된 경우).

```sql
INSERT INTO v_member(mem_id, mem_name, addr) VALUES('BTS', '방탄소년단', '경기');
```

이렇게 뷰를 통해서 테이블에 값을 입력하고자 한다면 뷰에 원하는 열을 포함하도록 뷰를 재정의하거나 테이블에서 열의 속성을 NULL로 바꾸거나 기본값을 지정해야 한다.

#### 뷰를 통한 데이터의 입력

뷰의 조건을 정의한 상태에서 뷰의 조건을 충족하지 않는 데이터를 입력했을 때 오류 없이 입력이 된다. 하지만 뷰는 조건을 충족하는 값만 조회가 되므로 방금 입력한 데이터는 보이지 않는다.

이럴 때는 예약어 `WITH CHECK OPTION`을 통해 뷰에 설정된 값의 범위가 벗어나는 값은 입력되지 않도록 할 수 있다.

```SQL
ALTER VIEW v_height167
AS
	SELECT * FROM member WHERE height >= 167
		WITH CHECK OPTION;

INSERT INTO v_height167 VALUES('TOB', '텔레토비', 4, '영국', NULL, NULL, 140, '1995-01-01');
```
이렇게 설정하면 뷰의 조건을 충족하는 데이터만 추가할 수 있다.

> **단순 뷰와 복합 뷰**
> 
> 복합 뷰는 주로 두 테이블을 조인한 결과를 뷰로 만들 때 사용한다. 복합 뷰는 **읽기 전용**으로 복합 뷰를 통해 데이터를 입력/수정/삭제할 수 없다.

#### 뷰가 참조하는 테이블의 삭제

뷰가 참조하는 테이블을 삭제하면 참조하는 테이블이 없기 때문에 조회할 수 없다.

뷰가 조회되지 않으면 `CHECK TABLE`문으로 뷰의 상태를 확인해볼 수 있다.

```SQL
CHECK TABLE v_height167;
```