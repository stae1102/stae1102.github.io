---
layout: post
title: "08 Mar TIL: NodeJS 패키지 명령어, 배포"
excerpt: "nodejs package commands"
date: 2022-03-08 11:25:00 +0900
categories:
  - Study
tags:
  - TIL
---

# 5.3 패키지 버전 이해하기

노드의 버전은 항상 세 자리로 이루어져 있다. SemVar(Semantic Versioning, 유의적 버전) 방식의 버전 넘버링을 따르기 때문이다.

* 첫 번째 자리: major 버전. major 버전이 0이면 초기 개발 중이라는 뜻이다. 1부터 정식 버전을 의미한다. major 버전은 하위 호환이 안 될 정도로 패키지의 내용이 수정되었을 때 올린다.

* 두 번째 자리: minor 버전. 하위 호환이 되는 기능 업데이트를 할 때 올린다. 1.5.0에서 1.6.0으로 업데이트했을 때 아무 문제가 없어야 한다.

* 세 번째 자리: patch 버전. 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 올린다.

새 버전을 배포한 후에는 그 버전의 내용을 절대 수정하면 안 된다. 수정 사항이 생기면 세 자리의 버전 중 하나를 맞게 올려서 새로운 버전으로 배포해야 한다.

package.json에는 SemVar식 세 자리 버전 외에도 버전 앞에 ^이나 ~ 또는 >, < 같은 문자가 붙어 있는데, 이 문자는 버전에는 포함되지 않지만 설치하거나 업데이트할 때 어떤 버전을 설치해야 하는지 알려준다.

* ^ 기호: minor 버전까지만 설치하거나 업데이트 한다. `npm i express@^1.1.1`이라면 1.1.1 이상부터 2.0.0 미만 버전까지 설치된다. 1.x.x와 같이 표현할 수도 있다.

* ~ 기호: patch 버전까지만 설치하거나 업데이트 한다. `npm i express@~1.1.1`이라면 1.1.1 이상부터 1.2.0 미만 버전까지 설치된다. 1.1.x와 같은 표현도 가능하다.

* \>, <, > =, < =, =기호: 초과, 미만 이상, 이하, 동일을 뜻한다. `npm i express@>1.1.1`이라면 반드시 1.1.1 버전보다 높은 버전이 설치된다.

* @latest: 가장  최신 버전의 패키지를 설치. x로도 표현할 수 있다. `npm i express@latest` or `npm i express@x`

* @next: 가장 최근의 배포판을 설치할 수 있다. 안정되지 않은 알파나 베타 버전의 패키지를 설치할 수 있다는 것이다.

# 5.4 기타 npm 명령어

* npm outdated: 업데이트할 수 있는 패키지가 있는지 확인한다. Current와 Wanted가 다르다면 업데이트가 필요한 경우이다. `npm update [패키지명]`으로 업데이트할 수 있다. 그냥 `npm update`를 하면 업데이트 가능한 모든 패키지가 Wanted에 적힌 버전으로 업데이트된다. Latest는 해당 패키지의 최신 버전이지만 **package.json에 적힌 버전 범위와 다르다면 설치되지 않는다.**

* `npm uninstall [패키지명]`: 해당 패키지를 제거하는 명령어. 패키지가 node_modules폴더와 package.json에서 사라진다. `npm rm [패키지명]`으로 줄여쓸 수 있다.

* `npm search [검색어]`: npm의 패키지를 검색할 수 있다.

* `npm info [패키지명]`: 패키지의 세부 정보를 파악하고자 할 때 사용하는 명령어. package.json의 내용과 의존 관계, 설치 가능한 버전 정보 등이 표시된다.

* `npm adduser`: npm 로그인을 위한 명령어. npm 공식 사이트에서 가입한 계정으로 로그인하면 된다. 패키지를 배포할 때 로그인이 필요하다.

* `npm whoami`: 로그인한 사용자가 누구인지 알려준다.

* `npm logout`: npm adduser로 로그인한 계정을 로그아웃할 때 사용한다.

* `npm version [버전]`: package.json의 버전을 올린다. 원하는 버전의 숫자를 넣으면 된다.

* `npm deprecate [패키지명] [버전] [메시지]`: 해당 패키지를 설치할 때 경고 메시지를 띄우게 하는 명령어. 자신의 패키지에만 적용할 수 있다.

* `npm publish`: 자신이 만든 패키지를 배포할 때 사용.

* `npm unpublish`: 배포한 패키지를 제거할 때 사용. 24시간 이내에 배포한 패키지만 제거할 수 있다.

* `npm ci`: package.json 대신 package-lock.json에 기반하여 패키지를 설치. 더 엄격하게 버전을 통제하여 패키지를 설치하고 싶을 때 사용한다.

# 5.5 패키지 배포하기

npm은 패키지의 이름이 겹치는 것을 허용하지 않는다. 따라서 패키지의 이름을 바꿔서 배포해야 한다.

package.json에서 원하는 이름으로 name을 바꾸고, 다시 npm publish 명령어를 입력한다. 패키지에 대한 정보가 나오면 성공이다.

배포한 패키지를 삭제하기 위해서는 `npm unpublish [패키지명] --force`를 입력하여 삭제한다. `npm info [패키지명]`을 통해 제대로 지워졌는지 확인한다.