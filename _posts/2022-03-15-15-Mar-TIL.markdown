---
layout: post
title: "15 Mar TIL: Nodejs JWT, req 요청, sequelize as"
excerpt: "jwt.sign, req, sequelize as"
date: 2022-03-15 17:15:00 +0900
categories:
  - Study
tags:
  - TIL
---

- [jwt.sign](#jwtsign)
- [req 요청](#req-요청)
- [Sequelize의 as](#sequelize의-as)
- [사용량 제한 구현](#사용량-제한-구현)
- [API 버전 변경](#api-버전-변경)
- [CORS](#cors)
- [미들웨어 커스터마이징](#미들웨어-커스터마이징)
- [서버용 비밀 키와 클라이언트용 비밀 키](#서버용-비밀-키와-클라이언트용-비밀-키)
  - [7-2. 스토어드 함수와 커서](#7-2-스토어드-함수와-커서)
    - [7-2-1. 스토어드 함수](#7-2-1-스토어드-함수)
      - [스토어드 함수의 개념과 형식](#스토어드-함수의-개념과-형식)
      - [스토어드 함수의 사용](#스토어드-함수의-사용)
    - [7-2-2. 커서로 한 행씩 처리하기](#7-2-2-커서로-한-행씩-처리하기)
      - [커서의 기본 개념](#커서의-기본-개념)
      - [커서의 단계별 실습](#커서의-단계별-실습)
      - [커서의 통합 코드](#커서의-통합-코드)

# jwt.sign

토큰은 jwt.sign으로 발급받는다. 먼저 도메인 모델에 clientSecret 키와 일치하는 도메인 데이터의 유저 닉네임과 아이디를 불러오고, 이 내용을 토큰으로 저장한다.

jwt.sign의 첫 번째 인수는 토큰의 내용이다. 주로 id나 nickname 등이 들어간다.

두 번째 인수는 토큰의 비밀 키이다. 이 비밀 키가 유출되면 토큰을 임의로 만들어낼 수 있기 때문에 유의해야 한다.

세 번째 인수는 토큰의 설정이다. 유효기간과 발급자(issuer)를 설정한다.

# req 요청

복습을 하던 중 계속해서 어려웠던 부분이 해결되었다.

먼저 req.user.id와 req.params.id가 계속 헷갈렸었는데, req.user.id는 그냥 요청에서의 사용자를 일컫는다. 웹에서 로그인을 하고 그 로그인한 사용자가 웹 페이지와 상호작용하면 그 유저의 요청이 보내지고, 유저의 정보는 req.user에 담긴다.

req.params.id는 라우터의 매개변수 중 id를 불러온 값이다. 만약 요청이 router.post('/:id', (req, res, next) => ...)이라고 한다면, 요청 url의 :id가 매개변수로, req.params.id로 값을 가져올 수 있다. 이를 구분하는 것만으로도 상당히 큰 도움이 되었다.

# Sequelize의 as

이 as가 상당히 헷갈리는 부분이다. 다대다 관계를 설정할 때 이 as를 통해 데이터를 효율적으로 운용할 수 있다. 게시글에 like 기능을 만들면 그 like를 누가 눌렀는지 기록해야 한다. 그럴 때 user 테이블과 post 테이블을 belongsToMany로 묶고, Post에 Like한 사람들을 넣어야 하므로 db.Post.belongsToMany(db.User, { through: 'Like', as: 'Likers' })로 associate를 정의한다. through는 post와 user 테이블을 연결해주는 새로운 테이블이 되며, Post 모델은 이 테이블을 Liker로 읽겠다는의미이다.

이렇게 데이터베이스를 구성하게 되면 Post에 Liker 즉, 유저 데이터를 넣기 위해 addLiker 삭제를 위해 removeLiker 등으로 데이터를 쉽게 관리할 수 있게 된다.

그리고 메인 페이지에서 post 들을 불러올 때, include를 통해서 user 테이블과 함께 join한 상태로 불러오게 된다. 이때 include를 여러 개 설정할 수 있다.

```js
const posts = await Post.findAll({
    include: [{
        model: User,
        attributes: ['id', 'nick'],
    }, {
        model: User,
        attributes: ['id', 'nick'],
        as: 'Liker',
    }],
    order: [['createdAt', 'DESC']],
});
res.render('main', {
    title: 'NodeBird',
    twits: posts,
});
```

Post.findAll의 include의 첫 번째 인수는 작성자가 된다. db.Post.belongsTo(db.Post)에서 정의한 것으로 게시글을 작성한 사람의 데이터이다. 두 번째 인수는 좋아요를 누른 사람이 된다. db.Post.belongsToMany(db.User, { through: 'Like', as: 'Liker' })로 좋아요를 누른 사람은 addLiker를 통해 새로운 Like 테이블에 데이터를 저장하기 때문이다.

# 사용량 제한 구현

API를 과도하게 사용하면 트래픽이 증가하고 서버에 무리가 간다. 따라서 API를 사용함에 있어서 무료와 유료로 차이를 두는 것이 좋다.

이러한 기능은 npm 패키지로 만들어져 있고, 그 패키지는 express-rate-limit 이다.

참고로 요청이 과도하게 발생했을 때의 HTTP 상태코드는 429(너무 많은 요청)이다.

```js
const RateLimiter = require('express-rate-limit');
...
exports.apiLimiter = new RateLimiter({
    windowMs: 60 * 1000,
    max:1
    handler(req, res) {
        res.status(this.statusCode).json({
            code: this.statusCode,
            message: '1분에 한 번만 요청할 수 있습니다.',
        });
    },
});

exports.deprecated = (req, res) => {
    res.status(410).json({
        code: 410,
        message: '새로운 버전이 나왔습니다. 새로운 버전을 사용하세요.',
    });
};
```

apiLimiter 미들웨어를 라우터에 넣으면 사용량 제한이 걸린다. windowMs는 기준 시간, max는 허용 횟수, handler는 요청량을 초과했을 시의 콜백 함수이다.

deprecated는 사용하면 안 되는 라우터 붙여준다.

**RateLimiter는 express-rate-limit 버전이 5일 때 가능!** 버전 6이상부터는 생성자가 아니라고 오류가 발생한다.😥

# API 버전 변경

이렇게 사용량 제한을 새롭게 수정하여 각 요청에 대해 apiLimiter를 설정하면 새로운 API 버전으로 저장해야 하므로 새롭게 API 파일을 저장한다.

이때 중요한 것은 갑자기 전환하는 것이 아니라는 것이다. API 버전을 변경하면서 기존 사용자들에게 deprecated를 통해 새로운 버전으로 업그레이드하라는 메시지를 주어서 그들이 코드를 변경할 수 있게 약간의 텀을 두도록 한다.

기존 API 라우터는 일단 보류하고, 그 라우터 파일에는 deprecated를 app.use 메서드를 통해 옛 API를 사용하는 모든 주소에 미들웨어를 설정하도록 한다.

# CORS

서버에서 서버로 요청을 보낼 때와 달리 브라우저에서 서버로의 요청은 도메인이 일치하지 않을 때 오류가 발생한다.

이 문제를 **CORS**(Cross-Origin Resource Sharing) 예를 들어 요청을 보내는 클라이언트가 (localhost:4000), 요청을 받는 서버가 (localhost:8002)일 때 도메인이 다르므로 오류가 발생한다.

Method도 POST 원래 요청이었다면 OPTIONS으로 기록된다. OPTIONS 메서드는 실제 요청을 보내기 전에 서버가 이 도메인을 허용하는지 체크하는 역할을 한다.

CORS 문제를 해결하기 위해서는 응답 헤더에 Access-Control-Allow-Origin 헤더를 넣어야 한다. 이 헤더는 클라이언트 도메인의 요청을 허락하겠다는 뜻을 가지고 있다.

응답하는 서버 폴더에서 **`npm i cors`** 를 설치하여 해결할 수 있다.

```js
const cors = require('cors');
...
router.use(cors({
    credentials: true,
}));
```
router.use로 모든 라우터에 적용한다. 이제 응답에 Access-Origin-Allow-Origin 헤더가 추가되어 나간다. **credentials: true**라는 옵션을 활성화해야 **도메인 간에 쿠키가 공유**된다.

axios 에서도 도메인이 다른데, 쿠키를 공유해야 하는 경우 withCredentials: true 옵션을 줘서 요청을 해야 한다.

하지만, 요청을 보내는 주체가 클라이언트라서 비밀키(process.env.CLIENT_SECRET)가 모두에게 노출된다. CORS 요청도 허용했으므로 이 비밀 키를 가지고 다른 도메인들이 API 서버에 요청을 보낼 수 있다.

이를 방지하기 위해서는 처음에 비밀 키 발급 시 허용한 도메인을 적게하여, **호스트와 비밀 키가 모두 일치할 때만 CORS를 허용**하게 수정하면 된다. (ex. localhost: 4000 호스트가 발급한 client-secret)

```js
router.use(async (req, res, next) => {
    const domain = await Domain.findOne({
        where : { host: url.parse(req.get('origin')).host },
    });
    if (domain) {
        cors({
            origin: req.get('origin'),
            credentials: true,
        })(req, res, next);
    } else {
        next();
    }
});
```

클라이언트의 도메인(req.get('origin'))과 호스트가 일치하는 것이 있는지 검사한다 **(⭐req.get() 메서드는 요청의 헤더에서 원하는 것을 가져오는 요청임! 그래서 req.get('origin')으로 도메인을 가져올 수 있다⭐)**. http나 https 같은 프로토콜을 뗴어낼 때는 url.parse 메서드를 사용한다. 일치하는 것이 있어야 CORS를 허용해서 다음 미들웨어로 보낸다.

cors의 origin 속성에 허용할 도메인만 따로 적으면 된다. * 처럼 모든 도메인을 허용하는 대신 **기입한 도메인만 허용**. 여러 개의 도메인을 허용하고 싶다면 **배열**을 사용.

다 마친 후 비밀 키를 발급 받은 클라이언트로 접속하게 되면 응답 헤더의 Access-Origin-Allow-Origin이 * 대신 http://localhost:4000 으로 적용되어 있다.

# 미들웨어 커스터마이징

미들웨어 커스터마이징을 꼭 잘 알아둬서 헷갈리지 말자 아래의 두 코드 블럭은 같은 용도로 사용된다.

```js
router.use(cors());
```

```js
router.use((req, res, next) => {
    cors()(req, res, next);
});
```

같은 미들웨어라도 다르게 커스터마이징이 가능하다. 자주 나왔던 표현이니 꼭 알아둘 것.

**if문과 혼용하여 응용할 수 있음**

# 서버용 비밀 키와 클라이언트용 비밀 키

클라이언트와 서버에서 같은 키를 써서 문제가 될 수 있다. 왜냐하면 프런트에서 사용하는 비밀 키는 모든 사람에게 유출될 수 있기 때문이다.

카카오의 경우에는 REST API 키가 서버용 비밀 키이고, 자바스크립트 키가 클라이언트용 비밀 키이다.

> **프록시 서버**
> 
> 서버에서 서버로 요청을 보낼 때는 CORS 문제가 발생하지 않기 때문에 프록시(대리인) 서버를 사용할 수도 있다. 브라우저는 프록시 서버에 요청을 보내고 프록시 서버는 API 서버에 대신 요청을 한다. 이후 API서버는 프록시 서버에 응답을 보내고, 프록시 서버는 브라우저에 대신 응답을 보낸다.

## 7-2. 스토어드 함수와 커서

함수, 커서 -> 데이터베이스 개체

### 7-2-1. 스토어드 함수

#### 스토어드 함수의 개념과 형식

MySQL에서 사용자가 직접 함수를 만들어서 사용할 수 있다. 이렇게 직접 만들어서 사용하는 함수를 스토어드 함수라고 부른다.

```sql
DELIMITER $$
CREATE FUNCTION 스토어드_함수_이름(매개변수)
    RETURNS 반환형식
BEGIN

    이 부분에 프로그래밍 코딩
    RETURN 반환값;

END $$
DELIMITER ;
SELECT 스토어드_함수_이름();
```

* 스토어드 함수는 **RETURNS 문으로 반환할 데이터 형식을 지정**하고, 본문 안에서는 **RETURN 문으로 하나의 값을 반환**해야 한다.

* 스토어드 함수의 매개변수는 모두 **입력 매개변수**이다. 그리고 IN을 붙이지 않는다.

* 스토어드 함수는 SELECT 문 안에서 호출된다(스토어드 프로시저는 CALL로 호출).

* 스토어드 함수 안에서는 SELECT를 사용할 수 없다.

* 스토어드 함수는 어떤 계산을 통해서 하나의 값을 반환하는 데 주로 사용.

#### 스토어드 함수의 사용

스토어드 함수를 사용하기 위해서는 다음 SQL로 함수 생성 권한을 허용해줘야 한다.

```sql
SET GLOBAL log_bin_trust_function_creators = 1;
```

```sql
DELIMITER $$
CREATE FUNCTION sumFunc(number1 INT, number2 INT)
	RETURNS INT
BEGIN
	RETURN number1 + number2;
END $$
DELIMITER ;

SELECT sumFunc(100, 200) AS '합계';
```
RETURNS를 통해 반환하는 데이터 형식을 정수로 지정하고, RETURN을 통해 결과를 반환한다.

```sql
DROP FUNCTION IF EXISTS calcYearFunc;
DELIMITER $$
CREATE FUNCTION calcYearFunc(dYear INT)
	RETURNS INT
BEGIN
	DECLARE runYear INT; -- 활동기간(연도)
    SET runYear = YEAR(CURDATE()) - dYear;
    RETURN runYear;
END $$
DELIMITER ;

SELECT calcYearFunc(2015);
```

필요하다면 다음과 같이 함수의 반환 값을 `SELECT ~ INTO ~`로 저장했다가 사용할 수도 있다.

```sql
SELECT calcYearFunc(2007) INTO @debut2007;
SELECT calcYearFunc(2013) INTO @debut2013;
SELECT @debut2007 - @debut2013 AS '2007과 2013 차이';
```
위에서 만든 연도 함수를 통해 SELECT로 데이터를 조회할 때 함수를 활용하여 열의 정보를 변형한 채 불러올 수도 있다.

```sql
SELECT mem_id, mem_name, calcYearFunc(YEAR(debut_date)) AS '활동 햇수'
	FROM member;
```

SHOW가 데이터베이스 개체를 보기 위해 사용하는 메서드이기 때문에 스토어드 함수도 조회가 가능하다.

```sql
SHOW CREATE FUNCTION 함수_이름;
```

함수의 삭제도 마찬가지로 DROP을 통해 가능하다

```sql
DROP FUNCTION calcYearFunc;
```

### 7-2-2. 커서로 한 행씩 처리하기

#### 커서의 기본 개념

커서는 첫 번째 행을 처리한 후에 마지막 행까지 한 행씩 접근해서 값을 처리한다. 일반적으로 다음의 작동 순서를 통해 처리된다.

> 1. 커서 선언하기  
> ↓  
> 2. 반복 조건 선언하기  
> ↓  
> 3. 커서 열기  
> ↓  
> 4. 데이터 가져오기 & 데이터 처리하기 (**이 부분을 반복한다.**)  
> ↓  
> 5. 커서 닫기  

커서는 대부분 스토어드 프로시저와 함께 사용된다.

#### 커서의 단계별 실습

가수 그룹의 평균 인원수를 구하는 스토어드 프로시저를 작성.

1. **사용할 변수 준비하기**

회원의 평균 인원수를 계산하기 위해, 각 회원의 인원수(memNumber), 전체 인원의 합계(totNumber), 읽은 행의 수(cnt) 변수를 준비한다.

`DEFAULT` 문을 사용해서 초기값을 0으로 설정한다.

```sql
DECLARE memNumber INT;
DECLARE cnt INT DEFAULT 0;
DECLARE totNumber INT DEFAULT 0;
```

추가적으로 행의 끝을 파악하기 위한 변수 `endOfRow`를 준비한다. 처음은 행의 끝이 아닐 것이기 때문에 `DEFAULT FALSE`로 초기화한다.

```sql
DECLARE endOfRow BOOLEAN DEFAULT FALSE;
```

2. **커서 선언하기**

커서라는 것은 결국 SELECT문이다. 회원 테이블을 조회하는 구문을 커서로 만들어 놓으면 된다.

```sql
DECLARE memberCursor CURSOR FOR
    SELECT mem_number FROM member;
```

3. **반복 조건 선언하기**

향의 끝에 다다르면 앞에서 선언한 endOfRow 변수를 TRUE로 설정한다. **`DECLARE CONTINUE HANDLER`**는 반복 조건을 준비하는 예약어이다. 그리고 **`FOR NOT FOUND`**는 더 이상 행이 없을 때 이어진 문장을 수행한다. 즉, 행이 끝나면 endOfRow에 TRUE를 대입한다.

```sql
DECLARE CONTINUE HANDLER
    FOR NOT FOUND SET endOfRow = TRUE;
```

4. **커서 열기**

```sql
OPEN memberCursor;
```

5. **행 반복하기**

```sql
cursor_loop: LOOP
    이 부분을 반복
END LOOP cursor_loop
```

cursor_loop는 반복할 부분의 이름을 지정한 것이다. 이 코드는 무한 반복하기 때문에 코드 안에 반복문을 빠져나갈 조건이 필요하다. endOfRow가 행의 끝을 나타내는 변수이기 때문에 endOfRow를 TRUE가 되었을 때 반복문을 빠져나가도록 설계한다.

LEAVE는 반복할 이름을 빠져나간다.

```sql
IF endOfRow THEN
    LEAVE cursor_loop;
END IF;
```

`FETCH`는 한 행씩 읽어오는 것이다.

```sql
cursor_loop: LOOP
    FETCH memberCursor INTO memNumber;

    IF endOfRow THEN
        LEAVE cursor_loop;
    END IF;

    SET cnt = cnt + 1;
    SET totNumber = totNumber + memNumber;
END LOOP cursor_loop;
```

이제 반복을 빠져나왔고, 누적된 총 인원수를 읽은 행의 수로 나누면 된다.

```sql
SELECT (totNumber/cnt) AS '회원의 평균 인원 수';
```

6. **커서 닫기**

모든 작업이 끝나면 커서를 닫는다.

```sql
CLOSE memberCursor;
```

#### 커서의 통합 코드

```sql
USE market_db;
DROP PROCEDURE IF EXISTS cursor_proc;
DELIMITER $$
CREATE PROCEDURE cursor_proc()
BEGIN
	DECLARE memNumber INT;
    DECLARE totNumber INT DEFAULT 0;
    DECLARE cnt INT DEFAULT 0;
    DECLARE endOfRow BOOLEAN DEFAULT FALSE;
    
    DECLARE memberCursor CURSOR FOR
		SELECT mem_number FROM member;
	
    DECLARE CONTINUE HANDLER
		FOR NOT FOUND SET endOfRow = TRUE;
        
	OPEN memberCursor;
    
    cursor_loop: LOOP
		FETCH memberCursor INTO memNumber;
        
        IF endOfRow THEN
			LEAVE cursor_loop;
		END if;
        
        SET cnt = cnt + 1;
        SET totNumber = totNumber + memNumber;
	END LOOP cursor_loop;
    
    SELECT (totNumber/cnt) AS '회원의 평균 인원 수';
    
	CLOSE memberCursor;
END $$
DELIMITER ;

CALL cursor_proc();
```