---
layout: post
title:  "25 Feb TIL: js 함수(익명함수 등), SQL 기본 SELECT 문"
excerpt: "js 함수(익명함수 등), SQL SELECT"
date:   2022-02-25 19:00:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Chapter 5. 함수와 이벤트

## 5-1. 여러 동작을 묶은 덩어리, 함수

* 자주 실행해야 하는 기능에 포함된 명령이 여러 개일 때 그 명령을 한 번에 실행할 수 있게 만들 수 있습니다. 이것을 프로그래밍에서 **'함수(Function)'** 라고 합니다.

### 함수를 사용하면 왜 좋을까?

* 각 명령의 시작과 끝을 명확하게 구별할 수 있으며, 함수에 별도의 이름을 붙이면 같은 기능이 필요할 때마다 불러와 실행할 수 있다.

```js
function addNumber(a, b) {
    var sum = a + b;
}
```

### 함수를 정의하고 실행하기

* 프로그램에서는 함수가 어떤 명령을 처리해야 할지 미리 알려주는 것을 '함수 선언'이라 하고, 선언한 함수를 가져와 사용하는 것을 '함수 실행'이라 합니다.

* 함수를 선언할 때는 `function` 예약어를 사용하고 중괄호 ({})안에 함수에서 실행할 여러 명령을 묶습니다.

```js
function addNumber( ) {
  var sum = 10 + 20;
  console.log(sum);
}
```

* **함수 선언과 실행 순서는 프로그램 흐름에 영향을 주지 않습니다. 어느 곳이든 함수를 선언해 놓기만 하면, 선언한 위치와 상관 없이 함수를 실행할 수 있습니다.**


## 5-2 let과 constant로 변수 선언하기

* 자바스크립트 ES6 버전에서는 변수를 선언하기 위해 let과 const라는 새로운 예약어가 생겼습니다. var 예약어가 이미 있는데 왜 let과 const가 또 필요했을까요?

### 변수의 적용 범위 알아보기

* 자바스크립트에서 변수를 선언하고 사용할 때 변수가 적용되는 범위를 스코프(Scope)라고 합니다. 변수가 어디까지 유효한지 범위를 가리키는 영역이 있죠.

* 한 함수 안에서만 사용하고 다른 함수에서는 사용할 수 없는 변수가 있는가 하면, 어느 함수에서나 다 사용할 수 있는 변수가 있습니다. 한 함수 안에서만 사용할 수 있는 변수를 지역 변수 또는 로컬변수(Local Variable)라고 하고, 스크립트 소스 전체에서 사용할 수 있는 변수를 전역 변수 또는 글로벌 변수(Global Variable)라고 합니다.

* 예를 들어 A 함수의 실행 결괏값을 다른 함수에서도 실행할 수 있게 하려면 '전역 변수'로 지정해야 합니다. 프로그램 소스 어디에서나 사용할 수 있는 변수죠. 반면에 A 함수 안에서 사용하고 그대로 끝나는 변수라면 '지역 변수'로 지정합니다.

### 함수 안에서만 쓸 수 있는 지역변수

* 지역 변수는 함수 안에서 선언하고 함수 안에서만 사용합니다. 함수를 선언할 때  예약어 var와 함께 변수 이름을 지정해야 합니다.

```js
var myVar = 100;    // 전역 변수 선언
test();
document.write("myVar is " + myVar);

function test() {
    var myVar = 50; // 지역 변수 선언
}
```

* test 함수 밖에 변수가 myVar가 100으로 선언되어 있고, test() 함수 안에서 변수 myVar가 50으로 다시 선언되어 있습니다. 함수 안에 있는 변수 myVar 앞에는 예약어 var를 함께 선언했기 때문에 함수 안에서만 사용할 수 있는 지역 변수입니다. 즉 test() 함수 안에서는 변수 myVar에 50이 할당되지만 test() 함수를 벗어나면 그 값은 무효가 됩니다.

* 지역 변수는 전역 변수에 영향을 주지 않습니다. 하지만, 전역 변수와 지역 변수가 이름이 같다면 나중에 헷갈릴 수 있으므로 변수 이름은 겹치지 않게 하는 것이 좋습니다.

### 스크립트 안에서 자유롭게 쓸 수 있는 전역 변수

* 전역 변수란 스크립트 소스 전체에서 사용할 수 있는 변수를 말합니다. 즉, `<script>`와 `</script>` 사이에서 자유롭게 사용할 수 있는 변수입니다. 자유롭게 사용할 수 있다는 것은 변수를 한 번 선언하고 나면 그 값을 계속 유지한다는 것입니다. 함수 안에서 새롭게 전역 변수를 선언하려고 한다면 변수 이름 앞에 var 예약어를 사용하지 않으면 됩니다.

```js
var myVar = 100;    // 전역 변수 선언
test();
document.write("myVar is " + myVar);

function test() {
    myVar = 50;     // 전역 변수 선언
}
```

* 위의 경우 test() 함수 안에 있는 myVar 변수는 전역변수가 되어 최종 출력할 때 myVar 값이 50으로 표시됩니다.

### var를 사용한 변수의 특징

* 자바스크립트에서 var 변수를 사용할 때 조심해야 할 개념이 있습니다. 바로 호이스팅(hoisting)입니다. 호이스팅이란 '끌어올리다'라는 의미로 상황에 따라 변수의 선언과 할당을 분리해서 선언 부분을 스코프 가장 위쪽으로 끌어올리는 것입니다. 

```js
var x = 100;

test();

function test() {
    document.write("x is " + x + ", y is " + y)
    var y = 200;
}
```

* 위 코드가 화면에 출력되는 값은 "x is 100, y is undefined"입니다.

* 이런 결과가 나타난 것은 변수 호이스팅 때문인데, 자바스크립트 해석기는 함수 소스를 훑어보면서 var 변수를 따로 기억해둡니다. 즉, 변수를 실행하기 전이지만 '이런 변수가 있구나'하고 기억해두기 때문에 마치 선언한 것과 같은 효과가 있는 것이죠. var 변수는 호이스팅이 있기 때문에 변수를 선언하기 전에 사용해도 오류가 생기지 않고, 그로 인해 예상치 못한 결과가 나올 수 있습니다.

* var를 사용한 변수는 호이스팅 외에도 재선언이 가능하다는 단점이 있기 때문에 팀 프로젝트를 진행할 때 이전의 변수를 덮어쓰기에 예상하지 못한 결과가 발생할 수도 있습니다.

### let과 constant를 사용한 변수의 특징

* var 예약어를 빠뜨려 전역변수가 되거나 재선언하는 등의 문제가 발생할 수 있기에 ES6에서는 변수를 선언하기 위한 예약어로 let과 const가 추가되었습니다. 그 중 되도록이면 let 예약어를 사용할 것을 권장합니다.

* var과 let, const의 가장 큰 차이는 스코프의 범위입니다. var는 함수 영역(레벨)의 스코프를 가지지만 let과 const는 블록 영역의 스코프를 가집니다.

#### 블록 안에서만 쓸 수 있는 변수

* let 예약어로 선언한 변수는 변수를 선언한 블록({}로 묶은 부분)에서만 유효하고 블록을 벗어나면 사용할 수 없습니다.

```js
function calcSum(n) {
    let sum = 0;  // 블록 변수
    
    for(let i = 1; i < n + 1; i++) {
        sum += i;
    }
    console.log(sum);  // 블록 변수 사용
}

calcSum(10);
```

* `calcSum()` 함수에서 변수 sum은 let 예약어를 사용하여 선언하였기에 `calcSum()`의 블록({}) 안에서만 사용할 수 있습니다.

* 만약 전역 변수를 선언하고 싶다면 let 예약어를 쓰지 않고 변수 이름과 초깃값만 할당하면 됩니다.

```js
function calcSum(n) {
  sum = 0;  // 전역 변수
  
  for(let i = 1; i < n + 1; i++) {
    sum += i;
  }  
}

calcSum(10);
console.log(sum);  // 전역 변수 사용
```

#### 재할당은 가능하지만 재선언은 할 수 없는 변수

* let 예약어를 사용하여 선언한 변수는 값을 재할당할 수는 있지만 변수를 재선언할 수는 없습니다.

```js
function calcSum(n) {
  let sum = 0;
  
  for(let i = 1; i < n + 1; i++) {
    sum += i;
  }  
  let sum;  // 변수 재선언
  console.log(sum);
}

calcSum(10);
```

* 이 경우 두 번째로 선언한 sum 변수에 밑줄이 표시되고 오류 메시지 아이콘도 함께 나타납니다. 이렇듯 let으로 선언한 변수는 다시 선언할 수 없습니다.

#### 호이스팅이 없는 변수

* var 예약어를 사용한 변수는 선언하기 전에 실행하더라도 호이스팅 때문에, 오류도 생기지 않고 undefined 값을 가질 수 있습니다. 하지만, let 예약어를 사용한 변수는 선언하기 전에 사용할 경우 오류 메시지를 나타냅니다.

```js
var x = 100;

test();

function test() { 			
	document.write("x is " + x + ", y is " + y);
  let y = 200;
}
```

* 위의 경우 콘솔 창에서 'Cannot access 'y' before initialization at test'라는 오류가 발생합니다.

#### const 변수

* const로 선언한 변수는 상수입니다. 상수는 프로그램 안에서 변하지 않는 값을 뜻합니다. 즉, 변하지 않는 값을 변수로 선언할 때 const 예약어를 사용합니다. 프로그램 안에서 특정한 상숫값을 자주 사용한다면 변수에 담아서 사용하는 것이 편리합니다. const로 할당한 변수는 **재선언하거나 재할당할 수 없으며, let 예약어를 사용한 변수처럼 블록 레벨의 스코프를 가집니다.**

### 자바스크립트 변수, 이렇게 사용하세요

* 자바스크립트 문법을 벗어나지 않으면서 읽기 쉽고 오류도 쉽게 해결할 수 있는 변수 사용 방법 정리입니다.

#### 전역 변수는 최소한으로 사용한다.

> 전역 변수는 프로그램 어디서든 접근할 수 있으므로 편리하게 사용할 수 있지만, 예상하지 못한 곳에서 값이 달라질 수 있습니다. 

#### var 변수는 함수의 시작 부분에서 선언한다.

> var를 사용한 변수는 어디에서 선언하든 상관없지만 내부에서 호이스팅이 생기므로 오류가 발생할 수 있습니다. 그래서 var 변수는 함수 시작 부분에 선언하는 것이 변수를 확인하기도 쉽고 오류도 줄이는 방법입니다.

#### for문에서 카운터 변수를 사용할 때는 블록 변수를 사용하는 것이 좋다.

* for문에서 사용할 카운터 변수는 그 블록 안에서만 사용할 것이므로 블록 변수로 선언하는 것이 좋습니다.

```js
// 블록 밖에서 var로 선언
var i;
for(i = 1; i <= n; i++) {
    ...
}
```

```js
// let을 사용해서 블록 변수로 선언
for(let i = 1; i <= n; i++) {
    ...
}
```

* 위의 두 가지 방법으로 카운터 변수를 선언하는 것이 좋습니다.

#### ES6를 사용한다면 예약어 var보다 let를 사용하는 것이 좋다.

* 호이스팅 없고 재선언할 수 없는 let을 사용하는 것이 더 안전합니다.

## 5-3. 여러 번 사용할 수 있는 함수 만들기

### 함수의 매개변수와 인수 소개

#### 함수 선언할 때 매개변수 지정하기

* 함수를 실행하기 위해 필요하다고 지정하는 값을 매개변수(Parameter)라고 합니다. 매개변수를 지정하려면 함수를 선언할 때 함수 이름 옆의 괄호 안에 변수 이름을 넣어 주면 됩니다. 매개변수는 함수를 실행하는 데 필요한 '입력'이라고 생각하면 됩니다.

```js
function addNumber(a, b) {
    let sum = a + b;
    console.log(sum);
}
```

#### 함수를 실행할 때 인수 넘겨주기

* 함수를 실행할 때 매개변수로 넘겨주는 값을 '인수(Argument)'라고 합니다.

```js
addNumber(2, 3);      // 2, 3은 인수
addNumber(10, 20);    // 10, 20은 인수
```

#### 함수 매개변수 기본 값 지정하기

```js
function multiple(a, b = 5, c = 10) { // b = 5, c = 10로 기본값 지정
    return a * b + c;
}
multiple(5, 10, 20)
multiple(10, 20)
multiple(30)
```

### 함수의 return문 더 알아보기

* 함수 안에서 결괏값을 사용할 때도 있지만, 두 수를 더한 결괏값을 다른 계산에 적용하거나 콘솔창이 아닌 다른 곳에 표시해야 할 경우도 있습니다. 함수를 실행한 후 그 결괏값을 함수 밖으로 넘기는 것을 '함숫값을 반환한다(return)'라고 합니다.

* 반환 위치는 함수를 호출한 위치입니다. 함수 결괏값을 반환할 때는 return 예약어 다음에 넘겨줄 값이나 변수 또는 식을 지정합니다.

```js
var num1 = parseInt(prompt("첫 번째 숫자 : "));
var num2 = parseInt(prompt("두 번째 숫자 : "));
var result = addNumber(num1, num2);
alert("두 수를 더한 값은 " + result + "입니다.");

function addNumber(a, b) { 			
    var sum = a + b;
    return sum;
}
```

* 간단한 식인 경우 바로 return문에 식을 사용할 수 있습니다.

## 5-4. 함수 표현식

* 함수를 선언한 후 함수 이름을 사용해 실행하는 것이 기본 방법이지만, 이 외에도 '함수 표현식'을 통해 함수를 실행할 수도 있습니다.

### 익명 함수

* '익명 함수'는 이름이 없는 함수를 말합니다. 익명 함수를 선언할 때는 이름을 붙이지 않습니다. 익명 함수는 함수 자체가 '식(Expression)'이기 때문에 익명 함수를 변수에 할당할 수 있습니다. 또한 다른 함수의 매개변수로 사용할 수도 있습니다.

```js
var add = function(a, b) {    // 함수 선언 후 변수 add에 할당
    return a + b;
}
```

* 익명 함수를 실행하기 위해서는 이 변수 add를 함수 이름처럼 사용해서 익명 함수를 실행합니다.

```js
var sum = add(10, 20); // 익명 함수 실행 후 결괏값을 변수 sum에 저장
sum  // 변수 sum값 확인
```

### 즉시 실행 함수

* 함수를 식으로 표현하는 또 다른 방법은 '즉시 실행 함수'입니다. 즉시 실행함수는 **함수를 정의함과 동시에 실행하는 함수**입니다.

* 즉시 실행 함수의 표현은 함수 선언 전체를 괄호로 묶는다고 생각하면 쉽습니다. 그리고 소스를 닫는 괄호 앞이나 뒤에 인수가 들어갈 괄호를 넣습니다. 즉시 실행 함수는 식이기 때문에 소스 끝에 세미콜론(;)을 붙여 줍니다.

```js
(
  function() {
    ......
  }
)();
```
```js
(
  function() {
    ......
  }
());
```

여러 줄로 된 형태를 간단히 줄여서 다음과 같이 사용하기도 합니다.

```js
(function() {
  ......
})();
```
```js
(function() {
  ......
}());
```

* 즉시 실행 함수는 변수에 할당할 수 있고, 함수에서 반환하는 값을 변수에 할당할 수도 있습니다.

```js
var result = (function() {
    return 10 + 20;
}());
console.log(result)
```

```js
var result = (function(a, b) {    // 매개변수 추가
    return a + b;
}(10 + 20));    // 인수 추가
console.log(result);
```

### 화살표 함수

* ES6 버전부터는 => 표기법(화살표 표기법)을 사용해 함수 선언을 더 간단하게 작성할 수 있습니다. 이 방법은 간단히 화살표 함수라고 하는데 **익명 함수에서만 사용할 수 있습니다.**

#### 매개변수가 없을 때 =>로 함수 선언하기

```js
const hi = function() {
  return "안녕하세요?";
}
```
↓
```js
const hi = () => { return "안녕하세요?" };
```

* 중괄호 안에 함수 내용이 한 줄 뿐이라면 중괄호를 생략해서 다음과 같이 작성할 수도 있습니다. return문은 생략된 것으로 간주합니다.

```js
const hi = () => "안녕하세요? ";
```

#### 매개변수가 1개일 때 =>로 함수 선언하기

* 매개변수가 한 개일 때는 매개변수의 괄호를 생략해서 아래와 같이 표현할 수 있습니다.

```js
let hi  = function(user) {
    document.write(user + "님, 안녕하세요?");
}
```
↓
```js
let hi = user => document.write(user + "님, 안녕하세요?");
```

#### 매개변수가 2개 이상일 때 =>로 함수 선언하기

* 매개변수가 2개 이상일 때 함수를 화살표 함수로 바꾸려면 `(매개변수) => { ... }`처럼 사용하고, 괄호 안에 매개변수를 쉼표로 구분해서 넣습니다.

```js
let sum = function(a, b) {
    return a + b;
}
```
↓
```js
let sum = (a, b) => { return a + b };
```
↓ 식이 하나이기 때문에
```js
let sum = (a, b) => a + b;
```

## 5-5. 이벤트 다루기

* 자바스크립트 프로그램 안에서 함수가 스스로 실행되는 경우는 많지 않습니다. 사용자가 버튼을 누르거나 목록에서 항목을 선택했을 때 그에 해당하는 함수가 실행되도록 프로그램을 만드는 경우가 대부분입니다.

### 이벤트와 이벤트 처리기 간단히 살펴보기

* 이벤트(Event)란 웹 브라우저나 사용자가 행하는 어떤 동작을 말합니다. 키보드에서 키를 누르거나 브라우저가 웹 페이지를 불러오는 것 등도 이벤트입니다. 하지만 브라우저 안에서 이루어지는 동작이 모두 이벤트가 되지는 않습니다.

* 이벤트는 웹 문서 영역 안에서 이루어지는 동작만을 말합니다. 따라서 사용자가 웹 문서 영역을 벗어나 누르는 행위는 이벤트가 아닙니다.

#### 마우스 이벤트

> * click: 사용자가 HTML 요소를 마우스로 눌렀을 때 이벤트가 발생합니다.
> * dblclick: 사용자가 HTML 요소를 마우스로 두 번 눌렀을 때 이벤트가 발생합니다.
> * mousedown: 사용자가 요소 위에서 마우스 버튼을 누르는 동안 이벤트가 발생합니다.
> * mousemove: 사용자가 요소 위에서 마우스 포인터를 움직일 때 이벤트가 발생합니다.
> * mouseover: 마우스 포인터가 요소 위로 옮겨질 때 이벤트가 발생합니다.
> * mouseout: 마우스 포인터가 요소를 벗어날 때 이벤트가 발생합니다.
> * mouseup: 사용자가 누르고 있던 마우스 버튼에서 손을 뗄 때 이벤트가 발생합니다.

#### 키보드 이벤트

> * keypress: 사용자가 키를 눌렀을 때 이벤트가 발생합니다.
> * keydown: 사용자가 키를 누르는 동안 이벤트가 발생합니다.
> * keyup: 사용자가 키에서 손을 뗄 때 이벤트가 발생합니다.

#### 문서 로딩 이벤트

> * abort: 웹 문서가 완전히 로딩되기 전에 불러오기를 멈췄을 때 이벤트가 발생합니다.
> * error: 문서가 정확히 로딩되지 않았을 때 이벤트가 발생합니다.
> * load: 문서 로딩이 끝나면 이벤트가 발생합니다.
> * resize: 문서 화면 크기가 바뀌었을 때 이벤트가 발생합니다.
> * scroll: 문서 화면이 스크롤되었을 때 이벤트가 발생합니다.
> * unload: 문서를 벗어날 때 이벤트가 발생합니다.

#### 폼 이벤트

> * blur: 폼 요소에 포커스를 잃었을 때 이벤트가 발생합니다.
> * change: 목록이나 체크상태 등이 변경되었을 때 이벤트가 발생합니다( `<input>`, `<select>`, `<textarea>` 태그에서 사용합니다.).
> * focus: 폼 요소에 포커스가 놓였을 때 이벤트가 발생합니다(`<label>`, `<select>`, `<textarea>`, `<button>` 태그에서 사용합니다.).
> * reset: 폼이 다시 시작되었을 때 이벤트가 발생합니다.
> * submit: submit 버튼을 눌렀을 때 이벤트가 발생합니다.

#### 이벤트 처리기

* 대부분의 웹 사이트에서는 사용자가 어떤 동작을 하면, 즉 이벤트가 발생하면 연결 동작이 뒤따릅니다.

* 이를 위해서는 웹 문서에서 이벤트가 발생했을 때 어떤 함수를 실행해야 할지 웹 브라우저에 알려주어야 합니다. 이때 이벤트와 이벤트 처리 함수를 연결해 주는 것을 '이벤트 처리기' 또는 '이벤트 핸들러(Event Handler)`라고 합니다. 이벤트 처리기는 이벤트 이름 앞에 in을 붙여서 사용합니다. 예를 들어 click 이벤트가 발생했을 때 이벤트 처리기는 onclick 다음에 있는 실행 명령이나 함수를 연결합니다.

### `<button>` 태그에 이벤트 처리기로 함수 연결하기

```html
<button class="over" id="open" onclick="alert('눌렀습니다.')">상세 설명 보기</button>
```

```html
<button class="over" id="open" onmouseover="alert('마우스 커서를 올렸습니다.')">상세 설명 보기</button>
```

### [상세설명] 버튼 만들기

```html
<body>
	<div id="item">
		<img src="images/flower1.jpg" alt="">
		<button class="over" id="open" onclick="showDetail()">상세 설명 보기</button>
		<div id="desc" class="detail">
			
      ... 생략 ...

			<button id="close" onclick="hideDetail()">상세 설명 닫기</button>
		</div>
	</div>	
	<script src="js/event.js"></script>
</body>
```

### 여러 이벤트 처리기 연결하기

* 쇼핑몰 페이지에서 작은 상품 이미지 위로 마우스 커서를 가져갔을 때 큰 이미지가 표시되고, 작은 이미지를 누르면 상품 상세 페이지가 팝업창으로 나타나게 되는데, 이런 기능을 구현하려면 `onmouseover` 이벤트 처리기와 `onclick` 이벤트 처리기를 동시에 작동시켜야 합니다.

1. click 이벤트 처리하기
```js
var coverImage = document.querySelector("#cover");
coverImage.onclick = function() {
    alert("눌렀습니다.");
};
```

2. mouseover, mouseout 이벤트 처리하기
```js
coverImage.onmouseover = function() {
    coverImage.style.border = "5px black solid";
}

coverImage.onmouseout = function() {
    coverImage.style.border = "";
}
```

---

## 2-3. 데이터베이스 개체

* 테이블은 데이터베이스의 핵심 개체이지만, 그외에도 **인덱스, 뷰, 스토어드 프로시저**, 트리거, 함수, 커서 등의 개체도 필요합니다.

* 인덱스는 데이터를 조회할 때 결과가 나오는 속도를 획기적으로 빠르게 해주고, 뷰는 테이블의 일부를 제한적으로 표현할 때 주로 사용합니다. 스토어드 프로시저는 SQL에서 프로그래밍이 가능하도록 해주고, 트리거는 잘못된 데이터가 들어가는 것을 미연에 방지하는 기능을 합니다.

* 모든 데이터베이스 개체는 테이블과 상호 연관이 있습니다.

### 2-3-1. 인덱스

* 데이터를 조회할 때 테이블에 데이터가 많아질수록 결과가 나오는 시간이 많이 소요됩니다. 인덱스는 이런 경우 결과가 나오는 시간을 대폭 줄여줍니다.

#### 인덱스 개념 이해하기
  
* 인덱스란 책의 찾아보기와 비슷합니다. 찾아보기를 통해 원하는 단어를 찾아 그 페이지로 이동하는 효율적인 방법입니다.

* 실무에서는 수천만~수억 건 이상의 데이터를 처리할 때 인덱스 없이 전체 데이터를 찾을 수 없습니다.

#### 인덱스 실습하기

```SQL
CREATE INDEX idx_member_name ON member(member_name);
```

* 위 SQL 문장에서 `ON member(member_name);`의 의미는 member 테이블의 member_name 열에 인덱스를 지정하라는 의미입니다. 이를 통해 인덱스를 생성할 수 있습니다.

* 인덱스를 생성한 후 다시 SELECT문을 실행하면 **Non-Unique Key Lookup**으로 결과를 찾았다고 나오는데, Key Lookup은 인덱스를 통해 결과를 찾았다고 기억하면 됩니다. 이런 방법은 **인덱스 검색(Index Scan)** 이라고 부릅니다

### 2-3-2. 뷰

* 뷰를 활용하면 보안도 강화하고, SQL 문도 간단하게 사용할 수 있습니다.

#### 뷰 개념 이해하기

* 뷰(view)를 한 마디로 정의하면 '가상의 테이블'이라고 할 수 있습니다. 일반 사용자의 입장에서는 테이블과 뷰를 구분할 수 없습니다. 다만 뷰는 실제 데이터를 가지고 있지 않으며, 진짜 테이블에 링크(link)된 개념이라고 생각하면 됩니다.

* 윈도우즈의 '바로 가기 아이콘'과 같이 실제로 저장된 프로그램 파일과 아이콘을 연결해주는 맥락과 비슷합니다.

* 뷰는 실체는 없으며 테이블과 연결되어 있는 것뿐입니다. 뷰의 실체는 바로 SELECT문입니다.

#### 뷰 실습하기

```SQL
CREATE VIEW member_view
AS
    SELECT * FROM member;
```

* 위와 같은 식을 통해 VIEW를 생성할 수 있고, 이렇게 만들어놓은 뷰를 통해 정보를 확인할 수 있습니다.

```SQL
SELECT * FROM member_view;
```

* 뷰를 사용하는 이유는 **보안에 도움이 되며, 긴 SQL 문을 간략하게 만들 수 있기 때문입니다.**

### 2-3-3. 스토어드 프로시저

#### 스토어드 프로시저 개념 이해하기

* 스토어드 프로시저란 MySQL에서 제공하는 **프로그래밍 기능**으로, 여러 개의 SQL문을 하나로 묶어서 편리하게 사용할 수 있습니다.

#### 스토어드 프로시저 실습하기  

> 1. 자주 반복해서 사용할 SQL문이 있다고 할 때, 매번 SQL문을 입력하면 오타를 입력할 수도 있으며 시간이 오래 소요될 수 있습니다. 따라서 이러한 SQL문을 스토어드 프로시저로 만들어서 사용하는 것이 더 효율적일 것입니다.
> 
> 2.
> ```SQL
> DELIMITER //
> CREATE PROCEDURE myProc()
> BEGIN
>   	SELECT * FROM member WHERE member_name = '나훈아';
>     SELECT * FROM product WHERE product_name = '삼각김밥';
> END //
> DELIMITER;
> ```
> 
> * 첫 행과 마지막 행에 **구분 문자**라는 의미의 **`DELIMITER // ~ DELIMITER ;`** 문이 나왔습니다. 이것은 스토어드 프리시저를 묶어주는 약속이라고 생각합니다. 그리고 **BEGIN과 END** 사이에 SQL 문을 넣으면 됩니다.
> 
> 3. 이제부터 BEGIN과 END 사이의 SQL문을 실행할 필요 없이 만들어둔 스토어드 프로시저를 호출하기 위해서 CALL문을 실행하면 됩니다.
> 
> ```SQL
> CALL myProc()
> ```


### 2-3-4. CREATE 문과 DROP 문

* 데이터베이스 개체를 만들기 위해 `CREATE 개체_종류 개체_이름 ~`의 형식을 사용합니다.

* 이와 반대로 데이터베이스 개체를 삭제하기 위해서는 `DROP 개체_종류 개체_이름` 형식을 사용합니다.

# Chapter 3. SQL 기본 문법

## 3-1. 기본 중에 기본 SELECT ~ FROM ~ WHERE

* SELECT 문은 구축이 완료된 테이블에서 데이터를 추출하는 기능을 합니다. 그러므로 SELECT를 아무리 많이 사용해도 기존의 데이터가 변경되지는 않습니다.

* SELECT의 가장 기본 형식은 `SELECT ~ FROM ~ WHERE`입니다. SELECT 바로 다음에는 **열 이름**이, FROM 다음에는 **테이블 이름**이 나옵니다. WHERE 다음에는 **조건식**이 나오는데, 조건식을 다양하게 표현함으로써 데이터베이스에서 원하는 데이터를 추출할 수 있습니다.

### 3-1-1. 실습용 데이터베이스 구축

#### 실습용 데이터베이스 개요

* '인터넷 마켓 DB 구상도' 파일을 통해 실습 데이터를 구축.
* 생략

#### market_db.sql 파일 내용 살펴보기

```sql
DROP DATABASE IF EXISTS market_db; -- 만약 market_db가 존재하면 우선 삭제한다.
CREATE DATABASE market_db;

USE market_db;
CREATE TABLE member -- 회원 테이블
( mem_id  		CHAR(8) NOT NULL PRIMARY KEY, -- 사용자 아이디(PK)
  mem_name    	VARCHAR(10) NOT NULL, -- 이름
  mem_number    INT NOT NULL,  -- 인원수
  addr	  		CHAR(2) NOT NULL, -- 지역(경기,서울,경남 식으로 2글자만입력)
  phone1		CHAR(3), -- 연락처의 국번(02, 031, 055 등)
  phone2		CHAR(8), -- 연락처의 나머지 전화번호(하이픈제외)
  height    	SMALLINT,  -- 평균 키
  debut_date	DATE  -- 데뷔 일자
);
CREATE TABLE buy -- 구매 테이블
(  num 		INT AUTO_INCREMENT NOT NULL PRIMARY KEY, -- 순번(PK)
   mem_id  	CHAR(8) NOT NULL, -- 아이디(FK)
   prod_name 	CHAR(6) NOT NULL, --  제품이름
   group_name 	CHAR(4)  , -- 분류
   price     	INT  NOT NULL, -- 가격
   amount    	SMALLINT  NOT NULL, -- 수량
   FOREIGN KEY (mem_id) REFERENCES member(mem_id)
);

INSERT INTO member VALUES('TWC', '트와이스', 9, '서울', '02', '11111111', 167, '2015.10.19');
INSERT INTO member VALUES('BLK', '블랙핑크', 4, '경남', '055', '22222222', 163, '2016.08.08');
INSERT INTO member VALUES('WMN', '여자친구', 6, '경기', '031', '33333333', 166, '2015.01.15');
INSERT INTO member VALUES('OMY', '오마이걸', 7, '서울', NULL, NULL, 160, '2015.04.21');
INSERT INTO member VALUES('GRL', '소녀시대', 8, '서울', '02', '44444444', 168, '2007.08.02');
INSERT INTO member VALUES('ITZ', '잇지', 5, '경남', NULL, NULL, 167, '2019.02.12');
INSERT INTO member VALUES('RED', '레드벨벳', 4, '경북', '054', '55555555', 161, '2014.08.01');
INSERT INTO member VALUES('APN', '에이핑크', 6, '경기', '031', '77777777', 164, '2011.02.10');
INSERT INTO member VALUES('SPC', '우주소녀', 13, '서울', '02', '88888888', 162, '2016.02.25');
INSERT INTO member VALUES('MMU', '마마무', 4, '전남', '061', '99999999', 165, '2014.06.19');

INSERT INTO buy VALUES(NULL, 'BLK', '지갑', NULL, 30, 2);
INSERT INTO buy VALUES(NULL, 'BLK', '맥북프로', '디지털', 1000, 1);
INSERT INTO buy VALUES(NULL, 'APN', '아이폰', '디지털', 200, 1);
INSERT INTO buy VALUES(NULL, 'MMU', '아이폰', '디지털', 200, 5);
INSERT INTO buy VALUES(NULL, 'BLK', '청바지', '패션', 50, 3);
INSERT INTO buy VALUES(NULL, 'MMU', '에어팟', '디지털', 80, 10);
INSERT INTO buy VALUES(NULL, 'GRL', '혼공SQL', '서적', 15, 5);
INSERT INTO buy VALUES(NULL, 'APN', '혼공SQL', '서적', 15, 2);
INSERT INTO buy VALUES(NULL, 'APN', '청바지', '패션', 50, 1);
INSERT INTO buy VALUES(NULL, 'MMU', '지갑', NULL, 30, 1);
INSERT INTO buy VALUES(NULL, 'APN', '혼공SQL', '서적', 15, 1);
INSERT INTO buy VALUES(NULL, 'MMU', '지갑', NULL, 30, 4);

SELECT * FROM member;
SELECT * FROM buy;

```

> **데이터 베이스 만들기**
> ```sql
> DROP DATABASE IF EXISTS market_db;
> CREATE DATABASE market_db;
> ```
> 1. `DROP DATABASE`는 market_db를 삭제하는 문장입니다. 만약 이미 market_db가 존재하면 삭제합니다.
> 2. 데이터베이스를 새로 만듭니다.

> **회원 테이블(member) 만들기**
> ```sql
> USE market_db;
> CREATE TABLE member -- 회원 테이블
> ( mem_id  		CHAR(8) NOT NULL PRIMARY KEY, -- 사용자 아이디(PK)
>   mem_name    	VARCHAR(10) NOT NULL, -- 이름
>   mem_number    INT NOT NULL,  -- 인원수
>   addr	  		CHAR(2) NOT NULL, -- 지역(경기,서울,경남 식으로 2글자만입력)
>   phone1		CHAR(3), -- 연락처의 국번(02, 031, 055 등)
>   phone2		CHAR(8), -- 연락처의 나머지 전화번호(하이픈제외)
>   height    	SMALLINT,  -- 평균 키
>   debut_date	DATE  -- 데뷔 일자
> );
> ```
> (SQL에서 하이픈(-) 두 개는 주석으로 인식합니다.)
> 1. `USE`문은 market_db 데이터베이스를 선택하는 문장입니다.
> 2. `CREATE ~ );`는 member 테이블을 만드는 과정입니다.

> **구매 테이블(buy) 만들기**
> ```sql
> CREATE TABLE buy -- 구매 테이블
> (  num 		INT AUTO_INCREMENT NOT NULL PRIMARY KEY, -- 순번(PK)
>    mem_id  	CHAR(8) NOT NULL, -- 아이디(FK)
>    prod_name 	CHAR(6) NOT NULL, --  제품이름
>    group_name 	CHAR(4)  , -- 분류
>    price     	INT  NOT NULL, -- 가격
>    amount    	SMALLINT  NOT NULL, -- 수량
>    FOREIGN KEY (mem_id) REFERENCES member(mem_id)
> );
> ```
> 1. 구매 테이블을 생성합니다.
> 2. AUTO_INCREMENT는 자동으로 숫자를 입력해준다는 의미입니다.

> **데이터 입력하기**
> ```sql
> INSERT INTO member VALUES('TWC', '트와이스', 9, '서울', '02', '11111111', 167, '2015.10.19');
> INSERT INTO buy VALUES(NULL, 'BLK', '지갑', NULL, 30, 2);
> ```
> 1. 회원 테이블(member)에 값을 입력합니다. CHAR, VARCHAR, DATE형은 작은 따옴표로 값을 묶어줬습니다. INT형은 작은 따옴표 없이 그냥 넣어주면 됩니다.
> 2. 구매 테이블(buy)의 첫 번째 열인 순번(num)은 자동으로 입력되므로 NULL이라고 써주면 됩니다.

> **데이터 조회하기**
> ```sql
> SELECT * FROM member;
> SELECT * FROM buy;
> ```

### 3-1-2. 기본 조회하기: SELECT ~ FROM

#### USE문

* SELECT 문을 실행하려면 먼저 사용할 데이터베이스를 지정해야 합니다. 현재 사용하는 데이터베이스를 지정 또는 변경하는 형식은 다음과 같습니다.

```sql
USE 데이터베이스_이름;
```

#### SELECT 문의 기본 형식

```sql
SELECT 열_이름
    FROM 테이블_이름
    WHERE 조건식
    GROUP BY 열_이름
    HAVING 조건식
    ORDER BY 열_이름
    LIMIT 숫자
```

이중 가장 핵심적인 형식은 다음과 같습니다.

```sql
SELECT 열_이름
    FROM 테이블_이름
    WHERE 조건식
```

#### SELECT와 FROM

* `SELECT * FROM member;` : 테이블에서 모든 열(*)을 가져옵니다.
  
* 원래 테이블의 전체 이름은 **데이터베이스_이름.테이블_이름** 형식으로 표현합니다. 하지만 데이터베이스 이름을 생략하면 USE 문으로 지정해 놓은 데이터베이스가 자동으로 선택됩니다. 따라서 `SELECT * FROM market_db.member;`와 같은 의미를 가집니다.

* 특정 열을 가져오기 위해서는 SELECT와 FROM 사이에 원하는 열_이름을 작성하며, 여러 개일 경우에는 콤마(,)로 구분하고, 원하는 순서대로 나열할 수 있습니다.

```sql
SELECT addr, debut_date, mem_name
    FROM member;
```

**열 이름 다음에 지정하고 싶은 별칭(alias)를 입력할 수 있습니다.** Output은 별칭으로 된 열로 출력합니다. 별칭에 공백이 있다면 큰따옴표(")로 묶어줍니다.

```sql
SELECT addr 주소, debut_date "데뷔 일자", mem_name
    FROM member;
```

### 3-1-3. 특정한 조건만 조회하기: SELECT ~ FROM ~ WHERE

#### WHERE 없이 조회하기

* 조건 없이 모든 자료를 불러오면 리소스를 많이 소모하게 됩니다. 따라서 WHERE절을 함께 사용합니다.

#### 기본적인 WHERE 절

* WHERE 절은 조회하는 결과에 특정한 조건을 추가해서 원하는 데이터만 보고 싶을 때 사용합니다.

```sql
SELECT 열_이름 FROM 테이블_이름 WHERE 조건식;
```
또는
```sql
SELECT 열_이름
    FROM 테이블_이름
    WHERE 조건식;
```

* 지금 찾는 이름(mem_name)이 '블랙핑크'라면 다음과 같이 작성합니다. **열_이름 = 값**은 열의 값에 해당하는 결과만 출력해줍니다.

```sql
SELECT * FROM member WHERE mem_name = '블랙핑크';
```

#### 관계 연산자, 논리 연산자의 사용

* 숫자로 표현된 데이터는 범위를 지정할 수 있습니다. 예를 들어 평균 키(height)가 162 이하인 회원을 검색하려면 다음과 같이 **관계 연산자**를 사용해서 조회할 수 있습니다.

```sql
SELECT mem_id, mem_name
    FROM member
    WHERE height <= 162;
```

* 2가지 이상의 조건을 만족하도록 하기 위해선 **논리 연산자(AND, OR)** 를 이용해서 조회할 수 있습니다.

```sql
SELECT mem_name, height, mem_number
    FROM member
    WHERE height >= 165 AND mem_number > 6;
```

#### BETWEEN ~ AND

* 범위에 있는 값을 구하는 경우에 `BETWEEN ~ AND`를 사용해도 됩니다.

```sql
SELECT mem_name, height
    FROM member
    WHERE height BETWEEN 163 AND 165;
```

#### IN()

* 주소 등의 문자로 표현된 데이터는 여러 문자 중 하나에 포함되는지 비교하는 기능인 IN()을 사용할 수 있습니다

```sql
SELECT mem_name, addr
    FROM member
    WHERE addr IN('경기', '전남', '경남');
```

#### LIKE

* 문자열의 일부 글자를 검색하려면 LIKE를 사용합니다. "우%"와 같은 표현은 제일 앞 글자가 "우"인 모든 값을 허용한다는 뜻입니다.

```sql
SELECT *
    FROM member
    WHERE mem_name LIKE '우%';
```

* 한 글자와 매치하기 위해서는 **언더바(_)** 를 사용합니다.

```sql
SELECT *
    FROM member
    WHERE mem_name LIKE '__핑크';
```

### 3-1-4. 서브 쿼리

* SELECT 안에 또 다른 SELECT가 들어갈 수 있습니다.

* 예를 들어, SQL을 통해 에이핑크의 평균 키(height)를 알아보면

```sql
SELECT height FROM member WHERE mem_name = '에이핑크';
```

* 에이핑크의 평균 키를 알았으니 이 평균 키를 통해 164보다 키가 큰 회원을 조회하면 됩니다.

```sql
SELECT mem_name, height FROM member WHERE height > 164;
```

* 이 두 SQL을 하나로 만드는 것도 가능합니다.

```sql
SELECT mem_name, height FROM member
    WHERE height > (SELECT height FROM member WHERE mem_name = '에이핑크');
```

## 3-2. 좀 더 깊게 알아보는 SELECT문