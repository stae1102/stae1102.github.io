---
layout: post
title:  "02 Mar TIL: JS 브라우저 객체모델, 프로미스"
excerpt: "JS bom, promise"
date:   2022-03-02 22:49:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Chapter 10. 웹 브라우저를 다루는 방법, 브라우저 객체 모델

## 10-1. 브라우저 객체 모델이란?

### 브라우저 객체 모델 소개

웹 '브라우저' 전체를 객체로 관리하는 것을 **'브라우저 객체모델(Browser Object Model)'** 이라고 합니다. 브라우저 객체 모델은 자바스크립트 프로그램을 통해 브라우저 창을 관리할 수 있도록 브라우저 요소를 객체화해 놓은 것을 가리킵니다.

브라우저 창이 열리면 가장 먼저 Window 객체가 만들어지고, 그 하위에 브라우저 각 요소에 해당하는 객체가 만들어집니다. 이들 하위 객체는 웹 문서와 주소 표시줄처럼 브라우저의 각 요소에 해당하는 객체이며 각각 또 다른 하위 객체를 가지고 있습니다. 가장 최상위에는 Window 객체가 있으며, Window 객체를 시작으로 객체 모델 계층도가 시작됩니다. 웹 문서에 해당하는 Document 객체는 Window의 하위 객체로 웹 문서를 접근 수정할 때 사용합니다

> * Window: 브라우저 창이 열릴 때마다 하나씩 만들어지는 객체입니다. 브라우저 창 안에 존재하는 모든 요소의 최상위 객체입니다.
> * Document: 웹 문서에서 `<body>` 태그를 만나면 만들어지는 객체입니다. HTML 문서 정보를 가지고 있습니다.
> * History: 현재 창에서 사용자의 방문 기록을 저장하고 있는 객체입니다.
> * Location: 현재 페이지에 대한 URL 정보를 가지고 있는 객체입니다.
> * Navigator: 현재 사용 중인 웹 브라우저 정보를 가지고 있는 객체입니다.
> * Screen: 현재 사용 중인 화면 정보를 다루는 객체입니다.

## 10-2. 웹 브라우저를 제어하는 Window 객체

자바스크립트의 Window 객체는 웹 브라우저 창의 상태를 제어하는 객체로, 자바스크립트 객체 중 최상위이자 기본이 되는 객체입니다. 즉, 자바스크립트의 모든 객체는 Window 객체에 포함됩니다.

### Window 객체의 속성 알아보기

Window 객체에는 웹 브라우저 창과 관련된 여러 가지 속성이 있습니다. 이 속성에 접근해 브라우저 창의 정보를 가져올 수도 있고, 필요하면 값을 바꿀 수도 있습니다. 속성에 접근하는 방법은 다른 객체와 마찬가지로 객체 이름 뒤에 마침표(.)와 속성 이름을 붙이면 됩니다. 다음 표는 자주 사용하는 속성이며 모든 브라우저에서 호환됩니다.

> * document: 브라우저 창에 표시된 웹 문서에 접근할 수 있습니다.
> * frameElement: 현재 창이 다른 요소 안에 포함되어 있으면 그 요소를 반환합니다. 포함되어 있지 않으면 null을 반환합니다.
> * innerHeight: 내용 영역의 높이를 나타냅니다.
> * innerWidth: 내용 영역의 너비를 나타냅니다.
> * localStorage: 웹 브라우저에서 데이터를 저장하는 로컬 스토리지를 반환합니다.
> * location: Window 객체의 위치/현재 URL을 나타냅니다.
> * name: 브라우저 창의 이름을 가져오거나 수정합니다.
> * outerHeight: 브라우저 창의 바깥 높이를 나타냅니다.
> * outerWidth: 브라우저 창의 바깥 너비를 나타냅니다.
> * pageXOffset: 스크롤했을 때 화면이 수평으로 이동하는 픽셀 수. scrollX와 같습니다.
> * pageYOffset: 스크롤했을 때 화면이 수직으로 이동하는 픽셀 수. scrollY와 같습니다.
> * parent: 현재 창이나 서브 프레임의 부모 프레임입니다.
> * screenX: 브라우저 창의 왼쪽 테두리가 모니터 왼쪽 테두리에서부터 떨어져 있는 거리를 나타냅니다.
> * screenY: 브라우저 창의 위쪽 테두리가 모니터 위쪽 테두리에서부터 떨어져 있는 거리를 나타냅니다.
> * scrollX: 스크롤했을 때 수평으로 이동하는 픽셀 수를 나타냅니다.
> * scrollY: 스크롤했을 때 수직으로 이동하는 픽셀 수를 나타냅니다.
> * sessionStorage: 웹 브라우저에서 데이터를 저장하는 세션 스토리지를 반환합니다.

### Window 객체의 함수 알아보기

Window 객체는 기본 객체이기 때문에 window.를 생략하고 alert()라고 입력해도 사용할 수 있습니다. Window 객체의 다른 함수도 똑같이 window.를 생략한 채 함수 이름만으로 사용할 수 있습니다.

> * alert(): 알림 창(Alert Dialog)을 표시합니다.
> * blur(): 창에서 포커스를 제거합니다.
> * close(): 현재 열려 있는 창을 닫습니다.
> * confirm(): [확인], [취소]가 있는 확인 창을 표시합니다.
> * focus(): 현재 창에 포커스를 부여합니다.
> * moveBy(): 현재 창을 지정한 크기만큼 이동합니다.
> * moveTo(): 현재 창을 지정항 좌표로 이동합니다.
> * open(): 새로운 창을 엽니다.
> * postMessage(): 다른 창으로 메시지를 전달합니다.
> * print(): 현재 문서를 인쇄합니다.
> * prompt(): 프롬프트 창에 입력한 텍스트를 반환합니다.
> * resizeBy(): 지정한 크기만큼 현재 창 크기를 조절합니다.
> * resizeTo(): 동적으로 브라우저 창의 크기를 조절합니다.
> * scroll(): 문서에서 특정 위치로 스크롤합니다.
> * scrollBy(): 지정한 크기만큼 스크롤합니다.
> * scrollTo(): 지정한 위치까지 스크롤합니다.
> * setCursor(): 현재 창의 커서를 변경합니다.
> * showModalDialog(): 모달 창을 표시합니다.
> * sizeToContent(): 내용에 맞게 창 크기를 맞춥니다.
> * stop(): 로딩을 중지합니다.

**모달 창(Model Window)은 이벤트 정보나 공지 내용 등을 표시하기 위해 현재 브라우저 창 위에 띄우는 새로운 창을 말합니다. 문서 소스 안에 `<div>` 태그를 사용해 삽입하고 레이어로 표시한 창입니다. 따라서 웹 브라우저에서 알림 창을 차단하더라도 모달 창은 화면에 표시할 수 있습니다.

### 새 창을 여는 open() 함수

링크를 누르거나 웹 문서를 불러오자마자 자동으로 새 창이 뜨는 동작은 Window 객체의 open() 함수를 사용합니다. open() 함수에 열고 싶은 문서나 사이트 주소를 입력하면 웹 브라우저 창에 새 탭이 열리면서 연결된 문서나 사이트가 표시됩니다.

```js
window.open('https://www.daum.net');
```

open() 함수의 두 번째 매개변수는 새 창의 타깃(target)이나 윈도우 이름을 지정하는 부분입니다. 아무 값 없이 빈 따옴표만 넣을 경우 새 탭에서 사이트가 표시되며, **"_self"** 로 지정하면 현재 창에 새 창이 표시됩니다.

```js
window.open("https://www.daum.net", "_self");
```

open() 함수의 세 번째 매개변수는 알림 창으로 표시할 너비나 높이, 위치 등을 지정하는 옵션입니다. 콘솔 창에 다음과 같이 입력하면 화면 왼쪽 위(left=0, top=0)에 너비 300px, 높이 300px 크기로 열립니다.

```js
window.open("https://www.daum.net", "", "left=0, top=0, width=300, height=300");
```

### 크기를 조절하는 resizeBy(), resizeTo() 함수

resizeBy()는 **현재 브라우저 창의 크기를 기준으로 너비와 높이에 값을 더해줍니다**. 즉, 기존 창의 너비 값과 높이 값에 입력한 값을 각각 더해 브라우저 창의 크기를 새로 지정하는 것입니다.

```js
var newWin = window.open(" ", " ", "width=300, height=300");
newWin.resizeBy(100, 100);
newWin.resizeBy(-100, -100);
```
이처럼 사용했을 때 알림창의 크기를 증가시켰다가 다시 감소시킵니다.

resizeTo() 함수는 **최종 크기를 지정**합니다. 즉, 알림 창의 크기를 가로와 세로 각각 200 픽셀로 지정하려면 콘솔 창에 다음과 같이 입력하면 됩니다. resizeTo() 함수에서는 음수 값을 사용할 수 없습니다.

```js
newWin.resizeTo(200, 200);
```

### 위치를 조절하는 moveBy(), moveTo() 함수

moveBy() 함수와 moveTo() 함수는 모두 x 크기와 y 크기를 매개변수로 사용하는데, moveBy() 함수는 **현재 위치를 기준으로 가로로 x 픽셀만큼, 세로로 y 픽셀만큼 옮기지만**, moveTo() 함수는 **화면의 왼쪽 위 모서리를 기준으로 가로로 x 픽셀만큼, 세로로 y 픽셀만큼 옮깁니다.**

```js
newWin.moveBy(500, 500);
```
현재 위치를 기준으로 x 축 방향으로 500, y축 방향으로 500 픽셀만큼 이동합니다.

```js
newWin.moveTo(0, 0);
```
새로운 창을 0, 0 위치로 옮깁니다(좌상단).

## 10-3. 브라우저 정보가 담긴 Navigator 객체

Navigator 객체에는 웹 브라우저와 관련된 정보가 담겨 있습니다. 웹 브라우저 버전을 비롯해 웹 브라우저에 어떤 플러그인이 설치되어 있는지, 웹 브라우저가 온라인 상태인지 오프라인 상태인지 등 다양한 정보기 있습니다. 그래서 Navigator 객체를 사용하면 현재 웹 문서에 접속한 사용자가 크롬 브라우저를 사용했는지, 모바일로 접속했는지 등의 정보를 알 수 있습니다.

### 렌더링 엔진이란?

Navigator 객체는 렌더링 엔진의 이름을 보고 웹 브라우저 종류를 구별합니다. 렌더링 엔진(Rendering Engine)이란 브라우저에서 웹 문서를 화면에 표시하기 위해 웹 문서의 태그와 스타일을 해석하는 프로그램입니다. 웹 브라우저마다 내장된 렌더링 엔진이 다르기 때문에 HTML이나 CSS를 해석하는 방법이 다릅니다. 그래서 표준화되지 않은 CSS3 속성 앞에 -webkit- 또는 -oz- 같은 접두어(Prefix)를 붙여서 사용자가 접속한 브라우저에 맞게 렌더링합니다.

웹 브라우저에는 자바스크립트 소스를 해석하는 자바스크립트 엔진도 내장되어 있는데, 이것 역시 웹 브라우저마다 다릅니다. 사용하는 자바스크립트 엔진에 따라 웹 브라우저의 자바스크립트 처리 성능이 달라지기 때문에 해당 웹 브라우저가 어떤 자바스크립트 엔진을 사용하는지 기본으로 알아 두는 게 좋습니다.  

어떤 엔진을 사용하고 있는지 직접 확인해볼 수도 있습니다. 주소 표시줄에 **egde://version/** 을 입력하면 됩니다.

### Navigator 객체의 속성 알아보기

콘솔 창에 navigator를 입력하고 ▶를 누르면 Navigator 객체의 모든 정보가 한 눈에 표시됩니다.

> * appCodeName: 브라우저 이름(코드 이름)을 문자열로 반환합니다.
> * appName: 브라우저 공식 이름을 문자여로 반환합니다.
> * appVersion: 브라우저 버전을 문자열로 반환합니다.
> * battery: 배터리 충전 상태를 알려 주는 정보가 담긴 객체를 반환합니다.
> * connection: 브라우저 장치의 네트워크 정보가 담긴 객체를 반환합니다.
> * cookieEnabled: 쿠키 정보를 무시한다면 false, 그렇지 않다면 true를 반환합니다.
> * geolocation: 모바일 기기를 사용한 위치 정보가 담긴 객체를 반환합니다.
> * maxTouchPoints: 장치에서 동시에 터치 가능한 포인트가 몇 개인지 반환합니다.
> * platform: 브라우저 플랫폼 정보를 가지고 있는 문자열을 반환합니다.
> * userAgent: 현재 브라우저 정보가 있는 사용자 에이전트(User Agent) 문자열을 반환합니다.

### 사용자 에이전트 문자열로 자바스크립트 엔진 확인하기

Navigator 객체 정보 중 userAgent 속성을 보면 사용자의 웹 브라우저 버전은 물론 어떤 자바스크립트 엔진을 사용하는지 등의 정보도 알 수 있습니다.

사용자 에이전트 문자열은 클라이언트에서 서버로 정보를 보낼 때 클라이언트에서 함께 보내는 정보로, 서버에서는 이 정보를 보고 브라우저 종류를 확인한 후 그 브라우저에 맞게 웹 페이지를 표시합니다.

예를 들어 웹 사이트를 제작하는 경우에 인터넷 익스플로러 11 사용자가 웹 사이트에 접속했을 때 사용자에게 크롬 브라우저로 접속하라고 사이트에 알려줘야 한다면, 인터넷 익스플로러 11의 **사용자 에이전트 문자열**이 어떤 것인지 알고 있어야 합니다. 접속한 사용자 웹 브라우저 navigator.userAgent 값을 확인한 후 인터넷 익스플로러 11 값과 같은지 확인해야 하기 때문입니다.

#### 인터넷 익스플로러

인터넷 익스플로러는 넷스케이프 사용자 에이전트 문자열과 호환되도록 넷스케이프 네비게이터에서 사용하는 Mozilla 키워드를 함께 사용했습니다. 그리고 인터넷 익스플로러 11에서는 트라이덴트(Trident) 엔진을 사용하기 때문에 문자열에 그 내용도 포함되어 있습니다.

```
Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko
```

#### 엣지

윈도우용 마이크로소프트 엣지 버전의 사용자 에이전트 문자열에는 Chrome, Safari, Edge가 모두 있습니다. 그래서 크롬 브라우저나 사파리 브라우저보다 먼저 엣지 브라우저를 체크해야 합니다. 엣지 브라우저를 체크할 때는 사용자 에이전트 문자열에 Edge가 있는지 확인하면 됩니다.

```
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36 Edge/94.0.992.31
```

엣지나 크롬, 사파리 브라우저에서 사용하는 웹킷(Webkit) 엔진은 오픈 소스 렌저링 엔진인 KHTML에서 시작되었기 때문에 사용자 에이전트 문자열에 KHTML 엔진 이름이 함께 표시됩니다. 그리고 문자열에 있는 like Gecko는 게코 엔진을 사용하는 예전 웹 브라우저와 호환이 된다고 알려 주는 것입니다.

#### 크롬

윈도우용 크롬 브라우저 버전 6의 사용자 에이전트 문자열은 다음과 같습니다. 따라서 크롬 브라우저는 사파리 브라우저보다 먼저 체크해야 합니다. 크롬 브라우저인지 체크하려면 사용자 에이전트 문자열에 Chrome 문자열이 있는지 확인합니다.

```
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebkit /537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36
```

#### 사파리, 오페라

맥용 사파리 브라우저 9.1의 사용자 에이전트 문자열은 다음과 같습니다. 맥용 사파리 브라우저인지 확인하려면 Safari 문자열이 있는지 확인하면 됩니다.

```
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/601.7.7 (KHTML, like Gecko) Version/9.1.2 Safari/601.7.7
```

```js
var agent = navigator.userAgent.toLowerCase();  // userAgent 문자열을 소문자로 변환
var name = navigator.appName;

if(name == "Internet Explorer" || agent.indexOf("triden") > -1 || agent.indexOf("edg") > -1) {  // ie 이거나 엣지
  if(name == "Internet Explorer") document.write("IE 10 이하 버전입니다.");
  else {
    if (agent.indexOf("trident") > -1) document.write("IE 11 브라우저입니다.");
    else if (agent.indexOf("edg") > -1) document.write("MS Edge 브라우저입니다.");
  }
}
else if (agent.indexOf("safari") > -1) {  // 크롬이거나 사파리
  if(agent.indexOf("chrome") > -1) document.write("Chrome 브라우저입니다.");
  else if(agent.indexOf("safari") > -1) document.write("Safari 브라우저입니다.");
}
else if (angent.indexOf("firefox") > -1) document.write("Firefox 브라우저입니다.");
else if (agent.indexOf("opera") > -1) document.write("Opera  브라우저입니다.");
```

## 10-4. 그 밖의 브라우저 객체들

### History 객체 간단히 살펴보기

History 객체에는 브라우저에서 '뒤로', '앞으로' 또는 주소 표시줄에 입력해서 돌아다녔던 사이트 주소가 저장되어 있습니다. 보안 문제 때문에 브라우저에 있는 브라우저 히스토리는 읽기 전용입니다. 이 객체에서 사용할 수 있는 함수는 방문하면서 History 객체에 저장된 URL을 앞뒤로 이동하는 것입니다.

* 속성
> * length: 현재 브라우저 창의 History 목록에 있는 항목의 개수, 즉 방문한 사이트 개수를 반환합니다.

* 함수
> * back(): History 목록에서 이전 페이지를 현재 화면에 불러옵니다.
> * forward(): History 목록에서 다음 페이지를 현재 화면에 불러옵니다.
> * go(): History 목록에서 현재 페이지를 기준으로 상대 위치에 있는 페이지를 현재 화면에 불러옵니다. 예를 들어 history.go(1)은 다음 페이지를 가져오고, history.go(-1)은 이전 페이지를 불러옵니다.

### Location 객체 간단히 살펴보기

Location 객체는 브라우저의 주소 표시줄과 관련되어 있습니다. 즉, 현재 문서의 URL 주소 정보를 가지고 있는데, 이 정보를 편집하면 현재 브라우저 창에 열릴 사이트나 문서를 지정할 수 있습니다. 다음은 Location 객체의 속성과 함수입니다.

* 속성
> * hash: URL 중 #로 시작하는 해시 부분을 나타냅니다.
> * host: URL의 호스트 이름과 포트 번호를 나타냅니다.
> * hostname: URL의 호스트 이름을 나타냅니다.
> * href: 전체 URL입니다. 이 값을 변경하면 해당 주소로 이동할 수 있습니다.
> * pathname: URL 경로를 나타냅니다.
> * port: URL의 포트 번호를 나타냅니다.
> * protocol: http://나 ftp:// 같은 URL의 프로토콜을 나타냅니다.
> * password: 도메인 이름 앞에 username과 password를 함께 입력해서 접속하는 URL일 경우 password 정보를 저장합니다.
> * search: URL 중 ?(물음표)로 시작하는 검색 내용 부분을 나타냅니다.
> * username: 도메인 이름 앞에 username을 함께 입력해서 접속하는 사이트 URL일 경우 username 정보를 저장합니다.

* 함수
> * assign(): 현재 문서에 새 문서 주소를 할당해 새 문서를 가져옵니다.
> * reload(): 현재 문서를 다시 불러옵니다. 브라우저의 [새로 고침]과 같은 역할을 합니다.
> * replace(): 현재 문서의 URL을 지우고 다른 URL의 문서로 교체합니다.
> * toString(): 현재 문서의 URL을 문자열로 반환합니다.

replace는 현재 URL을 다른 URL로 대체하기 때문에 [이전] 버튼을 눌러도 이전 문서로 이동할 수 없습니다.

### Screen 객체 간단히 살펴보기

화면 크기나 정보를 알고 싶다면 Screen 객체를 사용하면 됩니다. Screen 객체는 주로 화면 정보를 알아낼 때 많이 사용하는 객체입니다. 여기에서 '화면'은 PC 모니터나 모바일 기기의 화면 자체를 말합니다. 다음 표는 Screen 객체의 속성입니다.

* 속성
> * availHeight: 화면에서 윈도우의 작업 표시줄이나 맥의 메뉴/독 같은 UI 영역을 제외한 부분의 높이를 나타냅니다.
> * availWidth: UI 영역을 제외한 부분의 너비를 나타냅니다.
> * colorDepth: 화면상에서 픽셀을 렌더링할 때 사용하는 색상 수를 나타냅니다.
> * height: UI 영역을 포함한 화면의 높이를 나타냅니다.
> * orientation: 화면의 현재 방향을 나타냅니다. 기본은 가로 방향입니다.
> * pixelDepth: 화면상에서 픽셀을 렌더링할 때 사용하는 비트 수를 나타냅니다.
> * width: UI 영역을 포함한 화면의 너비를 나타냅니다.

* 함수
> * lockOrientation: 화면 방향을 잠급니다.
> * unlockOrientation: 화면 방향 잠금을 해제합니다.

---

new Promise로 프로미스를 생성할 수 있으며, 그 내부에 resolve와 reject를 매개변수로 갖는 콜백 함수를 넣습니다.이렇게 만든 promise 변수에 then과 catch 메서드를 붙일 수 있습니다. 프로미스 내부에서 resolve가 호출되면 then이 실행되고, reject가 호출되면 catch가 실행됩니다. finally 부분은 성공/실패 여부와 상관없이 실행됩니다.

resolve와 reject에 넣어준 인수는 각각 then과 catch의 매개변수에서 받을 수 있습니다. 즉, **`resolve('성공')`이 호출되면 then의 message가 '성공'이 됩니다.** 만약 **`reject('실패')`가 호출되면 catch의 error가 '실패'가 되는 것입니다.** condition 변수를 false로 바꿔보면 catch에서 에러가 로깅됩니다.

프로미스를 쉽게 설명하자면, **실행은 바로 하되 결괏값은 나중에 받는 객체입니다.** 결괏값은 실행이 완료된 후 then이나 catch 메서드를 통해 받습니다. 위 예제에서는 new Promise와 promise, then 사이에 다른 코드가 들어갈 수도 있습니다. new Promise는 바로 실행되지만, 결괏값은 then을 붙였을 때 받게 됩니다.

then이나 catch에서 다시 다른 then이나 catch를 붙일 수 있습니다. **이전 then의 return 값을 다음 then의 매개변수로 넘깁니다.** 프로미스를 return한 경우에는 **프로미스가 수행된 후 다음 then이나 catch가 호출**됩니다.

```js
promise
    .then((message) => {
        return new Promise((resolve, reject) => {
            resolve(message);
        });
    })
    .then((message2) => {
        console.log(message2);
        return new Promise((resolve, reject) => {
            resolve(message2);
        })
    })
    .then((message3) => {
        console.log(message3);
    })
    .catch((error) => {
        console.log(error);
    });
```

처음 then에서 message를 resolve하면 다음 then에서 message2로 받을 수 있습니다. 여기서 다시 message2를 resolve한 것을 다음 then에서 message3으로 받았습니다. 단, then에서 newPromise를 return해야 다음 then에서 받을 수 있다는 것을 기억하세요.

이것을 활용해서 콜백을 프로미스로 바꿀 수 있습니다. 다음은 콜백을 쓰는 패턴 중 하나입니다. 이를 프로미스로 바꿔보겠습니다.

```js
function findAndSaveUser(Users) {
    Users.findOne({}, (err, user) => {  // 첫 번째 콜백
        if (err) {
            return console.error(err);
        }
        user.name = 'zero';
        user.save((err) => { // 두 번째 콜백
            if (err) {
                return console.error(err);
            }
            Users.findOne({ gender: 'm' }, (err, user) => { // 세 번째 콜백
                // 생략
            })
        })
    })
}
```

콜백 함수가 세 번 중첩되어 있습니다. 콜백 함수가 나올 때마다 코드의 깊이가 깊어집니다. 각 콜백 함수마다 에러도 따로 처리해줘야 합니다. 이 코드를 다음과 같이 바꿀 수 있습니다.

```js
function findAndSaveUser(Users) {
    Users.findOne({})
    .then((user) => {
        user.name = 'zero';
        return user.save();
    })
    .then((user) => {
        return Users.findOne({ gender: 'm' });
    })
    .then((user) => {
        // 생략
    })
    .catch(err => {
        console.error(err);
    });
}
```

코드의 깊이가 세 단계 이상 깊어지지 않습니다. 위 코드에서 then 메서드들은 순차적으로 실행됩니다. 콜백에서 매번 따로 처리해야 했던 에러도 마지막 catch에서 한 번에 처리할 수 있습니다. 하지만 모든 콜백 함수를 위와 같이 바꿀 수 있는 것은 아닙니다. 메서드가 프로미스 방식을 지원해야 합니다.

예제의 코드는 findOne과 save 메서드가 내부적으로 프로미스 객체를 가지고 있다고 가정했기에 가능합니다(new Promise가 함수 내부에 구현되어 있어야 합니다). 지원하지 않는 경우 콜백 함수를 프로미스로 바꿀 수 있는 방법은 3.5.6 절에 나와 있습니다.

프로미스 여러 개를 한 번에 실행할 수 있는 방법이 있습니다. 기존의 콜백 패턴이었다면 콜백을 여러 번 중첩해서 사용해야 했을 것입니다. 하지만 Promise.all을 활용하면 간단히 할 수 있습니다.

```js
const promise1 = Promise.resolve('성공1');
const promise2 = Promise.resolve('성공2');
Promise.all([promise1, promise2])
    .then((result) => {
        console.log(result); // ['성공1', '성공2'];
    })
    .catch((error) => {
        console.log(error);
    });
```

Promise.resolve는 즉시 resolve하는 프로미스를 만드는 방법입니다. 비슷한 것으로 즉시 reject하는 Promise.reject도 있습니다. 프로미스가 여러 개 있을 때 Promise.all에 넣으면 모두 resolve될 때까지 기다렸다가 then으로 넘어갑니다. result 매개변수에 각각의 프로미스 결괏값이 배열로 들어 있습니다. Promise 중 하나라도 reject가 되면 catch로 넘어갑니다.

### 2.1.8 async/await

노드처럼 비동기 위주로 프로그래밍을 해야 할 때 도움이 많이 됩니다. 프로미스가 콜백 지옥을 해결했다지만, 여전히 코드가 장황합니다. then과 catch가 계속 반복되기 때문입니다. async/await 문법은 프로미스를 사용한 코드를 한 번 더 깔끔하게 줄입니다.

2.1.7 절의 프로미스 코드를 다시 한 번 보겠습니다.

```js
function findAndSaveUser(Users) {
    Users.findOne({})
    .then((user) => {
        user.name = 'zero';
        return user.save();
    })
    .then((user) => {
        return Users.findOne({ gender: 'm' });
    })
    .then((user) => {
        // 생략
    })
    .catch(err => {
        console.error(err);
    });
}
```

콜백과 다르게 코드의 깊이가 깊어지진 않지만, 코드는 여전히 깁니다. async/await 문법을 사용하면 다음과 같이 바꿀 수 있습니다. async function이라는 것이 추가되었습니다.

```js
async function findAndSaveUser(Users) {
    let user = await User.findOne({});
    user.name = 'zero';
    user = await user.save();
    user = await User.findOne({ gender: 'm' });
    // 생략
}
```

놀라운 정도로 코드가 짧아졌습니다. 함수 선언부를 일반 함수 대신 async function으로 교체한 후, 프로미스 앞에 await을 붙였습니다. 이제 함수는 해당 프로미스가 resolve될 때까지 기다린 뒤 다음 로직으로 넘어갑니다. 예를 들명 await Users.findOne({})이 resolve될 때까지 기다린 다음에 user 변수를 초기화하는 것입니다.

위 코드는 에러를 처리하는 부분(프로미스가 reject된 경우)이 없으므로 다음과 같은 추가 작업이 필요합니다.

```js
async function findAndSaveUser(Users) {
    try {
        let user = await Users.findOne({});
        user.name = 'zero';
        user = await user.save();
        user = await Users.findOne({ gender: 'm'});
        // 생략
    } catch (error) {
        console.error(error);
    }
}
```

try/catch문으로 로직을 감쌌습니다. 프로미스의 catch 메서드처럼 try/catch문의 catch가 에러를 처리합니다.

화살표 함수도 async와 같이 사용할 수 있습니다.

```js
const findAndSaveUser = async (Users) => {
    try {
        let user = await Users.findOne({});
        user.name = 'zero';
        user = await user.save();
        user = await Users.findOne({ gender: 'm'});
        // 생략
    } catch (error) {
        console.error(error);
    }
};
```

for문과 async/await을 같이 써서 프로미스를 순차적으로 실행할 수 있습니다.

```js
const promise1 = Promise.resolve('성공1');
const promise2 = Promise.resolve('성공2');
(async () => {
    for await (promise of [promise1, promise2]) {
        console.log(promise);
    }
})();
```

for await of문을 사용해서 프로미스 배열을 순회하는 모습입니다. async 함수의 반환값은 항상 Promise로 감싸집니다. 따라서 실행 후 then을 붙이거나 또 다른 async 함수 안에서 await를 붙여서 처리할 수 있습니다.

```js
async function findAndSaveUser(Users) {
    // 생략
}
findAndSaveUser().then(() =< { /* 생략 */ }>);
// 또는
async function other() {
    const result = await fundAndSaveUser();
}
```

앞으로 중첩되는 콜백 함수가 있다면 프로미스를 거쳐 async/await 문법으로 바꾸는 연습을 하는 것이 좋습니다.