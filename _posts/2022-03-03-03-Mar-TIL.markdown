---
layout: post
title:  "03 Mar TIL: JS 배열 및 배열 함수, JSON 콜백, 프로미스, 비동기"
excerpt: "JS Array, Array function, JSON, callback, promise, async with await"
date:   2022-03-03 13:27:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Array

'use strict';

// Array

// 1. Declaration
```js
const arr1 = new Array();
const arr2 = [1, 2];
```

// 2. Index position
```js
const fruits = ['🍎', '🍌'];
console.log(fruits);
console.log(fruits.length);
console.log(fruits[0]);
console.log(fruits[1]);
console.log(fruits[2]);
console.log(fruits[fruits.length - 1]);
console.clear()
```

// 3. Looping over an array
// print all fruits
// a. for
```js
for (let i = 0; i < fruits.length; i++) {
    console.log(fruits[i]);
}
```
// b. for of
```js
for (let fruit of fruits) {
    console.log(fruit);
}
```
// c. forEach
```js
fruits.forEach((fruit) => console.log(fruit));
```
// 4. Addition, deletion, copy
// pust: add an item to the end
```js
fruits.push('🍓', '🍑');
console.log(fruits);
```
// remove an item from the end
```js
const poped = fruits.pop();
fruits.pop();
console.log(fruits);
```
// unshift: add an item to the beginning
```js
fruits.unshift('🍓', '🍋');
console.log(fruits);
```
// shift: remove an item from the beginning
```js
fruits.shift();
fruits.shift();
console.log(fruits);
```
// note!! shift, unshift are slower than pop, push
// splice: remove an item by index position
```js
fruits.push('🍓', '🍑', '🍋');
console.log(fruits);
fruits.splice(1, 1);
console.log(fruits);
fruits.splice(1, 1, '🍏', '🍉');
console.log(fruits);
```
// combine two arrays
```js
const fruits2 = ['🍐', '🥥'];
const newFruits = fruits.concat(fruits2);
console.log(newFruits);
```
// 5. Searching
// find the index
```js
console.clear();
console.log(fruits);
console.log(fruits.indexOf('🍎'));
console.log(fruits.indexOf('🍉'));
console.log(fruits.indexOf('🥥'));
```
// includes
```js
console.log(fruits.includes('🍉'));
console.log(fruits.includes('🥥'));
```
// lastIndexOf
```js
console.clear();
fruits.push('🍎');
console.log(fruits);
console.log(fruits.indexOf('🍎'));
console.log(fruits.lastIndexOf('🍎'));
```

# Array Function

// Q1. make a string out of an array
```js
{
  const fruits = ['apple', 'banana', 'orange'];
  const result = fruits.join(',');
  console.log(result);
}
```
// Q2. make an array out of a string
```js
{
  const fruits = '🍎, 🥝, 🍌, 🍒';
  const result = fruits.split(',');
  console.log(result);
}
```
// Q3. make this array look like this: [5, 4, 3, 2, 1]
```js
{
  const array = [1, 2, 3, 4, 5];
  const result = array.reverse();
  console.log(result);
  console.log(array);
}
```
// Q4. make new array without the first two elements
```js
{
  const array = [1, 2, 3, 4, 5];
  const result = array.slice(2, array.length);
  console.log(result);
  console.log(array);
}

class Student {
  constructor(name, age, enrolled, score) {
    this.name = name;
    this.age = age;
    this.enrolled = enrolled;
    this.score = score;
  }
}
const students = [
  new Student('A', 29, true, 45),
  new Student('B', 28, false, 80),
  new Student('C', 30, true, 90),
  new Student('D', 40, false, 66),
  new Student('E', 18, true, 88),
];
```
// Q5. find a student with the score 90
```js
{
  const result = students.find((student) => student.score === 90);
  console.log(result);
}
```
// Q6. make an array of enrolled students
```js
{
  const result = students.filter((student) => student.enrolled);
  console.log(result);
}
```
// Q7. make an array containing only the students' scores
// result should be: [45, 80, 90, 66, 88]
```js
{
  const result = students.map((student) => student.score);
  console.log(result);
}
```
// Q8. check if there is a student with the score lower than 50
```js
{
  console.clear();
  const result = students.some((student) => student.score < 50);
  console.log(result);

  const result2 = !students.every((student) => student.score < 50);
  console.log(result2);
  console.log(!true);
}
console.clear();
```
// Q9. compute students' average score
```js
{
  const result = students.reduce((prev, curr) => prev + curr.score, 0);
  console.log(result / students.length);
}
```
// Q10. make a string containing all the scores
// result should be: '45, 80, 90, 66, 88'
```js
{
  const result = students
    .map((student) => student.score)
    .filter((score) => score >= 50)
    .join();
  console.log(result);
}
```
// Bonus! do Q10 sorted in ascending order
// result should be: '45, 66, 80, 88, 90'
```js
{
  const result = students
  .map((student) => student.score)
  .sort((a, b) => b - a)
  .join();
  console.log(result);
}
```

# JSON

// JSON
// JavaScript Object Notation

// 1. Object to JSON
// stringify(obj)
```js
let json = JSON.stringify(true);
console.log(json);
```
```js
json = JSON.stringify(['apple', 'banana']);
console.log(json);
```

```js
const rabbit = {
    name: 'tori',
    color: 'white',
    size: null,
    birthDate: new Date(),
    jump: () => {
        console.log(`${name} can jump!`);
    },
};
```
```js
json = JSON.stringify(rabbit);
console.log(json);
```
```js
json = JSON.stringify(rabbit, ['name', 'color', 'size']);
console.log(json);
```
```js
json = JSON.stringify(rabbit, (key, value) => {
    console.log(`key: ${key}, value: ${value}`);
    return key === 'name' ? 'ellie' : value;
});
console.log(json);
```
// 2. JSON to Object
// parse(josn)
```js
console.clear();
json = JSON.stringify(rabbit);
console.log(json);
const obj = JSON.parse(json, (key, value) => {
    console.log(`key: ${key}, value: ${value}`);
    return key === 'birthDate' ? new Date(value) : value;
});
console.log(obj);
rabbit.jump();
```
// obj.jump();

```js
console.log(rabbit.birthDate.getDate());
console.log(obj.birthDate.getDate());
```

# Callback

```js
'use strict';
```

// Synchronous callback
```js
function printImmediately(print) {
    print();
}
```
// Asynchronous callback
```js
function printWithDelay(print, timeout) {
    setTimeout(print, timeout);
}
```
// JavaScript is synchronous.
// Execute the code block in order after hoisting.
// hoisting: var, function declaration
```js
console.log('1'); // 동기
setTimeout(()=>console.log('2'), 1000); // 비동기
console.log('3'); // 동기
```
```js
printImmediately(() => console.log('hello')); // 동기
printWithDelay(()=> console.log('async callback'), 2000); // 비동기
```
// Callback Hell example
```js
class UserStorage {
    loginUser(id, password, onSuccess, onError) {
        setTimeout(()=> {
            if (
                (id === 'ellie' && password === 'dream') ||
                (id === 'coder' && password === 'academy')
            ) {
                onSuccess(id);
            } else {
                onError(new Error('not found'));
            }
        }, 2000);
    }
    getRoles(user, onSuccess, onError) {
        setTimeout(() => {
            if (user === 'ellie') {
                onSuccess({ name: 'ellie', role: 'admin' });
            } else {
                onError(new Error('no access'));
            }
        }, 1000);
    }
}
```
```js
const userStorage = new UserStorage();
const id = prompt('enter your id');
const password = prompt('enter your password');
userStorage.loginUser(
    id,
    password,
    user => {
        userStorage.getRoles(
            user,
            userWithRole => {
                alert(`Hello ${userWithRole.name}, you have a ${userWithRole.role} role`);
            },
            error => {
                console.log(error);
            }
    );
    },
    error => {
        console.log(error)
    }
);
```

# Callback-to-promise

```js
class UserStorage {
    loginUser(id, password) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (
                    (id === 'ellie' && password === 'dream') ||
                    (id === 'coder' && password === 'academy')
                ) {
                    resolve(id);
                } else {
                    reject(new Error('not found'));
                }
            }, 2000);
        });
    }
    getRoles(user) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (user === 'ellie') {
                    resolve({ name: 'ellie', role: 'admin' });
                } else {
                    reject(new Error('no access'));
                }
            }, 1000);
        });
    }
}
```

```js
const userStorage = new UserStorage();
const id = prompt('enter your id');
const password = prompt('enter your password');
// userStorage
//     .loginUser(id, password)
//     .then(userStorage.getRoles)
//     .then(user => alert(`Hello ${user.name}, you have a ${user.role} role`))
//     .catch(console.log);
```
```js
async function login() {
    try{
        let userId = await userStorage.loginUser(id, password);
        userId = await userStorage.getRoles(userId);
        return alert(`Hello ${userId.name}, you have a ${userId.role} role`);
    } catch(error) {
        return console.log(error);
    }
}

login().then().catch();
```

---

# async/await

// async & await
// clear style of using promise :)

// 1. async
```js
async function fetchUser() {
    // do network request in 10 secs....
    return 'ellie';
}
```
```js
const user = fetchUser();
user.then(console.log);
console.log(user);
```
// 2. await
```js
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function getApple() {
    await delay(1000);
    return '🍎';
}

async function getBanana() {
    await delay(1000);
    return '🍌';
}

async function pickFruits() {
    const applePromise = getApple();
    const bananaPromise = getBanana(); // 병렬적으로 실행
    const apple = await applePromise;
    const banana = await bananaPromise;
    return `${apple} + ${banana}`;
}

pickFruits().then(console.log);
```
// 3. Useful Promise APIs
```js
function pickAllFruits() {
    return Promise.all([getApple(), getBanana()])
    .then(fruits => fruits.join(' + '));
}

pickAllFruits().then(console.log)

function pickOnlyOne() {
    return Promise.race([getApple(), getBanana()]);
}

pickOnlyOne().then(console.log)
```