---
layout: post
title: "16 Mar TIL: NodeJS 클라이언트 비밀 키"
excerpt: "jwt_secret, client_secret key"
date: 2022-03-16 14:39:00 +0900
categories:
  - Study
tags:
  - TIL
---

복습하며 다시 배운 내용들

- [jwt_token과 client_secret](#jwt_token과-client_secret)
- [api서버의 작동](#api서버의-작동)
  - [res.json 활용](#resjson-활용)
- [CORS](#cors)
- [서버 비밀 키와 클라이언트 비밀 키](#서버-비밀-키와-클라이언트-비밀-키)
- [테스트 기법](#테스트-기법)
  - [종류](#종류)
- [jest](#jest)
  - [test](#test)
  - [describe](#describe)
    - [모킹](#모킹)
    - [유닛 테스트](#유닛-테스트)
    - [데이터베이스 모킹](#데이터베이스-모킹)

# jwt_token과 client_secret

jwt는 시그니처 속에 비밀 키를 갖고 있다. 이 비밀 키는 각 서버 혹은 클라이언트가 api를 사용하기 위해 jwt.sign으로 도메인마다 토큰을 발급받을 때 전해지는데, 이 api 서버에서 받은 jwt 비밀 키를 통해서 토큰을 인증받고 api를 사용할 수 있게 된다.

또한, client_secret은 api서버의 데이터베이스에 저장된 도메인 중에서 client_secret과 일치하는 도메인을 찾기 위해 사용한다.

client_secret으로 데이터 베이스 속 도메인에 있는 정보와 일치하는 도메인을 찾고, 그 정보에 있는 유저 닉네임과 아이디를 jwt 비밀키와 함께 발급하는 것이다. 꽤나 복잡하다.

각각 jwt_secret과 client_secret은 api 서버의 .env, api 사용하는 개체의 .env 파일에 저장되어 있다.

# api서버의 작동

api 서버는 요청자의 토큰을 입력 대조해서 기능을 제공한다. 그래서 예를 들자면

```js
router.get('/posts/my', verifyToken, (req, res) => {
    Post.findAll({ where: { id: req.decoded.id } })
        .then((posts) => {
            console.log(posts);
            res.json({
                code: 200,
                payload: post,
            });
        })
        .catch((error) => {
            console.error(error);
            return res.status(500).json({
                code: 500,
                message: '서버 에러',
            });
        });
});
```

라우터는 GET /posts/my 라는 요청을 받고, 먼저 verifyToken 미들웨어를 거친다. 이것은 사전에 설정해둔 토큰 검사 미들웨어이다. 미들웨어를 거치면 요청의 헤더와 jwt 비밀키를 검사한 다음 디코딩을 거치기 때문에 Post.findAll({})에서 req.decoded에 저장된 id를 통해 게시물을 조회할 수 있게 된다.

만약 게시물이 있다면 then으로 넘어가서 payload를 json으로 응답을 보낸다.

우리가 마음대로 api 서버의 api를 사용하지 못하는 것은 요청을 아무리 보내도 lient_secret이 없고, jwt_token을 발급받지 못해 여기서 거부당하기 때문이다.

영화를 보기 위해선 예매를 해야 한다. 이때, 영화는 api이며 영화표는 토큰, 영화표에 적힌 바코드 혹은 아이디는 내가 산 물건임을 증명해주는 역할을 하고, 그 영화표에 적힌 내용에 이름이나 닉네임이 담기는 것이다.

## res.json 활용

그렇게 응답으로 온 json 파일은 (응답파일).data로 접근하여 정보를 사용할 수 있다. 예를 들어 json에 응답코드 내용(code: 200)을 보내면 클라이언트에서 `if json.data.code === 200`이런 식으로 조건을 세울 수 있는 것이다.

그래서 요청으로 응답받은 json 내용을 그대로 다시 프런트엔드에게 res.json(data)로 보내는 것이다.

# CORS

서버에서 서버로 url 주소에 요청을 넣었는데, 이와 달리 프런트에서 API를 요청하면 Access-Control-Allow-Origin이라는 헤더가 없다는 오류와 함께 에러가 발생한다. 즉 브라우저와 서버의 도메인이 일치하지 않는 것이다. API를 사용하는 서버는 다른 API 서버에서 기능을 대신 사용하기 때문에 오류가 발생한다.

이를 해결하기 위해서 응답 헤더에 Access-Control-Allow-Origin 헤더를 넣어야 한다. 이것은 클라이언트 도메인의 요청을 허락한다는 뜻이다.

이때 응답 헤더에서 모든 클라이언트의 요청을 허용한다고 하게 되면, 클라이언트 키를 모두가 볼 수 있기 때문에, 이 클라이언트 비밀 키를 통해서 다른 도메인도 API를 사용할 수 있게 된다. 그래서 호스트와 비밀 키가 모두 일치할 때 CORS를 허용하게 수정해야 한다.

이 역할은 API를 제공하는 서버에서 하면 된다. API 서버는 요청의 헤더에서 호스트를 받아오고 이 호스트를 데이터 베이스에 있는 도메인에 접목하여 도메인이 있을 때만 cors를 허용하게 한다.

# 서버 비밀 키와 클라이언트 비밀 키

서버 비밀 키와 클라이언트 비밀 키는 데이터베이스에 클라이언트 비밀 키 열을 새로 만들면 된다. 그렇게 하기 위해서는 SQL에서 Table을 드롭해서 새로 만들도록 해야 한다.

또한, 중요한 것은 기존에 클라이언트가 서버 비밀 키로 요청을 했기 때문에 프런트엔드의 요청 부분에서도 내용을 수정해야 한다는 것이 중요하다.

변수명을 처음부터 잘 설계하지 않으면 그것을 수정하기 위해 꽤 시간이 걸리기 때문에 **반드시 변수명은 처음부터 잘 설계하자**

# 테스트 기법

## 종류

테스트 기법은 유닛 테스트, 통합 테스트, 부하 테스트, 테스트 커버리지 체크 등이 있다.

# jest

페이스북에서 만든 오픈소스로, 테스팅에 필요한 툴들을 대부분 갖추고 있다.

npm i -D jest로 설치 후, 파일명과 확장자 사이에 test나 spec을 넣으면 된다.

package.json의 script에서 test 명령어로 등록하고 실행하면 파일명에 test나 spec이 들어간 파일들을 모두 찾아 실행한다.

## test

```js
test('1 + 1은 2입니다.', () => {
    expect(1 + 1).toEqual(2);
});
```
test 함수의 **첫 번째 인수**는 **테스트에 대한 설명**을 넣고, **두 번째 인수**인 함수에는 테스트 내용을 적는다. **expect** 함수의 인수로 **실제 코드**를, **toEqual** 함수의 인수로 **예상되는 결괏값**을 넣으면 된다.

테스트가 실패하면 정확히 어디서 틀렸는지 시각적으로 보여주기 때문에 테스트를 작성해두면 어떤 부분에 문제가 있는지 명확하게 파악할 수 있다.

## describe

### 모킹

test 함수와 동일하게 첫 번째 인수는 그룹에 대한 설명, 두 번째 인수인 함수는 그룹에 대한 내용이다.

test에서는 익스프레스에서 사용하는 객체와 함수 등을 이용할 수 없는데, 이럴 때 가짜 객체와 가짜 함수를 만들어서 넣는다. 테스트의 역할은 코드나 함수가 제대로 실행되는지를 검사하고 값이 일치하는지를 검사하는 것이므로, 값의 진위는 상관 없다.

이렇게 가짜 객체, 가짜 함수를 넣는 행위를 **모킹**(**mocking**)이라고 한다.

함수를 모킹할 때는 jest.fn 메서드를 사용한다. 함수의 반환값을 지정하고 싶다면 jest.fn(() => 반환값)을 사용하면 된다.

```js
describe('isLoggedIn', () => {
    const res = {
        status: jest.fn(() => res),
        send: jest.fn(),
    };
    const next = jest.fn();
    
    test('로그인되어 있으면 isLoggedIn이 next를 호출해야 함', () => {
        const req = {
            isAuthenticated: jest.fn(() => true),
        };
        isLoggedIn(req, res, next);
        expect(next).toBeCalledTimes(1);
    });
    
    test('로그인되어 있지 않으면 isLoggedIn이 에러를 응답해야 함', () => {
        const req = {
            isAuthenticated: jest.fn(() => false),
        };
        isLoggedIn(req, res, next);
        expect(res.status).toBeCalledWith(403);
        expect(res.send).toBeCalledWith('로그인 필요');
    });
});
```

res.status는 res.status(403).send('hello')처럼 메서드 체이닝이 가능하기 때문에 res를 반환하도록 되어 있다.

test 내부에 모킹된 객체와 함수를 사용해 isLoggedIn 미들웨어를 호출한 후 expect로 원하는 내용이 실행되었는지 체크하면 된다.

toBeCalledTimes(숫자)는 정확하게 몇 번 호출되었는지를 체크하는 메서드이다. toBeCalledWith(인수)는 특정 인수와 함께 호출되었는지를 체크하는 메서드이다.

### 유닛 테스트

위와 같이 작은 단위의 함수나 모듈이 의도된 대로 정확히 작동하는지 테스트하는 것을 **유닛 테스트**(**unit test**) 또는 **단위 테스트**라고 부른다. 나중에 함수를 수정하면 기존에 작성해둔 테스트는 실패하게 된다. 따라서 함수가 수정되었을 때 어떤 부분이 고장나는지를 테스트를 통해 알 수 있다.

### 데이터베이스 모킹

실제 코드와 테스트 코드를 통해 테스트를 할 때 간혹 데이터베이스 모델 때문에 테스트 환경에서 사용할 수 없는 경우가 있다. 이러한 경우에는 모델도 모킹해야 한다.