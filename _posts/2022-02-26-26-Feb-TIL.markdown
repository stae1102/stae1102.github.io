---
layout: post
title:  "26 Feb TIL: js 객체, SQL 데이터 변경"
excerpt: "js 객체, SQL 데이터 변경"
date:   2022-02-26 12:28:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Chapter 6. 여러 자료를 한꺼번에 담는 객체

## 6-1. 객체란?

* 객체를 흔히 '복합' 자료형이라고 부르는 이유는 객체 안에 숫자, 문자열 등 여러 가지 자료형이 포함되기 때문입니다. 하지만, 객체도 자료형이기 때문에 자바스크립트에서 객체는 자료를 저장하고 처리하는 기본 단위입니다. 

### 객체 간단히 살펴보기

* 사이트에 나열된 책들은 제목을 포함해서 이 책의 분야, 저자, 쪽수 등 여러 정보를 함께 담아 소개합니다. 이렇게 하나의 변수('책')에 다양한 정보를 담기 위해 사용하는 자료형이 객체입니다.(파이썬의 딕셔너리와 유사함)

```js
var book = {
    title: "자바스크립트",
    author: "홍길동",
    pages: 500,
    price: 15000
}
```

* 예를 들어 회원 정보를 저장하기 위해 회원 '객체'를 만들고 그 안에 아이디, 비밀번호, 가입 날짜 등을 저장하면 여러 곳에 저장하는 것보다 더 편하게 사용할 수 있습니다. 이처럼 자바스크립트를 사용해 웹 사이트나 애플리케이션의 자료를 다루려면 하나의 변수에 여러 정보를 저장할 수 있는 객체가 꼭 필요합니다.

### 자바스크립트에서 객체의 종류

* 자바스크립트는 웹 사이트나 웹 애플리케이션을 프로그래밍하는 언어이기 때문에 웹 브라우저나 웹 문서와 관련된 것들을 객체로 인식합니다. 

#### 내장 객체

* 자바스크립트 프로그래밍을 할 때 자주 사용하는 요소는 미리 객체로 정의되어 있습니다. 이런 객체를 '내장 객체(Built-in Object)'라고 합니다. 예를 들어 날짜나 시간과 관련된 프로그램을 작성할 때는 Date 객체를 사용해 현재 시각을 알아내고 그 정보를 손쉽게 가져다 사용할 수 있습니다. (Number, Boolean, Array, Math 등)

#### 문서 객체 모델(DOM)

* 객체를 사용해 웹 문서를 관리하는 방식을 '문서 객체 모델(DOM)'이라고 합니다. 문서 객체 모델에서는 웹 문서뿐만 아니라 웹 문서 안에 포함된 이미지·링크·텍스트 필드 등도 모두 각각 별도의 객체로 미리 만들어 놓았습니다. 여기에는 웹 문서 자체를 담는 Document 객체, 웹 문서 안의 이미지를 관리하는 Image 객체 등이 있습니다.

#### 브라우저 객체 모델

* 웹 문서를 관리하는 것이 문서 객체 모델이라면 웹 브라우저의 주소 표시줄이나 창 크기 등 웹 브라우저 정보를 객체로 다루는 것이 '브라우저 객체 모델'입니다. 브라우저 객체 모델에는 사용중인 브라우저 종류나 버전을 담고 있는 Navigator 객체, 브라우저에서 방문한 기록을 남기는 History 객체, 주소 표시줄 정보를 담고 있는 Location 객체, 화면 크기 정보가 들어있는 Screen 객체 등이 있습니다. 이들 객체를 사용하면 알림 창을 표시할 수도 있고, 사용자 동작에 따라 원하는 사이트로 이동하도록 지정할 수도 있습니다.

#### 사용자 정의 객체

* 앞에서 살펴본 내장 객체뿐만 아니라 사용자가 필요할 때마다 자신의 객체를 정의해서 사용할 수 있습니다. 예를 들어 앞에서 여러 가지 책의 정보를 담은 book도 사용자 정의 객체입니다.

### 객체의 속성과 메서드 알아보기

* 객체에서 값을 담고 있는 정보를 속성(Property)이라고 부릅니다. 속성은 내장 객체에도 만들어져 있습니다. **객체의 속성 값을 가져올 때는 객체 이름 뒤에 마침표(.)를 찍고 그 뒤에 속성 이름을 적습니다.**

* 예를 들어 Navigator의 속성을 알기 위해서 콘솔 창에 navigator를 입력하고 마침표까지 입력하면 사용 가능한 속성과 함수 목록이 나타납니다.

```js
navigator.vendor
```

* 객체에서 속성 말고도 중요한 개념이 있는데, 바로 '메서드(Method)'입니다. 메서드는 객체가 어떻게 동작할지를 선언해 놓은 함수입니다.

* 예를 들어 콘솔창에 Window 객체를 입력하면 `{postMessage: f, blur: f, foucs: f, ...}` 등의 요소가 나타는 데, 이렇게 객체 안에 미리 함수가 정의되어 있습니다. 이것은 객체 안에 정의된 함수이기 때문에 '메서드'라고 부릅니다.

* 속성을 사용할 때와 마찬가지로 객체의 메서드를 사용할 때도 마침표(.)를 사용해서 객체 이름 다음에 메서드를 지정하면 됩니다.(Window 객체는 모든 객체를 품고 있는 최상위 객체이기 때문에 Window 객체의 함수를 실행할 때는 winodw와 마침표를 빼고 `alert("내용")`처럼 함수 이름만 사용해서 실행해도 됩니다.)

### 객체의 프로토타입과 인스턴스 소개

* 웹 문서에 있는 요소를 프로그램에서 사용하려면 객체 형태여야 합니다. 예를 들어 웹 문서에 있는 이미지를 자바스크립트에서 다룰 때는 Image 객체를 사용합니다. Image 객체는 모든 웹 이미지가 공통으로 가지는 속성과 기능을 모아놓은 것입니다. 웹 이미지를 만들기 위한 기본 틀이라고 볼 수 있겠죠?

* 이런 틀을 **'프로토타입(Prototype)'** 이라고 합니다. 만약 웹 문서에 3개의 이미지를 포함시켜야 한다면 Image 객체를 사용해서 똑같은 모양의 객체 3개를 찍어낸 다음 객체마다 원하는 이미지를 담으면 됩니다. 이렇게 프로토타입을 사용해 만들어낸 객체는 **'인스턴스(Instance, =개별 객체)'** 라고 합니다.

### 객체의 인스턴스 만들기

* 객체의 인스턴스를 만들 때, 즉 객체를 똑같이 찍어 새 객체를 만들 때는 new 예약어를 사용합니다. new 예약어 뒤에 프로토타입 객체 이름과 괄호 ()를 써주면 됩니다.

> **Date 프로토타입 객체를 사용해 인스턴스 만들기**
> ```js
> var now = new Date()
> ```
> now는 이제 Date 객체의 인스턴스이므로, Date 객체에서 정의한 속성과 함수를 모두 사용할 수 있습니다.
> ```js
> now.toLocaleString()
> ```

### 내장 객체로 무작위 수 프로그램 만들기

* 무작위 수를 만들기 위해서 내장 객체를 통해 더욱 편리하게 무작위 수를 생성할 수 있습니다.

```js
Math.random()
```

* 만일 1부터 100까지의 숫자 중에서 무작위 수를 구하려면 `Math.random()`으로 생성한 수에 100을 곱한 후 1을 더해줍니다. 무작위 수가 정수여야 한다면, 소수점 이하를 버리는 메서드인 floor() 함수를 사용합니다.

```js
Math.floor(Math.random() * 100 + 1)
```

## 6-2. 사용자 정의 객체 만들기

* 필요하다면 사용자가 직접 객체를 만들어 사용할 수 있습니다. 이처럼 사용자가 직접 만든 객체를 '사용자 정의 객체'라고 합니다. 자바스크립트에서 객체를 만드는 방법 중 가장 많이 사용하는 객체 리터럴과 생성자 함수를 사용하는 방법을 알아보겠습니다.

### 리터럴 표기법을 사용해 객체를 만드는 방법

* 리터럴(Literal)이란 프로그래밍에서 자료를 표기하는 방식을 말합니다. 리터럴을 사용해서 표기한다는 것은 변수를 선언하면서 동시에 값을 지정해주는 표기 방식을 말합니다. 아래와 같이 변수를 선언하는 동시에 값을 지정하는 것이 리터럴 표기법입니다.

```js
var a = 10;
```

* 그렇다면 '객체 리터럴 표기법'이란 객체를 선언하면서 동시에 값을 지정해 주는 것으로 추측할 수 있겠죠? 객체 리터럴을 사용해 객체를 정의할 때는 중괄호 {} 안에 '속성 이름:값'을 하나의 쌍으로 지정합니다. 속성이 여러 개일 경우 '속성 이름:값' 쌍마다 쉼표(,)를 넣어 구분합니다. 함수 또한 '함수 이름:' 다음에 함수를 정의하며, '함수 이름:function(){···}' 형식을 사용합니다.

```js
var book = {
    title: "자바스크립트",
    author: "고쌤",
    pages: 500,
    price: 15000,
    info: function() {
        alert(this.title + "책의 분량은 " + this.pages + "쪽입니다.");
    }
}
```

* 프로그램에서 book 객체를 만들어 사용하다가 새로운 속성을 추가할 수 있습니다. 예를 들어 book 객체에 분야 정보를 추가하고 싶다면 다음과 같은 방법으로 field 속성을 추가한 다음 원하는 값을 넣으면 됩니다.

```js
book.field = "IT"
```

### 생성자 함수를 사용해 객체를 만드는 방법

* 리터럴 표기법을 사용해 객체를 만드는 방법은 정해진 값을 가진 객체를 한 번만 만들어 냅니다. 만약 이 방법으로 프로그램을 만든다면 매번 객체와 똑같은 속성과 함수를 입력하고, 책마다 그 값을 다르게 넣어 새롭게 객체를 만들어야 합니다. 이럴 때 항상 필요한 속성과 함수는 틀처럼 미리 만들어 두고, 필요할 때마다 그 틀을 복제한 인스턴스를 만들어 책 정보 값을 담는 것이 편리합니다. 이때 생성자 함수를 사용해 객체를 만듭니다.(리터럴 표기법을 사용한 방법은 객체 틀을 만들지 않고 개별적으로 객체를 선언하고 사용하는 방법)

* **생성자 함수**란 객체를 만들어 내는 함수를 말합니다. 이 또한 함수이므로 function 예약어를 사용해 선언합니다. 생성자 함수 안에 객체의 속성과 함수를 정의할 때는 this 예약어 다음에 마침표와 속성 이름을 입력합니다. *여기서 this가 가리키는 것은 선언하고 있는 객체 자체입니다.

* 객체의 속성은 객체에서 사용하는 변수, 객체의 함수는 해당 객체에서 사용하는 함수라고 생각하면 쉽습니다.

```js
function Book(author, pages, price, title) {
    this.author = author;
    this.pages = pages;
    this.price = price;
    this.title = title;
}
```

* 이렇게 Book 객체를 만들었다면 다음과 같이 인스턴스를 만들 수 있습니다.

```js
jsBook = new Book("홍길동", 500, 15000, "자바스크립트")   // 인스턴스 만들기
jsBook.title
```

### 생성자 함수로 도서 목록 객체 만들기

```js
function Book(title, author, volume, price) {
    this.title = title;     // 제목
    this.author = author;   // 저자
    this.volume = volume;   // 분량
    this.price = price;     // 가격
}

var html = new Book('웹 표준의 정석', 'Ko', '608', '28,000');
var youtube = new Book('유튜브 영상 만들기', 'Kim', '368', '16,000');
var python = new Book('점프 투 파이썬', 'Park', '352', '18,800');

var bookList = [html, youtube, python];

document.write("<h1>책 제목으로 살펴보기</h1>");
for(var i=0; i<bookList.length; i++) {
    document.write("<p>" + bookList[i].title + "</p>");
}
```

## 6-3. Date 객체를 활용해 기념일 계산기 만들기

### Date 객체의 주요 함수 알아 두기

* 함수 이름 앞에 get이나 set이 붙어 있는데, get은 '가져온다'는 의미이고 set은 '두다, 설정하다'는 의미입니다.

#### 날짜/시간 정보를 가져오는 함수

> * getFullYear(): 날짜 정보에서 연도(Year) 정보를 가져와 네 자리 숫자로 표시합니다.
> * getMonth(): 날짜 정보에서 '월(Month)' 정보를 가져옵니다. 이때 0~11의 숫자로 월을 표시합니다. 0부터 1월이 시작되고 11은 12월입니다.
> * getDate(): 날짜 정보에서 며칠인지 알 수 있는 '일(Date)' 정보를 가져옵니다.
> * getDay(): 날짜 정보에서 '요일(Day)' 정보를 가져옵니다. 이때 요일 정보는 0~6의 숫자로 표시되는데, 0은 '일요일'에 해당하고 6은 '토요일'에 해당합니다.
> * getTime(): 1970년 1월 1일 자정 이후의 시간을 밀리초로 표시합니다. 밀리초는 1/1000 초를 가리킵니다.
> * getHours(): 0~23의 숫자로 시를 표시합니다.
> * getMinutes(): 0~59의 숫자로 분을 표시합니다.
> * getSeconds(): 0~59의 숫자로 초를 표시합니다.
> * getMilliseconds(): 0~999의 숫자로 밀리초를 표시합니다.

#### 날짜/시간 정보를 설정하는 함수

> * setFullYear(): 연도를 네 자리 숫자로 설정합니다.
> * setMonth(): 0~11의 숫자로 월을 표시합니다. 0부터 1월, 11은 12월입니다.
> * setDate(): 1~31의 숫자로 일을 설정합니다.
> * setTime(): 1970년 1월 1일 자정 이후의 시간을 밀리초로 설정합니다.
> * setHours(): 0~23의 숫자로 시를 설정합니다.
> * setMinutes(): 0~59의 숫자로 분을 설정합니다.
> * setSeconds(): 0~59의 숫자로 초를 설정합니다.
> * setMilliseconds(): 0~999의 숫자로 밀리초를 설정합니다.

### 현재 날짜와 시간 정보 가져오기

```js
var now = new Date()
now.getDate()
```

위와 같이 Date 객체의 인스턴스를 만들고 객체의 속성과 함수를 사용합니다.

---

## 3-2. 좀 더 깊게 알아보는 SELECT문

* SELECT문에서는 결과의 정렬을 위한 **ORDER BY**, 결과의 개수를 제한하는 **LIMIT**, 중복된 데이터를 제거하는 **DISTINCT** 등을 사용할 수 있습니다.

* **GROUP BY** 절은 지정한 열의 데이터들을 같은 데이터끼리 묶어서 결과를 추출합니다. 주로 그룹으로 묶는 경우는 합계, 평균, 개수 등을 처리할 때 사용하므로 집계 함수와 함께 사용합니다. GROUP BY 절에서도 HAVING 절을 통해 조건식을 추가할 수 있습니다. **HAVING**절은 WHERE 절과 비슷해보이지만 GROUP BY 절과 함께 사용되는 것이 차이점입니다.

### 3-2-1. ORDER BY 절

```sql
SELECT 열_이름
    FROM 테이블_이름
    WHERE 조건식
    GROUP BY 열_이름
    HAVING 조건식
    ORDER BY 열_이름
    LIMIT 숫자
```

* ORDER BY 절은 결과가 출력되는 순서를 조절합니다.

```sql
SELECT 열_이름
    FROM 테이블_이름
    ORDER BY 열_이름;
```

* 기준 열을 오름차순으로 정리하기 위해서는 **ASC**를, 아닌 내림차순으로 정리하기 위해서는 **DESC**를 제일 뒤에 붙여줍니다.

```sql
SELECT 열_이름
    FROM 테이블_이름
    ORDER BY 열_이름 DESC;
```

* ORDER BY 절도 WHERE절과 함께 사용하여 조건에 맞는 값을 추출해 순서대로 데이터를 확인할 수 있습니다.

```sql
SELECT 열_이름
    FROM 테이블_이름
    WHERE 조건식
    ORDER BY 열_이름;
```

* 그런데 종종, 기준 열의 행 값이 같은 데이터가 있을 수 있는데, 이럴 때 또 다른 기준으로 정렬하기 위해서 여러 개의 열이 필요할 때가 있습니다. 이럴 때는 콤마(,)를 통해 원하는 순서에 따라 열을 적어주면 됩니다.

```sql
SELECT 열_이름
    WHERE 조건식
    ORDER BY 첫_번째_열, 두_번째_열;
```

#### 출력의 개수를 제한: LIMIT

* **LIMIT**는 출력하는 개수를 제한합니다.

```sql
SELECT 열_이름
    FROM 테이블_이름
    LIMIT 제한 개수;
```

* ORDER BY와 함께 정렬한 후 사용하는 것이 일반적입니다.

* LIMIT 형식은 **LIMIT 시작, 개수**입니다. `LIMIT 3`과 같이 쓸 때는 `LIMIT 0, 3`과 동일한 의미입니다. 즉, 0번째부터 3건이라는 의미입니다.

* LIMIT 시작, 개수는 **LIMIT 개수 OFFSET 시작**이라고 쓰는 것과 동일합니다. 또한 LIMIT는 첫 데이터를 0번으로 설정하고 시작합니다.

#### 중복된 결과를 제거: DISTINCT

* **DISTINCT**는 조회된 결과에서 중복된 데이터를 1개만 남깁니다. 열 이름 앞에 DISTINCT를 써주기만 하면 중복된 데이터를 1개만 남기고 제거합니다.

```sql
SELECT DISTINCT 열_이름 FROM 테이블_이름;
```

### 3-2-2. GROUP BY 절

* GROUP BY 절은 말 그대로 그룹으로 묶어주는 역할을 합니다. 집계함수는 주로 GROUP BY 절과 함께 쓰이며, 데이터를 그룹화(grouping)해주는 기능을 합니다.

#### 집계 함수

> * SUM(): 합계를 구합니다.
> * AVG(): 평균을 구합니다.
> * MIN(): 최솟갑을 구합니다.
> * MAX(): 최댓값을 구합니다.
> * COUNT(): 행의 개수를 셉니다.
> * COUNT(DISTINCT): 행의 개수를 셉니다(중복은 1개만 인정).

* 각 회원별로 구매한 개수를 합쳐서 출력하기 위해서는 집계함수인 SUM()과 GROUP BY 절을 사용하면 됩니다. 즉, GROUP BY로 회원별로 묶어준 후에 SUM() 함수로 구매한 개수를 합치면 됩니다.

```sql
SELECT mem_id, SUM(amount) FROM buy GROUP BY mem_id;
```

* 전체 회원이 구매한 물품 개수의 평균을 구하기 위해서 `SELECT AVG(amount) "평균 구매 개수" FROM buy`를 하고, 그룹별 평균을 위해서는 `SELECT mem_id, AVG(amount) "평균 구매 개수" FROM buy GROUP BY mem_id;`와 같이 표현하는데 GROUP BY의 유무에 따라 달라지는 것을 확인할 수 있습니다.

#### HAVING 절

* SELECT 문에서 WHERE를 통해 조건에 맞는 데이터만 보고 싶은 경우가 있었습니다. 이때 GROUP BY를 사용하는 경우에는 HAVING을 통해 집계함수에 대해서 조건을 제한합니다.

```sql
SELECT 열_이름
    FROM 테이블_이름
        GROUP BY 열_이름
        HAVING 조건식;
```

```sql
SELECT mem_id "회원 아이디", SUM(price*amount) "총 구매 금액"
	  FROM buy
        GROUP BY mem_id
        HAVING SUM(price*amount) > 1000;
```

## 3-3. 데이터 변경을 위한 SQL문

* 데이터베이스와 테이블을 만든 후에는 데이터를 변경하는, 즉 입력/수정/삭제하는 기능이 필요합니다.

* 새로운 데이터를 테이블에 입력할 때는 **INSERT**, 데이터를 수정할 때는 **UPDATE**, 데이터를 삭제할 때는 **DELETE**문을 사용합니다.

### 3-3-1. 데이터 입력: INSERT

#### INSERT 문의 기본 문법

* INSERT는 테이블에 데이터를 삽입하는 명령입니다. 

```sql
INSERT INTO 테이블 [(열1, 열2, ...)] VALUES (값1, 값2, ...)
```

테이블 이름 나음에 나오는 열은 생략이 가능합니다. 생략할 경우 VALUES의 값들이 열 순서 및 개수와 동일해야 합니다.

```sql
USE market_db;
CREATE TABLE hongong1 (toy_id INT, toy_name CHAR(4), age INT);
INSERT INTO hongong1 VALUES (1, '우디', 25);
```

열의 순서를 바꿔서 입력하거나 원하는 열에만 정보를 입력하고 싶다면 테이블 이름 뒤에 열 이름을 기입하여 SQL을 작성한다.

```sql
INSERT INTO hongong1 (toy_id, toy_name) VALUES (2, '버즈');
```

#### 자동으로 증가하는 AUTO_INCREMENT

* AUTO_INCREMENT는 열을 정의할 때 1부터 증가하는 값을 입력해줍니다. 주의할 점은 AUTO_INCREMENT로 지정하는 열은 꼭 **PRIMARY KEY**로 지정해줘야 합니다.

```sql
CREATE TABLE hongong2 (
  toy_id INT AUTO_INCREMENT PRIMARY KEY,
  toy_name CHAR(4),
  age INT
);
```

이제 데이터를 입력할 때, 자동 증가하는 부분은 NULL 값으로 채워 놓으면 됩니다.

* 만약 AUTO_INCREMENT로 입력되는 다음 값을 100부터 시작하도록 변경하고 싶다면 다음과 같이 실행합니다.

```sql
ALTER TABLE hongong2 AUTO_INCREMENT=100;
INSERT INTO hongong2 VALUES (NULL, '재남', 35);
SELECT * FROM hongong2;
```

ALTER TABLE은 테이블을 변경하라는 의미입니다.  
  
혹은 처음부터 입력되는 값을 1000으로 지정하고, 다음 값으로 3씩 증가하도록 설정하는 방법을 살펴보겠습니다.  
  
시스템 변수인 `@@auto_increment_increment`를 변경시켜야 합니다.

```sql
CREATE TABLE hongong3 (
    toy_id INT AUTO_INCREMENT PRIMARY KEY,
    toy_name CHAR(4),
    age INT);
ALTER TABLE hongong3 AUTO_INCREMENT=1000;
SET @@auto_increment_increment=3;
```

* INSERT INTO 문은 1줄로 작성할 수도 있습니다.

```sql
INSERT INTO 테이블_이름 VALUES (값1, 값2, ...), (값3, 값4, ...);
```

#### 다른 테이블의 데이터를 한 번에 입력하는 INSERT INTO ~ SELECT

* 다른 테이블에 이미 데이터가 입력되어 있다면 **INSERT INTO ~ SELECT** 구문을 사용해 해당 테이블의 데이터를 가져와서 한 번에 입력할 수 있습니다.

```sql
INSERT INTO 테이블_이름 (열_이름1, 열_이름2, ...)
    SELECT 문;
```

주의할 것은 SELECT 문의 열 개수가 INSERT할 테이블의 열 개수와 같아야 한다는 것입니다.

* DESC는 Describe의 약자로, 테이블 구조를 출력해주는 기능을 합니다.

### 3-3-2. 데이터 수정: UPDATE

* 회원의 정보가 변경되는 경우 UPDATE를 사용해서 내용을 수정합니다.

#### UPDATE 문의 기본 문법

* **UPDATE**는 기존에 입력되어 있는 값을 수정하는 명령입니다.

```sql
UPDATE 테이블_이름
    SET 열1=값1, 열2=값2, ...
    WHERE 조건 ;
```

```sql
USE market_db;
UPDATE city_popul
	SET city_name = '서울'
    WHERE city_name = 'Seoul';
SELECT * FROM city_popul WHERE city_name = '서울';
```

city_popul이라는 테이블에서 city_name이 'Seoul'인 데이터를 '서울'로 바꿔줍니다(SET).  
  
* 필요하면 한꺼번에 여러 열의 값을 변경할 수 있습니다. 콤마(,)로 분리해서 여러 개의 열을 변경하면 됩니다.

```sql
UPDATE city_popul
    SET city_name = '뉴욕', population = 0
    WHERE city_name = 'New York';
SELECT * FROM city_popul WHERE city_name = '뉴욕';
```

SET에는 변경할 값을 입력하고, WHERE는 데이터 조건을 두어 원하는 데이터만 바꿀 수 있도록 합니다.

#### WHERE가 없는 UPDATE문

* UPDATE문에서 **WHERE** 절은 문법상 생략이 가능하지만, WHERE 절을 생략하면 테이블의 모든 행의 값이 변경됩니다.

`SET city_name = '서울';`은 WHERE를 사용하지 않으면 모든 데이터의 city_name이 '서울'로 바꿔버릴 것입니다.

* 값을 일괄적으로 바꾸는 경우는 인구의 단위를 10,000명 단위로 바꾸는 등의 과정을 위해 사용하는 경우도 있습니다.

```sql
UPDATE city_popul
    SET population = population / 10000;
SELECT * FROM city_popul LIMIT 5;
```

## 3-3-3. 데이터 삭제: DELETE

* 데이터를 삭제할 때 **DELETE**를 사용하여 행 데이터를 삭제합니다.

```sql
DELETE FROM 테이블_이름 WHERE 조건;
```

```sql
DELETE FROM city_popul
    WHERE city_name LIKE 'New%';
```

WHERE 조건을 만족하는 모든 데이터를 삭제하고 싶은 것이 아니라, 상위 몇 건만 삭제하려면 LIMIT를 사용합니다.

## 3-3-4. 대용량 테이블의 삭제

* 대용량 테이블을 `DELETE`, `DROP`, `TRUNCATE`라는 3가지 방법으로 삭제하는 방법이 있습니다.

* DELETE문은 삭제가 오래 걸립니다. DROP 문은 데이터 자체를 삭제합니다. TRUNCATE 문도 DELETE와 동일한 효과를 내지만 속도가 무척 빠릅니다. DROP과 달리 빈 테이블을 남깁니다.

```sql
DELETE FROM 테이블_이름;
DROP TABLE 테이블_이름;
TRUNCATE TABLE 테이블_이름;
```