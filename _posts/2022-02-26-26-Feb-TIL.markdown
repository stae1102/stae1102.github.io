---
layout: post
title:  "26 Feb TIL: js 객체"
excerpt: "js 객체"
date:   2022-02-26 12:28:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Chapter 6. 여러 자료를 한꺼번에 담는 객체

## 6-1. 객체란?

* 객체를 흔히 '복합' 자료형이라고 부르는 이유는 객체 안에 숫자, 문자열 등 여러 가지 자료형이 포함되기 때문입니다. 하지만, 객체도 자료형이기 때문에 자바스크립트에서 객체는 자료를 저장하고 처리하는 기본 단위입니다. 

### 객체 간단히 살펴보기

* 사이트에 나열된 책들은 제목을 포함해서 이 책의 분야, 저자, 쪽수 등 여러 정보를 함께 담아 소개합니다. 이렇게 하나의 변수('책')에 다양한 정보를 담기 위해 사용하는 자료형이 객체입니다.(파이썬의 딕셔너리와 유사함)

```js
var book = {
    title: "자바스크립트",
    author: "홍길동",
    pages: 500,
    price: 15000
}
```

* 예를 들어 회원 정보를 저장하기 위해 회원 '객체'를 만들고 그 안에 아이디, 비밀번호, 가입 날짜 등을 저장하면 여러 곳에 저장하는 것보다 더 편하게 사용할 수 있습니다. 이처럼 자바스크립트를 사용해 웹 사이트나 애플리케이션의 자료를 다루려면 하나의 변수에 여러 정보를 저장할 수 있는 객체가 꼭 필요합니다.

### 자바스크립트에서 객체의 종류

* 자바스크립트는 웹 사이트나 웹 애플리케이션을 프로그래밍하는 언어이기 때문에 웹 브라우저나 웹 문서와 관련된 것들을 객체로 인식합니다. 

#### 내장 객체

* 자바스크립트 프로그래밍을 할 때 자주 사용하는 요소는 미리 객체로 정의되어 있습니다. 이런 객체를 '내장 객체(Built-in Object)'라고 합니다. 예를 들어 날짜나 시간과 관련된 프로그램을 작성할 때는 Date 객체를 사용해 현재 시각을 알아내고 그 정보를 손쉽게 가져다 사용할 수 있습니다. (Number, Boolean, Array, Math 등)

#### 문서 객체 모델(DOM)

* 객체를 사용해 웹 문서를 관리하는 방식을 '문서 객체 모델(DOM)'이라고 합니다. 문서 객체 모델에서는 웹 문서뿐만 아니라 웹 문서 안에 포함된 이미지·링크·텍스트 필드 등도 모두 각각 별도의 객체로 미리 만들어 놓았습니다. 여기에는 웹 문서 자체를 담는 Document 객체, 웹 문서 안의 이미지를 관리하는 Image 객체 등이 있습니다.

#### 브라우저 객체 모델

* 웹 문서를 관리하는 것이 문서 객체 모델이라면 웹 브라우저의 주소 표시줄이나 창 크기 등 웹 브라우저 정보를 객체로 다루는 것이 '브라우저 객체 모델'입니다. 브라우저 객체 모델에는 사용중인 브라우저 종류나 버전을 담고 있는 Navigator 객체, 브라우저에서 방문한 기록을 남기는 History 객체, 주소 표시줄 정보를 담고 있는 Location 객체, 화면 크기 정보가 들어있는 Screen 객체 등이 있습니다. 이들 객체를 사용하면 알림 창을 표시할 수도 있고, 사용자 동작에 따라 원하는 사이트로 이동하도록 지정할 수도 있습니다.

#### 사용자 정의 객체

* 앞에서 살펴본 내장 객체뿐만 아니라 사용자가 필요할 때마다 자신의 객체를 정의해서 사용할 수 있습니다. 예를 들어 앞에서 여러 가지 책의 정보를 담은 book도 사용자 정의 객체입니다.

### 객체의 속성과 메서드 알아보기

* 객체에서 값을 담고 있는 정보를 속성(Property)이라고 부릅니다. 속성은 내장 객체에도 만들어져 있습니다. **객체의 속성 값을 가져올 때는 객체 이름 뒤에 마침표(.)를 찍고 그 뒤에 속성 이름을 적습니다.**

* 예를 들어 Navigator의 속성을 알기 위해서 콘솔 창에 navigator를 입력하고 마침표까지 입력하면 사용 가능한 속성과 함수 목록이 나타납니다.

```js
navigator.vendor
```

* 객체에서 속성 말고도 중요한 개념이 있는데, 바로 '메서드(Method)'입니다. 메서드는 객체가 어떻게 동작할지를 선언해 놓은 함수입니다.

* 예를 들어 콘솔창에 Window 객체를 입력하면 `{postMessage: f, blur: f, foucs: f, ...}` 등의 요소가 나타는 데, 이렇게 객체 안에 미리 함수가 정의되어 있습니다. 이것은 객체 안에 정의된 함수이기 때문에 '메서드'라고 부릅니다.

* 속성을 사용할 때와 마찬가지로 객체의 메서드를 사용할 때도 마침표(.)를 사용해서 객체 이름 다음에 메서드를 지정하면 됩니다.(Window 객체는 모든 객체를 품고 있는 최상위 객체이기 때문에 Window 객체의 함수를 실행할 때는 winodw와 마침표를 빼고 `alert("내용")`처럼 함수 이름만 사용해서 실행해도 됩니다.)

### 객체의 프로토타입과 인스턴스 소개

* 웹 문서에 있는 요소를 프로그램에서 사용하려면 객체 형태여야 합니다. 예를 들어 웹 문서에 있는 이미지를 자바스크립트에서 다룰 때는 Image 객체를 사용합니다. Image 객체는 모든 웹 이미지가 공통으로 가지는 속성과 기능을 모아놓은 것입니다. 웹 이미지를 만들기 위한 기본 틀이라고 볼 수 있겠죠?

* 이런 틀을 **'프로토타입(Prototype)'** 이라고 합니다. 만약 웹 문서에 3개의 이미지를 포함시켜야 한다면 Image 객체를 사용해서 똑같은 모양의 객체 3개를 찍어낸 다음 객체마다 원하는 이미지를 담으면 됩니다. 이렇게 프로토타입을 사용해 만들어낸 객체는 **'인스턴스(Instance, =개별 객체)'** 라고 합니다.

### 객체의 인스턴스 만들기

* 객체의 인스턴스를 만들 때, 즉 객체를 똑같이 찍어 새 객체를 만들 때는 new 예약어를 사용합니다. new 예약어 뒤에 프로토타입 객체 이름과 괄호 ()를 써주면 됩니다.

> **Date 프로토타입 객체를 사용해 인스턴스 만들기**
> ```js
> var now = new Date()
> ```
> now는 이제 Date 객체의 인스턴스이므로, Date 객체에서 정의한 속성과 함수를 모두 사용할 수 있습니다.
> ```js
> now.toLocaleString()
> ```

### 내장 객체로 무작위 수 프로그램 만들기

* 무작위 수를 만들기 위해서 내장 객체를 통해 더욱 편리하게 무작위 수를 생성할 수 있습니다.

```js
Math.random()
```

* 만일 1부터 100까지의 숫자 중에서 무작위 수를 구하려면 `Math.random()`으로 생성한 수에 100을 곱한 후 1을 더해줍니다. 무작위 수가 정수여야 한다면, 소수점 이하를 버리는 메서드인 floor() 함수를 사용합니다.

```js
Math.floor(Math.random() * 100 + 1)
```

## 6-2. 사용자 정의 객체 만들기

* 필요하다면 사용자가 직접 객체를 만들어 사용할 수 있습니다. 이처럼 사용자가 직접 만든 객체를 '사용자 정의 객체'라고 합니다. 자바스크립트에서 객체를 만드는 방법 중 가장 많이 사용하는 객체 리터럴과 생성자 함수를 사용하는 방법을 알아보겠습니다.

### 리터럴 표기법을 사용해 객체를 만드는 방법

* 리터럴(Literal)이란 프로그래밍에서 자료를 표기하는 방식을 말합니다. 리터럴을 사용해서 표기한다는 것은 변수를 선언하면서 동시에 값을 지정해주는 표기 방식을 말합니다. 아래와 같이 변수를 선언하는 동시에 값을 지정하는 것이 리터럴 표기법입니다.

```js
var a = 10;
```

* 그렇다면 '객체 리터럴 표기법'이란 객체를 선언하면서 동시에 값을 지정해 주는 것으로 추측할 수 있겠죠? 객체 리터럴을 사용해 객체를 정의할 때는 중괄호 {} 안에 '속성 이름:값'을 하나의 쌍으로 지정합니다. 속성이 여러 개일 경우 '속성 이름:값' 쌍마다 쉼표(,)를 넣어 구분합니다. 함수 또한 '함수 이름:' 다음에 함수를 정의하며, '함수 이름:function(){···}' 형식을 사용합니다.

```js
var book = {
    title: "자바스크립트",
    author: "고쌤",
    pages: 500,
    price: 15000,
    info: function() {
        alert(this.title + "책의 분량은 " + this.pages + "쪽입니다.");
    }
}
```

* 프로그램에서 book 객체를 만들어 사용하다가 새로운 속성을 추가할 수 있습니다. 예를 들어 book 객체에 분야 정보를 추가하고 싶다면 다음과 같은 방법으로 field 속성을 추가한 다음 원하는 값을 넣으면 됩니다.

```js
book.field = "IT"
```

### 생성자 함수를 사용해 객체를 만드는 방법

* 리터럴 표기법을 사용해 객체를 만드는 방법은 정해진 값을 가진 객체를 한 번만 만들어 냅니다. 만약 이 방법으로 프로그램을 만든다면 매번 객체와 똑같은 속성과 함수를 입력하고, 책마다 그 값을 다르게 넣어 새롭게 객체를 만들어야 합니다. 이럴 때 항상 필요한 속성과 함수는 틀처럼 미리 만들어 두고, 필요할 때마다 그 틀을 복제한 인스턴스를 만들어 책 정보 값을 담는 것이 편리합니다. 이때 생성자 함수를 사용해 객체를 만듭니다.(리터럴 표기법을 사용한 방법은 객체 틀을 만들지 않고 개별적으로 객체를 선언하고 사용하는 방법)

* **생성자 함수**란 객체를 만들어 내는 함수를 말합니다. 이 또한 함수이므로 function 예약어를 사용해 선언합니다. 생성자 함수 안에 객체의 속성과 함수를 정의할 때는 this 예약어 다음에 마침표와 속성 이름을 입력합니다. *여기서 this가 가리키는 것은 선언하고 있는 객체 자체입니다.

* 객체의 속성은 객체에서 사용하는 변수, 객체의 함수는 해당 객체에서 사용하는 함수라고 생각하면 쉽습니다.

```js
function Book(author, pages, price, title) {
    this.author = author;
    this.pages = pages;
    this.price = price;
    this.title = title;
}
```

* 이렇게 Book 객체를 만들었다면 다음과 같이 인스턴스를 만들 수 있습니다.

```js
jsBook = new Book("홍길동", 500, 15000, "자바스크립트")   // 인스턴스 만들기
jsBook.title
```

### 생성자 함수로 도서 목록 객체 만들기

```js
function Book(title, author, volume, price) {
    this.title = title;     // 제목
    this.author = author;   // 저자
    this.volume = volume;   // 분량
    this.price = price;     // 가격
}

var html = new Book('웹 표준의 정석', 'Ko', '608', '28,000');
var youtube = new Book('유튜브 영상 만들기', 'Kim', '368', '16,000');
var python = new Book('점프 투 파이썬', 'Park', '352', '18,800');

var bookList = [html, youtube, python];

document.write("<h1>책 제목으로 살펴보기</h1>");
for(var i=0; i<bookList.length; i++) {
    document.write("<p>" + bookList[i].title + "</p>");
}
```

## 6-3. Date 객체를 활용해 기념일 계산기 만들기

### Date 객체의 주요 함수 알아 두기

* 함수 이름 앞에 get이나 set이 붙어 있는데, get은 '가져온다'는 의미이고 set은 '두다, 설정하다'는 의미입니다.

#### 날짜/시간 정보를 가져오는 함수

> * getFullYear(): 날짜 정보에서 연도(Year) 정보를 가져와 네 자리 숫자로 표시합니다.
> * getMonth(): 날짜 정보에서 '월(Month)' 정보를 가져옵니다. 이때 0~11의 숫자로 월을 표시합니다. 0부터 1월이 시작되고 11은 12월입니다.
> * getDate(): 날짜 정보에서 며칠인지 알 수 있는 '일(Date)' 정보를 가져옵니다.
> * getDay(): 날짜 정보에서 '요일(Day)' 정보를 가져옵니다. 이때 요일 정보는 0~6의 숫자로 표시되는데, 0은 '일요일'에 해당하고 6은 '토요일'에 해당합니다.
> * getTime(): 1970년 1월 1일 자정 이후의 시간을 밀리초로 표시합니다. 밀리초는 1/1000 초를 가리킵니다.
> * getHours(): 0~23의 숫자로 시를 표시합니다.
> * getMinutes(): 0~59의 숫자로 분을 표시합니다.
> * getSeconds(): 0~59의 숫자로 초를 표시합니다.
> * getMilliseconds(): 0~999의 숫자로 밀리초를 표시합니다.

#### 날짜/시간 정보를 설정하는 함수

> * setFullYear(): 연도를 네 자리 숫자로 설정합니다.
> * setMonth(): 0~11의 숫자로 월을 표시합니다. 0부터 1월, 11은 12월입니다.
> * setDate(): 1~31의 숫자로 일을 설정합니다.
> * setTime(): 1970년 1월 1일 자정 이후의 시간을 밀리초로 설정합니다.
> * setHours(): 0~23의 숫자로 시를 설정합니다.
> * setMinutes(): 0~59의 숫자로 분을 설정합니다.
> * setSeconds(): 0~59의 숫자로 초를 설정합니다.
> * setMilliseconds(): 0~999의 숫자로 밀리초를 설정합니다.

### 현재 날짜와 시간 정보 가져오기

```js
var now = new Date()
now.getDate()
```

위와 같이 Date 객체의 인스턴스를 만들고 객체의 속성과 함수를 사용합니다.