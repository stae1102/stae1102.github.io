---
layout: post
title: "백준: 4690 완전 세제곱"
excerpt: "Python, brute_force"
date: 2022-03-13 16:11:00 +0900
categories:
  - Baekjoon
tags:
  - brute_force
---

- [문제]

# 문제

페르마의 마지막 정리는, a, b, c가 0이 아닌 정수이고, n이 2보다 큰 자연수 일 때, an = bn + cn을 만족하는 자연수 a, b, c가 존재하지 않는다는 정리이다. 이 정리는 아직 증명되지 않았다.

하지만, 완전 세제곱 방정식 a3 = b3 + c3 + d3을 만족하는 1보다 큰 자연수를 찾는 것은 어렵지 않다. (123 = 63 + 83 + 103)

이러한 완전 세제곱 방정식과 a ≤ 100을 만족하는 {a, b, c, d}쌍을 모두 찾는 프로그램을 작성하시오.

# 입력

이 문제는 입력이 없다.

# 출력

a값이 증가하는 순서대로 아래 출력 형식과 같이 출력한다. b, c, d도 증가하는 순서로 이루어져야 한다. a값에 해당하는 b, c, d쌍이 여러 개 존재할 수 있다. 이때는 b 값이 작은 것부터 먼저 출력한다.

아래 출력 예제는 일부분만 나와있다.

# 문제풀이

## A. 아이디어

이 문제는 깨달음이 많은 문제이다. 브루트 포스라는 알고리즘 이름에 걸맞게 정말 힘으로 밀어붙이는 느낌이다.

3중 for문 까지는 그나마 괜찮다 생각했지만 4중 for문으로 밀어붙일 줄은 몰랐다.

브루트 포스는 정말 **무지성**으로 탐색하는 게 제일 좋은 방법인 것 같다. 어렵게 생각하면 어렵게 풀리는 게 브루트 포스이다.

## 전체 코드

```python
import sys

for a in range(6, 101):
    for b in range(2, 101):
        for c in range(b + 1, 101):
            for d in range(c + 1, 101):
                if a**3 == b**3 + c**3 + d**3:
                    sys.stdout.write(f'Cube = {a}, Triple = ({b},{c},{d})\n')
                if a**3 < b**3 + c**3 + d**3:
                    break
```

출력이 많을 때는 sys.stdout.write로 해주는 게 훨씬 빠르다.

또한, 다른 답을 봤을 때, 그냥 문자열 변수에 개행문자를 포함해 계속 더해나간 다음, 한 번에 print(변수)로 출력했고 그게 pypy로 제출하지 않아도 정답처리 됐다.

1. 출력이 많을 때는 sys.stdout.write 사용하기

2. 문자열에 다 넣고 한 번에 출력하는 게 빠를 수 있다.

![4690](https://user-images.githubusercontent.com/83271772/158049586-b94f9838-b2b8-4125-95c9-a0c4061cc782.PNG)