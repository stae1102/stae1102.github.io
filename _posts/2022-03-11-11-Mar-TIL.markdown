---
layout: post
title: "11 Mar TIL: Nodejs MongoDB, Mongoose"
excerpt: "Nodejs Nodejs MongoDB, Mongoose"
date: 2022-03-11 21:47:00 +0900
categories:
  - Study
tags:
  - TIL
---

- [8.1 NoSQL vs. SQL](#81-nosql-vs-sql)
- [8.2 몽고디비 설치하기](#82-몽고디비-설치하기)
- [8.3 컴퍼스 설치하기](#83-컴퍼스-설치하기)
- [8.4 데이터베이스 및 컬렉션 생성하기](#84-데이터베이스-및-컬렉션-생성하기)
- [8.5 CRUD 작업하기](#85-crud-작업하기)
  - [8.5.1 Create(생성)](#851-create생성)
  - [8.5.2 Read(조회)](#852-read조회)
  - [8.5.3 Update(수정)](#853-update수정)
  - [8.5.4 Delete(삭제)](#854-delete삭제)
- [8.6 몽구스 사용하기](#86-몽구스-사용하기)
  - [8.6.1 몽고디비 연결하기](#861-몽고디비-연결하기)
  - [8.6.2 스키마 정의하기](#862-스키마-정의하기)
  - [8.6.3 쿼리 수행하기](#863-쿼리-수행하기)

# 8.1 NoSQL vs. SQL

MySQL은 SQL을 사용하는 대표적인 데이터베이스이다. 반면에 SQL을 사용하지 않는 NoSQL(Not only SQL)이라고 부르는 데이터베이스도 있다. 몽고디비는 NoSQL의 대표 주자이다.

> **SQL(MySQL)**
> 
> * 규칙에 맞는 데이터 입력
> * 테이블 간 JOIN 지원
> * 안정성, 일관성
> * 용어(테이블, 로우 컬럼)

> **NoSQL(몽고디비)**
> 
> * 자유로운 데이터 입력
> * 컬렉션 간 JOIN 미지원
> * 확장성, 가용성
> * 용어(컬렉션, 다큐먼트, 필드)

* 먼저 NoSQL에는 **고정된 테이블이 없다.** 테이블에 상응하는 컬렉션이라는 개념이 있긴 하지만, 컬럼을 따로 정의하지는 않는다. MySQL은 컬럼과 자료형, 옵션 등을 설정하지만, 몽고디비는 그냥 users 컬렉션을 만들고 끝이다. users 컬렉션에는 **어떠한 데이터든 다 들어갈 수 있다.** 어떤 다큐먼트(MySQL로 치면 로우)에는 name, age, married 데이터가, 다른 다큐먼트에는 name, comment, createAt, updateAt 등의 데이터가 들어갈 수 있다.

* 몽고디비에는 MySQL과 달리 **JOIN 기능이 없다.** JOIN 기능을 흉내 낼 수는 있지만, 하나의 쿼리로 여러 테이블을 합치는 작업이 항상 가능하지는 않는다. 동시에 쿼리를 수행하는 경우 **쿼리가 섞여 예상치 못한 결과를 낼 가능성도 있다.**

* 이러한 단점에도 몽고디비를 사용하는 이유는 **확장성**과 **가용성** 때문이다. 데이터의 일관성을 보장해주는 기능이 약한 대신, **데이터를 빠르게 넣을 수 있고 쉽게 여러 서버에 데이터를 분산할 수 있다.**

* 예를 들어 항공사 예약 시스템의 경우, 비행기 표에 관한 정보가 모든 항공사에 일관성 있게 전달되어야 하므로 예약 처리 부분의 데이터베이스는 MySQL을 사용한다. 하지만 핵심 기능 외의 빅데이터, 메시징, 세션 관리 등에는 확장성과 가용성을 위해 몽고디비를 사용할 수도 있다.

# 8.2 몽고디비 설치하기

# 8.3 컴퍼스 설치하기

# 8.4 데이터베이스 및 컬렉션 생성하기

> **용어 정리**
> 
> * 컬렉션 = 테이블
> * 다큐먼트 = 로우
> * 필드 = 컬럼

* `use [데이터베이스명]`: 데이터베이스를 만드는 명령어

* `show dbs`: 데이터베이스 목록을 확인하는 명령어

* `db`: 현재 사용 중인 데이터베이스를 확인하는 명령어

* 컬렉션은 따로 생성하지 않아도 다큐먼트를 넣는 순간 생성됨, 하지만 다음과 같이 직접 컬렉션을 생성하는 명령어도 있음

```
> db.createCollection('users')
{ "ok" : 1 }
> db.createCollection('comments')
{ "ok" : 1 }
```

* `show collections`: 생성한 컬렉션 목록 확인

# 8.5 CRUD 작업하기

## 8.5.1 Create(생성)

컬렉션에 컬럼을 정의하지 않아도 되므로 컬렉션에는 아무 데이터나 넣을 수 있다.

기본적으로 몽고디비는 자바스크립트 문법을 사용하므로 자바스크립트의 자료형을 따른다. 하지만 추가로 몇 가지 자료형이 더 있다.

Date나 정규표현식 같은 자바스크립트 객체를 자료형으로 사용할 수 있고, **Binary Data, ObjectId, Int, Long, Decimal, Timestamp, JavaScript 등**의 추가적인 자료형이 있다. Undefined와 Symbol은 몽고디비에서 자료형으로 사용하지 않는다. 추가적인 자료형 중에서 ObjectId와 Binary Date, Timestamp 외에는 잘 사용되지 않는다. **ObjectId**는 MySQL에서 기본 키로 쓰이는 값과 비슷한 역할을 한다. **고유한 값을 가지므로 다큐먼트를 조회할 때 사용**할 수 있다.

```
db.users.save({ name: 'zero', age: 24, married: false, comment: '안녕하세요. 간단히 몽고디비 사용 방법에 대해 알아봅시다.', createdAt: new Date() });
```

* `db.컬렉션명.save(다큐먼트)`로 다큐먼트를 생성할 수 있다. 명령어 성공적으로 수행되었다면 `WriteResult({ "nInserted": 1 })`이라는 응답이 온다. 다큐먼트가 한 개 생성되었다는 뜻이다.

---

comments 컬렉션에도 데이터를 넣어야 하는데 zero의 댓글을 넣을 것이므로 zero의 아이디를 알아야 한다.

```
db.users.find({ name: 'zero' }, {_id: 1 });
```
위 명령어를 통해 아이디를 추출한 후 그대로 comments 컬렉션에 사용한다.

```
db.comments.save({ commenter: ObjectId("622ab1dc445bba6776d08146"), comment: '안녕하세요. zero의 댓글입니다.', createdAt: new Date() });
```

## 8.5.2 Read(조회)

`find({})`는 컬렉션 내의 모든 다큐먼트를 조회하라는 뜻이다.

특정 필드만 조회하고 싶다면 다음과 같이 하면 된다.

```
db.users.find({}, { _id: 0, name: 1, married: 1 });
```

* find 메서드의 두 번째 인수로 **조회할 필드**를 넣는다. 1 또는 true로 표시한 필드만 가져온다. **_id는 기본적으로 가져오게 되어 있으므로 0 또는 false를 입력**해 가져오지 않도록 해야 한다.

조회 시 조건을 주려면 **첫 번째 인수 객체에 기입**하면 된다. age가 30 초과, married가 true인 다큐먼트의 이름과 나이를 조회해보자

```
db.users.find({ age: { $gt: 30 }, married: true }, { _id: 0, name: 1, age: 1 });
```

시퀄라이즈처럼 특수한 속성이 사용 가능하다. 자주 쓰이는 연산자로는 $gt(초과), $gte(이상), $lt(미만), $lte(이하), $ne(같지 않음), $or(또는), $in(배열 요소 중 하나) 등이 있다.

```
db.users.find({ $or: [{ age: { $gt: 30 } }, { married: false }] }, { _id: 0, name: 1, age: 1 });
```

* sort 메서드를 사용해서 정렬도 가능하다. -1은 내림차순 1은 오름차순이다.

```
db.users.find({}, { _id: 0, name: 1, age: 1} ).sort({ age: -1 });
```

* limit를 통해 조회할 다큐먼트 개수를 설정할 수도 있다.

```
db.users.find({}, { _id: 0, name: 1, age: 1 }).sort({ age: -1 }).limit(1);
```

* skip 메서드로 몇 개를 건너뛸지 설정할 수도 있다.

```
db.users.find({}, { _id: 0, name: 1, age: 1 }).sort({ age: -1 }).limit(1).skip(1);
```

## 8.5.3 Update(수정)

```
db.users.update({ name: 'nero' }, { $set: { comment: '안녕하세요. 이 필드를 바꿔보겠습니다!' } });
```

첫 번째 객체는 **수정할 다큐먼트를 지정하는 객체**고, 두 번째 객체는 **수정할 내용을 입력하는 객체**이다. $set이라는 연산자가 사용되었는데, 이 연산자는 어떤 필드를 수정할지 정하는 연산이다. 만약 이 연산자를 사용하지 않고 인반 객체를 넣는다면, 다큐먼트가 통째로 두 번째 인수로 주어진 객체로 수정되어 버린다. 따라서 **일부 필드만 수정하고 싶을 때는 반드시 $set 연산자를 지정**해야 한다.

## 8.5.4 Delete(삭제)

```
db.users.remove({ name: 'nero' });
```

삭제할 다큐먼트에 대한 정보가 담긴 객체를 첫 번째 인수로 제공하면 된다.

# 8.6 몽구스 사용하기

* 몽구스는 시퀄라이즈와 달리 ODM(Object Document Mapping)이라고 불린다.

* 몽고디비 자체가 이미 자바스크립트인데도 굳이 자바스크립트 객체와 매핑하는 이유는 몽고디비에 없어서 불편한 기능들을 몽구스가 보완해주기 때문이다.

* 먼저 스키마(schema)라는 것이 생겼다. 몽고디비는 테이블이 없어서 자유롭게 데이터를 넣을 수 있지만, 실수로 잘못된 자료형의 데이터를 넣을 수도 있고, 다른 다큐먼트에는 없는 필드의 데이터를 넣을 수도 있다. 몽구스는 몽고디비에 데이터를 넣기 전에 **노드 서버 단에서 데이터를 한 번 필터링하는 역할**을 할 수 있다.

* 또한, MySQL에 있는 JOIN 기능을 **populate**라는 메서드로 어느 정도 보완한다. 따라서 관계가 있는 데이터를 쉽게 가져올 수 있다.

## 8.6.1 몽고디비 연결하기

몽고 디비는 주소를 사용해 연결한다. 주소 형식은 `mongodb://[username:password@]host[:port][/[database][?options]]`와 같이 작성한다.

* username과 password에 몽고디비 계정 이름과 비밀번호를 넣는다. host가 localhost, port가 27017, 계정이 있는 database가 admin이므로 주소는 mongodb://이름:비밀번호@localhost:27017/admin이 된다.

* 먼저 schema 폴더를 루트 디렉터리에 생성한다. 폴더 안에 index.js 파일을 생성한 후 내용을 넣는다.

## 8.6.2 스키마 정의하기

몽구스 모듈에서 Schema 생성자를 사용해 스키마를 만든다. 몽구스는 알아서 _id를 기본 키로 생성하므로 _id 필드는 적어줄 필요가 없다.

몽구스 스키마에서 특이한 점은 **String, Number, Date, Buffer, Boolean, Mixed, ObjectId, Array를 값으로 가질 수 있다**는 점이다.

required는 NOT NULL과 같고, default는 시퀄라이즈나 MySQL의 default와 같다.

```js
const commentSchema = new Schema({
    commenter: {
        type: ObjectId,
        required: true,
        ref: 'User',
    },
    ...
```

commenter 속성의 자료형은 ObjectId이다. 옵션으로 ref 속성의 값이 User로 주어져 있다. commenter 필드에 User 스키마의 사용자 ObjectId가 들어간다는 뜻이다. 나중에 JOIN과 비슷한 기능을 할 때 사용된다.

> **컬렉션 이름 바꾸기**
> 
> 몽구스는 model 메서드의 첫 번째 인수로 컬렉션 이름을 만든다. **첫 번째 인수가 User라면 첫 글자를 소문자로 만든 뒤 복수형으로 바꿔서 users 컬렉션을 저장**한다. Comment라면 comments 컬렉션이 된다. 이러한 강제 개명이 싫다면 **세 번째 인수로 컬렉션 이름을 줄 수 있다.**
> ```js
> mongoose.model('User', userSchema, 'user_table');

## 8.6.3 쿼리 수행하기

라우터 작성

먼저 GET /로 접속했을 때의 라우터이다. User.find({}) 메서드로 모든 사용자를 찾은 뒤, mongoose.html을 렌더링할 때 users 변수로 넣는다. find 메서드는 User 스키마를 require 한 뒤 사용할 수 있다.

몽구스도 프로미스를 지원하므로 async/await, try/catch문을 사용해서 성공 및 실패 시의 정보를 얻을 수 있다.

---

GET /users와 POST /users 주소로 요청이 들어올 때의 라우터. 각각 사용자를 조회하는 요청과 사용자를 등록하는 요청을 처리한다. GET /에서도 사용자 데이터를 조회했지만 GET /users에서는 데이터를 JSON 형식으로 반환한다는 점에서 차이가 있다.

사용자를 등록할 때는 먼저 `모델.create` 메서드로 저장한다. 정의한 스키마에 부합하지 않는 데이터를 넣었을 때는 몽구스가 에러를 발생시킨다. _id는 자동으로 생성된다.

GET /users/:id/comments 라우터는 댓글 다큐먼트를 조회하는 라우터이다. find 메서드에는 옵션이 추가되어 있다. 먼저 댓글을 쓴 아용자의 아이디로 댓글을 조회한 뒤 populate 메서드로 관련 있는 컬렉션의 다큐먼트를 불러올 수 있다. **Comment 스키마 commenter 필드의 ref가 User로 되어 있으므로 알아서 users 컬렉션에서 사용자 다큐먼트를 찾아 합친다.** commenter 필드가 사용자 다큐먼트로 치환된다. 이제 commenter 필드는 ObjectId가 아니라 그 ObjectId를 가진 사용자 다큐먼트가 된다.

---

댓글과 관련된 CRUD 작업을 하는 라우터이다. POST /comments, PATCH /comments/:id, DELETE /comments/:id를 등록했다.

POST /comments 라우터는 다큐먼트를 등록하는 라우터이다. Comment.create 메서드로 댓글을 저장한다. 그 후 populate 메서드로 **프로미스의 결과로 반환된 comment 객체에 다른 컬렉션 다큐먼트를 불러온다.** path 옵션으로 어떤 필드를 합칠지 설정하면 된다. 합쳐진 결과를 클라이언트로 응답한다.

PATCH /comments/:id 라우터는 다큐먼트를 수정하는 라우터이다. 수정에는 **update 메서드**를 사용한다. update 메서드의 첫 번째 인수로는 **어떤 다큐먼트를 수정할지를 나타낸 쿼리 객체를 제공**하고, 두 번째 인수로는 **수정할 필드와 *값이 들어 있는 객체*를 제공**한다. 몽고디비와 다르게 $set 연산자를 사용하지 않아도 기입한 필드만 바꾼다.

DELETE /comments/:id 라우터는 다큐먼트를 삭제하는 라우터이다. **remove 메서드**를 사용하여 삭제한다. remove 메서드에도 **어떤 다큐먼트를 삭제할지에 대한 조건을 첫 번째 인수로 넣는다.**