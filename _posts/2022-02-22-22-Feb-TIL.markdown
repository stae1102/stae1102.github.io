---
layout: post
title:  "22 Feb TIL: js 메서드, 프로퍼티, 라이브러리, 프레임워크 등"
excerpt: "TIL"
date:   2022-02-22 13:04:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# 23. 객체와 반복문

* 배열 등 생성된 객체에서 모든 데이터를 가져와야 하는 경우가 있는데 이때 사용하기 적절한 것이 `for .. in` 구문이다.

```html
<script>
    for(var key in coworkers) {
        
    }
</script>
```

* 여기서 사용된 `for`는 coworkers라는 변수가 가리키는 객체에 있는(in) key값을 가져오는 반복문이다.
* 즉, key라는 것은 우리가 가져오고 싶은 정보에 도달할 수 있는 열쇠를 말한다. 실행될 때마다 key 값이 하나하나 변숫값으로 설정된다는 뜻이다.

```html
<script>
    for(var key in coworkers) {
        document.write(key + ' : ' + coworkers[key] + '<br>');
    }
</script>
```

그래서 이런 식으로도 활용된다.

# 24. 객체 프로퍼티와 메서드

* 객체는 데이터를 담을 수 있다. 문자열을 담을 수도, 배열을 담을 수도, 모든 것을 담을 수 있는데 객체에서는 그중에서 함수도 담을 수 있다.

```html
<script>
    coworkers.showAll = function() {
        for(var key in this) {
            document.write(key + ' : ' + this[key] + '<br>');
        }
    }
    coworkers.showAll();
</script>
```

* 위 코드는 `fucntion showAll() { }`과 똑같은 표현이다. 객체명이 변경될 수도 있으니 `this`를 통해 이 함수가 소속된 객체를 가리키는 기호를 사용하는 것이 더 동적으로 사용자와 상호작용이 가능하므로 `this`를 사용하는 것을 권고.
* 실제로 콘솔을 통해 coworkers를 불러오면 `{..., showAll : f}`라고 표시되어 있다.
* 이처럼 객체에 소속된 함수를 **메서드**라고 하며, 객체에 소속된 변수를 **프로퍼티**라고 한다. 맥락상 같은 것을 부르는 다른 표현들이 있다는 것이다.

# 25. 객체의 활용

```html
<script>
    var Body = {
        setColor: function(color) {
            document.querySelector('body').style.color = color;
        },
        setBackgroundColor: function(color) {
            document.querySelector('body').style.backgroundColor = color;
        }
    }
</script>
```

* 변수를 정의하고 그 변수에 객체를 담기 시작한다.
* 프로퍼티로 `setColor` 등을 지정하고 다음 function을 지정한다.
* 각 프로퍼티를 구분하기 위해 콤마를 사용해야 한다.

```html
<script>
    var Links = {
        setColor: function(color) {
            var alist = document.querySelectorAll('a');
            var i = 0;
            while(i < alist.length) {
                alist[i].style.color = color;
                i = i + 1;
            }
        }
    }
</script>
```

# 26. 파일로 쪼개서 정리 정돈하기

* 객체보다 더 큰 스케일의 도구가 있는데 바로 **서로 연관된 코드들을 파일로 묶어서 그루핑**하는 것이다.

* 일일이 `<script>` 태그를 파일마다 작성하여 구현하는 것은 파일이 적을 때는 괜찮겠지만 파일이 많아질 수록 수정하는 시간도 많이 소요된다. 이를 위해 `<script>` 내용을 파일로 만들어 사용하는 것이다.

* `*.js` 파일을 만들어 자바스크립트 내용을 일괄적으로 사용한다. 새로운 파일을 만들면 모든 코드를 복사할 필요 없이 간단하게 .js 파일을 새로운 웹페이지에 포함시키기만 하면 된다.

* 즉, 작성한 코드를 재사용하게 되는 것이며, .js 파일을 수정하면 모든 웹 페이지에 동시에 변화가 반영된다. 가독성이 좋아지고, 코드가 훨씬 명확해지며, 코드의 의미를 파일의 이름을 통해 확인할 수 있게 된다.

* 이렇게 하면 자바스크립트 파일 때문에 두 번 접속해야 하지만, 캐시로 다운로드된 파일을 다시 불러오기 때문에 서버 입장에서 훨씬 비용을 절감할 수 있고, 클라이언트도 네트워크 트래픽을 절감할 수 있으며, 훨씬 더 빠르게 웹 페이지를 화면에 표시할 수 있다는 효과가 생겨서 매우 좋은 방법이다.

# 27. 라이브러리와 프레임워크

* 사람들은 다른 사람이 잘 만든 것을 부품으로 삼아 내가 만들고자 하는 것을 빠르게 조립할 수 있다. 이것은 대표적으로 **라이브러리**와 **프레임워크**가 존재한다.
* **라이브러리**는 내가 만들고자 하는 프로그램에 필요한 부품들이 되는 소프트웨어를 잘 정돈해 놓은 재사용하기 쉽게 돼 있는 소프트웨어를 의미한다.
* **프레임워크**의 경우 우리가 만들고자 하는 것이 있을 때 그것이 무엇이냐에 따라 언제나 필요한 공통적인 것이 있고, 기획 의도에 따라 달라지는 부분이 있다. 그중에서 공통적인 부분은 프레임워크라는 것으로 만들어놓고, 만들고자 하는 기능 등에 따라 살짝 수정하는 방법으로 우리가 만들고자 하는 것을 일일이 구현할 필요 없게 해주는 것으로, 반제품과 같은 성격이다.
* **라이브러리**는 내가 라이브러리를 가져와서 쓰는 것이라면, **프레임워크**는 프레임워크 안에 우리가 들어가서 작업한다는 느낌이다.

## 27-1. 라이브러리

* 대표적인 라이브러리로 **jQuery**가 있다.
* 라이브러리는 라이브러리 파일을 다운받아 프로젝트 디렉터리로 옮기는 방법과, CDN(Content Delivery Network)를 통해 그들의 서버에 파일을 보관해 놓고, 사용자는 `<script>` 태그의 src 속성을 통해 가져가는 방식을 취하고 있다.

```html
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
```

google CDN의 경우 이런 식으로 `<head>` 태그에 작성하여 라이브러리를 불러올 수 있다. 이후 jQuery와 같은 라이브러리를 통해 다양한 도움을 받을 수 있는데, 반복문의 경우에 아래와 같이 사용할 수 있다.

```js
var Links = {
    setColor: function(color) {
        $('a').css('color', color);
        // var alist = document.querySelectorAll('a');
        // var i = 0;
        // while(i < alist.length) {
        //     alist[i].style.color = color;
        //     i = i + 1;
        // }
    }
}
```

* `$('a')`는 이 웹 페이지에 있는 모든 `<a>` 태그를 jQuery로 제어하겠다는 뜻이다.
* 자바스크립트 코드와 jQuery 코드 중 jQuery가 훨씬 더 직관적이고 쉽다. 이를 활용하면 아래와 같이 사용할 수 있다.

```js
var Body = {
    setColor: function(color) {
        $('body').css('color', color);
        // document.querySelector('body').style.color = color;
    },
    setBackgroundColor: function(color) {
        $('body').css('backgroundColor', color);
        // document.querySelector('body').style.backgroundColor = color;
    }
}
```

# 28. UI vs. API

* **UI**는 **User Interface**의 약자이며, **API**는 **Application Programming Interface**의 약자이다.

```html
<input type="button" value="Click me" onclick="alert('Hello world!')" />
```

* 위에서 생긴 버튼을 클릭하는 것은 웹앱을 이용하는 사용자가 이런 버튼과 같은 조작장치를 이용해 웹 애플리케이션을 사용하고 있는 것이다.

* 사용자가 시스템을 제어하기 위해 사용하는 조작장치를 **UI**라고 한다.

* 그런데 여기에 있는 경고창은 우리가 만들기도 했지만, 우리가 만들지 않기도 했다. 이것은 웹 브라우저를 만든 사람들이 우리 대신 경고창의 기능을 미리 만들어 놓았다가 우리가 `alert()`를 실행하면 경고창을 띄워주겠다고 자바스크립트의 사용 설명서를 통해 약속한 것이다. `alert()` 함수는 경고창을 실행하는 조작장치인 것이다.

* 그런데 이 조작장치를 일반인이 사용하지는 않는다. 우리가 만든 버튼을 클릭하면 경고창이 뜨는 애플리케이션이 웹 브라우저가 이미 가지고 있는 경고창 기능을 `alert()`라는 자바스크립트 문법에 따라 사용하고 있는 것이다. 이처럼 우리가 애플리케이션을 만들기 위해 프로그래밍할 때 사용하는 조작장치를 **애플리케이션 프로그래밍 인터페이스**라고 한다. 
  
* `alert()`라는 것이 바로 애플리케이션 프로그래밍 인터페이스(API)인 것이다.