---
layout: post
title:  "05 Mar TIL: NodeJS 내장객체, 동기, 비동기 메서드"
excerpt: "NodeJS inner object, sync-async method"
date:   2022-03-04 17:27:00 +0900
categories: 
  - Study
tags:
  - TIL
---

## 3.5.4 querystring

WHATWG 방식의 url 대신 기존 노드의 url을 사용할 때 search 부분을 사용하기 쉽게 객체로 만드는 모듈

* querystring.parse(쿼리): url의 query 부분을 자바스크립트 객체로 분해한다.
* querystring.stringify(객체): 분해된 query 객체를 문자열로 다시 조립한다.

## 3.5.5 crypto

다양한 방식의 암호화를 도와주는 모듈, 비밀번호를 해킹당하지 않도록 암호화하는 것은 중요하기 때문에 유용하다.

### 3.5.5.1 단방향 암호화

복호화할 수 없는 암호화 방식(복호화: 암호화된 문자열을 원래 문자열로 되돌려 놓는 것).

한 번 암호화하면 원래 문자열을 찾을 수 없으며, 복호화할 수 없기 때문에 해시 함수라고도 부른다.

해시 기법: 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식

* createHash(알고리즘): 사용할 해시 알고리즘을 넣습니다. md5, sha1(둘 모두 취약점 발견), sha256, sha512 등이 있다
* update(문자열): 변환할 문자열
* digest(인코딩): 인코딩할 알고리즘을 넣는다. base64, hex, latin1이 주로 사용되는데 그중 base64가 결과 문자열이 가장 짧다.

가끔 다른 문자열이 동일한 문자열로 변환될 때가 있는데 이런 상황을 충돌이라고 한다. (취약점) 현재는 주로 pbkdf2나 bcrypt, scrypt라는 알고리즘을 사용.

```js
const crypto = require('crypto');

crypto.randomBytes(64, (err, buf) => {
    const salt = buf.toString('base64');
    console.log('salt:', salt);
    crypto.pbkdf2('비밀번호', salt, 100000, 64, 'sha512', (err, key) => {
        console.log('password:', key.toString('base64'));
    });
});
```

randomBytes() 메서드로 64바이트 길이의 문자열을 만드는데, 이것이 salt가 된다. pbkdf2() 메서드에는 순서대로 비밀번호, salt, 반복횟수, 출력 바이트, 해시 알고리즘을 인수로 넣음. 싱글 스레드가 아니라 내부적으로 스레드풀을 사용해 멀티 스레딩으로 동작.

randomBytes이므로 매번 실행할 때마다 결과가 달라지기 때문에 salt를 잘 보관하고 있어야 한다.

### 3.5.5.2 양방향 암호화

암호화된 문자열을 복호화할 수 있으며, 키를 사용. 대칭형 암호화에서 암호를 복호화하려면 암호화할 때 사용한 키와 같은 키를 사용해야 한다.

* crypto.createCipheriv(알고리즘, 키, iv): 암호화 알고리즘과 키, iv를 넣는다. iv는 암호화할 때 사용하는 초기화 벡터를 의미
* cipher.update(문자열, 인코딩, 출력 인코딩): 암호화할 대상과 대상의 인코딩, 출력 결과물의 인코딩을 넣는다. 보통 문자열은 utf8, 암호는 base64를 사용
* cipher.final(출력 인코딩): 출력 결과물의 인코딩을 넣으면 암호화 완료
* crypto.createDecipheriv(알고리즘, 키, iv): 복호화할 때 사용한다. 암호화할 때 사용했던 key와 iv를 그대로 입력
* decipher.update(문자열, 인코딩, 출력 인코딩): 암호화된 문장, 그 문장의 인코딩, 복호화할 인코딩을 입력.
* decipher.final(출력 인코딩): 복호화 결과물의 인코딩을 입력

### 3.5.6 util

* util.deprecate: 함수가 deprecated 처리 되었음을 알린다. 첫 번째 인수로 넣은 함수를 사용했을 때 경고 메시지가 출력된다. 두 번째 인수로 경고 메시지를 넣으면 된다.
* util.promisify: 콜백 패턴을 프로미스 패턴으로 변환. 바꿀 함수를 인수로 제공하면 된다.

### 3.5.7 worker_threads

노드에서 멀티 스레드 방식으로 작업하는 방법

isMainThread를 통해 현재 코드가 메인 스레드(기존에 동작하던 싱글 스레드를 메인 스레드 또는 부모 스레드라고 부름)에서 실행되는지, 아니면 우리가 생성한 워커 스레드에서 실행되는지 구분된다. 메인 스레드에서는 new Worker를 통해 현재 파일(__filename)을 워커 스레드에서 실행 시키고 있다.

부모에서는 워커 생성 후 worker.postMessage로 워커에 데이터를 보낼 수 있다. 워커는 parentPort.on('message') 이벤트 리스너로 부모로부터 메시지를 받고, parentPort.postMessage로 부모에게 메시지를 보낸다. 부모는 worker.on('message')로 메시지를 받는다.

워커에서 on 메서드를 사용할 때는 직접 워커를 종료해야 한다. parentPort.close()를 하면 부모와의 연결이 종료된다. 종료될 때는 worker.on('exit')이 실행된다.

스레드를 생성하고 스레드 사이에서 통신하는 데 상당한 비용이 발생하므로, 이 점을 고려해서 멀티 스레딩을 해야 한다.

### 3.5.8 child_process

노드에서 다른 프로그램을 실행하고 싶거나 명령어를 수행하고 싶을 때 사용하는 모듈. 다른 언어의 코드(ex. python)를 실행하고 결괏값을 받을 수 있다. 이름이 child_process인 이유는 현재 노드 프로세스 외에 새로운 프로세스를 띄워서 명령을 수행하고, 노드 프로세스에 결과를 알려주기 때문이다.

```js
const exec = require('child_process').exec;

const process = exec('dir');

process.stdout.on('data', function(data) {
    console.log(data.toString());
}); // 실행 결과

process.stderr.on('data', function(data) {
    console.error(data.toString());
}); // 실행 에러
```
결과는 stdout(표준 출력)과 stderr(표준 에러)에 붙여둔 data 이벤트 리스너에 버퍼 형태로 전달된다. 성공적인 결과는 표준출력, 실패한 결과는 표준에러에서 표시

```js
const spawn = require('child_process').spawn;

const process = spawn('python', ['test.py']);

process.stdout.on('data', function(data) {
    console.log(data.toString());
}); // 실행 결과

process.stderr.on('data', function(data) {
    console.error(data.toString());
}); // 실행 에러
```

python test.py를 노드의 spawn을 통해. 실행 spawn은 첫 번째 인수로 명령어를, 두 번째 인수로 옵션 배열을 넣으면 된다.

exec는 셸을 실행해서 명령어를 수행하고, spawn은 새로운 프로세스를 띄우면서 명령어를 실행. spawn에서도 세번째 인수로 { shell: true }를 제공하면 exec처럼 셸을 실행해서 명령어를 수행.

### 3.5.9

* assert: 값을 비교하여 프로그램이 제대로 동작하는지 테스트하는 데 사용
* dns: 도메인 이름에 대한 IP 주소를 얻어내는 데 사용
* net: HTTP보다 로우 레벨인 TCP나 IPC 통신을 할 때 사용
* string_decoder: 버퍼 데이터를 문자열로 바꾸는 데 사용
* tls: TLS와 SSL에 관련된 작업을 할 때 사용
* tty: 터미널과 관련된 작업을 할 때 사용
* dgram: UDP와 관련된 작업을 할 때 사용
* v8: V8 엔진에 직접 접근할 때 사용
* vm: 가상 머신에 직접 접근할 때 사용

# 3.6 파일 시스템 접근하기

fs 모듈은 파일 시스템에 접근하는 모듈이다. 파일을 생성하거나 삭제하고, 읽거나 쓸 수 있다.

```js
const fs = require('fs');

fs.readFile('./readme.txt', (err, data) => {
    if (err) {
        throw err;
    }
    console.log(data);
    console.log(data.toString());
});
```

fs 모듈을 불러온 뒤 읽을 파일의 경로를 지정. 파일을 읽은 후에 실행될 콜백 함수도 readFile 메서드의 인수로 같이 입력한다. 이 콜백 함수의 매개변수로 에러 또는 데이터를 받는다.

readFile의 결과물은 버퍼(Buffer)라는 형식으로 제공된다. 단순히 버퍼는 메모리의 데이터라고 생각하면 된다.

fs는 콜백 형식의 모듈이므로 프로미스 형식으로 변환

```js
const fs = require('fs').promises;

fs.readFile('./readme.txt')
    .then((data) => {
        console.log(data);
        console.log(data.toString());
    })
    .catch((err) => {
        console.error(err);
    });
```
writeFile 메서드를 통해 파일 생성도 가능하다.
```js
const fs = require('fs').promises;

fs.writeFile('./writeme.txt', '글이 입력됩니다')
    .then(() => {
        return fs.readFile('./writeme.txt');
    })
    .then((data) => {
        console.log(data.toString());
    })
    .catch((err) => {
        console.error(err);
    });
```

## 3.6.1 동기 메서드와 비동기 메서드

setTimeout 같은 타이머와 process.nextTick 외에도, 노드는 대부분의 메서드를 비동기 방식으로 처리한다. 그런데 fs 모듈은 동기 방식의 메서드도 많이 가지고 있다.

파일 하나를 여러 번 읽었을 때,

```js
const fs = require('fs');

console.log('시작');
fs.readFile('./readme2.txt', (err, data) => {
    if (err) {
        throw err;
    }
    console.log('1번', data.toString());
});
fs.readFile('./readme2.txt', (err, data) => {
    if (err) {
        throw err;
    }
    console.log('2번', data.toString());
});
fs.readFile('./readme2.txt', (err, data) => {
    if (err) {
        throw err;
    }
    console.log('3번', data.toString());
});
console.log('끝');
```

반복 실행으로 매번 결과가 달라진다. 비동기 메서드들은 백그라운드에 해당 파일을 읽으라고 요청하고 다음 작업으로 넘어가기 때문에 파일 읽기 요청만 세 번 보내고 console.log('끝')을 찍는다. 읽기가 완료되면 백그라운드가 다시 메인 스레드에 알리고 메인 스레드가 그 때 등록된 콜백 함수를 실행한다.

> * 동기와 비동기, 블로킹과 논블로킹
> 동기와 비동기: 백그라운드 작업 완료 확인 여부  
> 블로킹과 논 블로킹: 함수가 바로 return되는지 여부  
> 노드에서는 동기-블로킹과 비동기-논블로킹이 대부분이다. 동기-블로킹은 백그라운드 작업 완료 여부를 계속 확인하며, 호출한 함수가 바로 return되지 않는다. 비동기-논블로킹 방식에서는 호출한 함수가 바로 return되어 다음 작업으로 넘어가며, 백그라운드 작업 완료 여부는 신경 쓰지 않고 나중에 백그라운드가 알림을 줄 때 비로소 처리한다.

순서대로 실행하고 싶다면 다음과 같이 처리한다.

```js
const fs = require('fs');

console.log('시작');
let data = fs.readFileSync('./readme2.txt');
console.log('1번', data.toString());
data = fs.readFileSync('./readme2.txt');
console.log('2번', data.toString());
data = fs.readFileSync('./readme2.txt');
console.log('3번', data.toString());
console.log('끝');
```

readFile 대신 readFileSync라는 메서드를 하용하고 콜백 함수를 넣는 대신 직접 return 값을 받아온다.

readFileSync 메서드는 요청이 수백 개 이상 들어올 때 성능에 문제가 생긴다. Sync 메서드를 사용할 때는 이전 작업이 완료되어야 다음 작업을 진행할 수 있다. **즉, 백그라운드가 작업하는 동안 메인 스레드는 아무 것도 못하고 대기하고 있어야 한다는 것이다.** 

비동기 방식으로 하되 순서를 유지하고자 한다면,
```js
const fs = require('fs');

console.log('시작');
fs.readFile('./readme2.txt', (err, data) => {
    if (err) {
        throw err;
    }
    console.log('1번', data.toString());
    fs.readFile('./readme2.txt', (err, data) => {
        if (err) {
            throw err;
        }
        console.log('2번', data.toString());
        fs.readFile('./readme2.txt', (err, data) => {
            if (err) {
                throw err;
            }
            console.log('3번', data.toString());
            console.log('끝');
        });
    });
});
```
콜백 지옥을 Promise나 async/await로 해결한다면
```js
const fs = require('fs').promises;

console.log('시작');
fs.readFile('./readme2.txt')
    .then((data) => {
        console.log('1번', data.toString());
        return fs.readFile('./readme2.txt');
    })
    .then((data) => {
        console.log('2번', data.toString());
        return fs.readFile('./readme2.txt');
    })
    .then((data) => {
        console.log('3번', data.toString());
        console.log('끝');
    })
    .catch((err) => {
        console.error(err);
    });
```

## 3.6.2 버퍼와 스트림 이해하기

파일을 읽거나 쓰는 방식에는 버퍼를 이용하는 방식과 스트림을 이용하는 방식이 있다. 인터넷 영상을 시청할 때, 영상을 로딩할 때는 버퍼링한다고 하며 영상을 실시간으로 송출할 때는 스트리밍한다고 한다.

버퍼링은 영상을 재생할 수 있을 때까지 데이터를 모으는 동작이고, 스트리밍은 방송인의 컴퓨터에서 시청자의 컴퓨터로 영상 데이터를 조금씩 전송하는 동작이다. 스트리밍하는 과정에서 버퍼링을 할 수 있다.

앞에서 readFile 메서드를 사용할 때 읽었던 파일이 버퍼 형식으로 출력되었다. 노드는 **파일을 읽을 때 메모리에 파일 크기만큼 공간을 마련**해두며 파일 데이터를 메모리에 저장한 뒤 사용자가 조작할 수 있도록 한다. 이때 **메모리에 저장된 데이터**가 버퍼이다.

* from(문자열): 문자열을 버퍼로 바꿀 수 있다. length 속성은 버퍼의 크기를 알린다.
* toString(버퍼): 버퍼를 다시 문자열로 바꿀 수 있다. 이때 base64나 hex를 인수로 넣으면 해당 인코딩으로도 변환 가능
* concat(배열): 배열 안에 든 버퍼들을 하나로 합친다.
* alloc(바이트): 빈 버퍼를 생성. 바이트를 인수로 받아 해당 크기의 버퍼가 생성됨

readFile 방식의 버퍼가 편리하기는 하지만 용량이 크면 클 수록 그 만큼의 버퍼를 만들어야 한다. 특히 서버처럼 몇 명이 이용할지 모르는 환경에서는 메모리 문제가 발생할 수 있다. 그리고 모든 버퍼를 다 쓴 후에야 다음 동작으로 넘어가기 때문에 전체를 다 처리해야 한다.

그래서 **버퍼의 크기를 작게 만든 후 여러 번 나눠 보내는 방식**이 등장했으며, 이를 편리하게 만든 것이 스트림이다.

```js
const fs = require('fs');

const readStream = fs.createReadStream('./readme3.txt', { highWaterMark: 16 });
const data = [];

readStream.on('data', (chunk) => {
    data.push(chunk);
    console.log('data:', chunk, chunk.length);
});

readStream.on('end', () => {
    console.log('end:', Buffer.concat(data).toString());
});

readStream.on('error', (err) => {
    console.log('error:', err);
});
```

먼저 createReadStream으로 읽기 스트림을 만든다. 첫 번째 인수로 읽을 파일 경로를 넣고, 두 번째 인수는 옵션 객체인데 highWaterMark라는 옵션이 버퍼의 크기(바이트 단위)를 정할 수 있는 옵션이다.

readStream은 이벤트 리스너를 붙여서 사용한다. 보통 data, end, error 이벤트를 사용한다. 파일을 읽기 시작되면 data 이벤트가, 읽는 도중 에러가 발생하면 error 이벤트가 호출된다. 파일을 다 읽으면 end 이벤트가 발생한다.

* 파일을 쓸 때도 알아보자
```js
const fs = require('fs');

const writeStream = fs.createWriteStream('./writeme2.txt');
writeStream.on('finish', () => {
    console.log('파일 쓰기 완료');
})

writeStream.write('이 글을 씁니다.\n');
writeStream.write('한 번 더 씁니다.');
writeStream.end();
```

먼저 createWriteStream으로 쓰기 스트림을 만든다. 첫 번째 인수로는 출력 파일명을 입력하며 두 번째 인수는 옵션이다.

finish 이벤트 리스너도 있는데, 파일 쓰기가 종료되면 콜백 함수가 호출된다.

writeStream에서 제공하는 write 메서드로 넣은 데이터를 쓴다. 데이터를 다 썼다면 end 메서드로 종료를 알라고 이때 finish 이벤트가 발생한다.

createReadStream으로 파일을 읽고 그 스트림을 전달받아 createWriteStream으로 파일을 쓸 수도 있다. 스트림끼리 연결하는 것을 **'파이핑한다'** 고 표현한다.

```js
const fs = require('fs');

const readStream = fs.createReadStream('readme4.txt');
const writeStream = fs.createWriteStream('readme3.txt');
readStream.pipe(writeStream);
```
미리 읽기 스트림과 쓰기 스트림을 만들어둔 후 두 개의 스트림 사이를 pipe 메서드로 연결하면 저절로 데이터가 writeStream으로 넘어간다. pipe는 스트림 사이에 여러 번 연결할 수 있다.

```js
const zlib = require('zlib');
const fs = require('fs');

const readStream = fs.createReadStream('./readme4.txt');
const zlibStream = zlib.createGzip();
const writeStream = fs.createWriteStream('./readme.txt.gz');
readStream.pipe(zlibStream).pipe(writeStream);
```

readFile 메서드와 부분으로 나눠 읽는 createReadStream 메서드의 메모리 사용량은 1GB 용량의 파일을 다룰 때 1GB 메모리를 차지하는 버퍼 방식에 비해 스트림방식은 약 40~60MB밖에 차지하지 않는다. 스트림을 사용하면 효과적으로 데이터를 전송할 수 있다.