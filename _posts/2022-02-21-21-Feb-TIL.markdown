---
layout: post
title:  "21 Feb TIL: JS함수, 객체 등 및 Git 풀 리퀘스트, 릴리즈"
excerpt: "TIL"
date:   2022-02-21 11:52:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# 17. 함수

* 반복문을 쓰고자 한들 반복문을 쓸 수 없는 경우가 있다. 연속적으로 반복되는 것이 아니라 연속되지 않게 반복된다면 반복문을 사용하는 것이 어렵거나 불가능해진다.
* 이럴 때, 반복되는 코드를 함수로 작성한다.

```html
<script>
    function two() {
        document.write('<li>2-1</li>');
        document.write('<li>2-2</li>');
    }
    document.write('<li>1</li>');
    two();
    document.write('<li>3</li>');
    two();
</script>
```

* 함수 function을 정의한 후 함수를 실행하면 *중괄호에 있는 함수 내용이 실행된다. 이것이 기본적인 함수의 문법이다.

# 18. 매개변수와 인자

* 자판기를 사용할 때, 언제나 똑같은 제품을 받을 수 있는 자판기도 있지만, 원하는 제품을 선택하면 그 제품에 해당하는 제품을 제공하는 자판기가 더 효용이 있을 것이다.
* 이때, 제품을 선택하는 것을 입력이라 할 수 있고, 자판기가 그 입력에 대해 해당하는 제품을 제공하는 것은 출력이라 할 수 있다.
* 이 입력에 해당하는 것을 **매개변수(parameter)** 또는 **인자(argument)** 라고한다.
* 출력에 해당하는 것은 **return**과 관련있다.

```html
<script>
function onePlusOne() {
    document.write(1+1+'<br>');
}
onePlusOne();
</script>
```

이렇게 함수를 정의할 수도 있지만,

```html
<script>
function sum(left, right) {
    document.write(left + right + '<br>');
}
sum(2, 3);
sum(3, 4);
```

* 위처럼 `left`, `right`같은 변수를 매개하는 **매개변수(parameter)** 를 설정하여 유연하게 함수를 사용할 수 있다.
* 이후 함수에 직접 값을 삽입하여 함수를 실행할 수 있는데, 이 입력하는 값을 **인자(argument)** 라고 한다.

# 19. 함수(return 문)

* 이번에 배울 출력은 **return**이라는 것과 관련이 있다.
* 그럼 return을 배우기 전에 **표현식(expression)** 이라는 것이 무엇인지 확인하겠다.
* 내가 함수를 사용해 정보를 출력하는 데에 있어 줄바꿈을 포함한 채 출력하거나 하는 등의 과정을 표현할 수 있는데, 더욱 다양하게 사용하기 위해서 값을 반환하는 return을 사용할 수 있다.

```html
<script>
    function sum2(left, right) {
        return left + right;
    }
    document.write(sum2(2, 3) + '<br>');
    document.write('<div style="color: red;">' + sum2(2, 3) + '</div><br>');
    document.write('<div style="font-size: 3rem">' + sum2(2, 3) + '</div><br>')
</script>
```
계산한 값을 리턴하므로 원자화된 기능을 다양한 맥락에서 사용할 수 있는 자유가 생기게 된다. return을 통해 출력함으로써 다양한 용도로 함수를 활용할 수 있게 된다.

# 20. 함수의 활용

* 앞서 사용한 `nightDayHandler()` 함수를 정의하고 `<input>` 태그를 재작성 했을 때,

```html
... 생략 ...

<head>
    <title>WEB1 - JavaScript</title>
    <meta charset="utf-8">
    <script>
        function nightDayHandler() {
            var target = document.querySelector('body');
            if(this.value === 'night') {
                target.style.backgroundColor = 'black';
                target.style.color = 'white';
                this.value = 'day';

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            } else {
                target.style.backgroundColor = 'white';
                target.style.color = 'black';
                this.value = 'night';

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }
            }
        }
    </script>
</head>

... 생략 ...

<input type="button" value="night" onclick="
    nightDayHandler();
">

... 생략 ...

<input type="button" value="night" onclick="
    nightDayHandler();
">
```

* 이렇게 했을 때 버튼을 두 번 클릭했을 때부터 변화가 생기며, input 버튼의 값이 night에서 day로 레이블이 바뀌지 않는다.
* onclick 이벤트 안에서 this는 이 이벤트가 소속된 태그를 가리키도록 되어 있는데, 독립된 `nightDayHandler()` 안의 코드에서 this라는 값은 더 이상 input 버튼이 아니고, 전역 객체를 갖게 된다.
* 그래서 함수 안에서 this 값이 input 버튼을 가리키도록 `nightDayHandler()`이 실행될 때 this 값을 준다.

```html
... 생략 ...

<head>
    <title>WEB1 - JavaScript</title>
    <meta charset="utf-8">
    <script>
        function nightDayHandler(self) {        // self 매개변수 추가
            var target = document.querySelector('body');
            if(self.value === 'night') {        // this -> self로 변경
                target.style.backgroundColor = 'black';
                target.style.color = 'white';
                self.value = 'day';             // this -> self로 변경

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'powderblue';
                    console.log(alist[i]);
                    i = i + 1;
                }

            } else {
                target.style.backgroundColor = 'white';
                target.style.color = 'black';
                self.value = 'night';           // this -> self로 변경

                var alist = document.querySelectorAll('a');
                var i = 0;
                while(i < alist.length) {
                    alist[i].style.color = 'blue';
                    console.log(alist[i]);
                    i = i + 1;
                }
            }
        }
    </script>
</head>

... 생략 ...

<input type="button" value="night" onclick="
    nightDayHandler(this); // this 인자 추가
">

... 생략 ...

<input type="button" value="night" onclick="
    nightDayHandler(this); // this 인자 추가
">
```

# 21. 객체 예고

* 프로그래밍을 하다 보면 코드가 많아지고, 코드가 많아지면 잘 정리 정돈하기 위해 함수라는 것을 쓴다. 그리고 함수뿐만 아니라 연관돼 있는 변수가 엄청나게 많아지면 역시나 똑같이 복잡도의 한계에 도달하게 된다. 바로 그러한 상황에서 서로 연관된 함수와 변수를 같은 이름으로 그루핑해서 잘 정리 정돈하기 위한 도구가 바로 **객체**이다.

```html
<script>
    function LinksSetColor(color) {
        var alist = document.querySelectorAll('a');
        var i = 0;
        while(i < alist.length) {
            alist[i].style.color = color;
            console.log(alist[i]);
            i = i + 1;
        }
    }
    function BodySetColor(color) {
        document.querySelector('body').style.color = color;
    }
    function BodySetBackgroundColor(color) {
        document.querySelector('body').style.backgroundColor = color;
    }
    function nightDayHandler(self) {
        var target = document.querySelector('body');
        if(self.value === 'night') {
            BodySetBackgroundColor('black');
            BodySetColor('white');
            self.value = 'day';

            LinksSetColor('powderblue');
        } else {
            BodySetBackgroundColor('white');
            BodySetColor('black');
            self.value = 'night';

            LinksSetColor('blue');
        }
    }
</script>
```
이전 코드를 위 코드로 변경함으로써 함수를 더 명확하고 간결하게 이해할 수 있다.

* 그런데 이름을 바꾸는 것 외에도 서로 연관된 함수와 변수를 그루핑해서 사용할 수 있도록 객체를 사용할 수도 있다. 

예를 들어 Body와 Links 라는 객체가 있다면, 다음과 같이 작성할 수도 있다.

```html
<!-- 실제로 동작하기 않는 코드 -->
<script>
    
    ... 생략 ...

    function nightDayHandler(self) {
        var target = document.querySelector('body');
        if(self.value === 'night') {
            Body.setBackgroundColor('black');
            Body.setColor('white');
            self.value = 'day';

            Links.setColor('powderblue');
        } else {
            Body.setBackgroundColor('white');
            Body.setColor('black');
            self.value = 'night';

            Links.setColor('blue');
        }
    }
</script>
```

* 단순히 함수의 이름 자체를 바꾸는 것보다 간결하게 그루핑할 수 있기 때문에 정리정돈이 더 깔끔한 것을 볼 수 있다.
* 또한 `document`의 경우에도 역시 객체임을 알 수 있다. 즉, `querySelector()`라는 것이 `document`라는 객체에 속한 함수임을 알 수 있다.
* 그리고 객체에 속한 함수는 함수라 하지 않고 **메서드**라고 부른다.

# 22. 객체 쓰기와 읽기

* 앞서 배열은 정보를 담는 그릇이면서 동시에 정보가 순서대로 저장된다는 특징을 지니고 있다.
* 이에 반해 순서 없이 저장할 수 있는 정보가 있는데 그것이 바로 **객체**이다.
* 하지만 데이터를 무작위로 집어넣는 것이 아니라 어떤 물건을 수납 상자에 집어 넣으면서 그 물건이나 사물에 대한 이름을 함께 넣어야 그 이름으로 물건을 꺼낼 수 있게 된다.

```html
<script>
    var coworkers = {
        
    }
</script>
```

이 상태에서 coworkers 변수에 객체를 담을 건데, 객체를 만들 때 사용하는 기호를 **객체 리터럴(object literal)** 이라고 한다. 그리고 객체는 중괄호를 사용한다.

```html
<script>
    var coworkers = {
        "programmer":"egoing",
        "designer":"leezche"
    }
</script>
```

이후 정보를 꺼낼 때는

```html
<script>
    var coworkers = {
        "programmer":"egoing",
        "designer":"leezche"
    }
    document.write("programmer : " + coworkers.programmer + "<br>");
    document.write("designer : " + coworkers.designer + "<br>")
</script>
```

이와 같이 뽑아낼 수 있다. 즉, coworkers 다음에 있는 점(.)은 **객체 접근 연산자(object access operator)** 라고 한다. 객체에 접근하는 연산자인 것이다.

* 객체에 정보를 추가하는 방법 또한, 어렵지 않다.

```html
<script>
    var coworkers = {
        "programmer":"egoing",
        "designer":"leezche"
    }
    document.write("programmer : " + coworkers.programmer + "<br>");
    document.write("designer : " + coworkers.designer + "<br>");
    coworkers.bookkeeper = "duru";
    document.write("bookkeeper : " + coworkers.bookkeeper + "<br>");
</script>
```

그런데, data scientist라는 이름을 넣고자 할 때 문법적으로 오류가 발생할 수 있다. 이것은 점(.)으로 할 수 없고 대괄호를 써서 문자열 형태로 넣으면 똑같은 효과를 가져올 수 있다.

```html
<script>
    
    ... 생략 ...

    coworkers["data scientist"] = "taeho";
    document.write("data scientist : " + coworkers["data scientist"] + "<br>");
</script>
```

# 23. 객체와 반복문

---
## 3-5. 브랜치를 합치는 예의바른 방법: 풀 리퀘스트

### 3-5-1. 풀 리퀘스트 만들기

* master 브랜치에 합치기 전에 이 브랜치에서 무엇을 바꾸었는지 협력자(Collaborators)가 확인할 수 있는 방법을 거쳐야 할 수 있다. 신입 개발자가 사수 개발자의 허락을 맡는 것과 같다.
* 이때, **풀 리퀘스트(Pull Request)** 가 필요하다. 협력자에게 브랜치 병합을 요청하는 메시지를 보내는 것이다.

> 1. 새 브랜치를 만든 후 새 파일을 만들고 스테이징 후 커밋, 푸시하여 원격저장소에 올린다.
> 
> 2. 이후 Compare & pull request 버튼을 클릭한다.
> 
>     1. base: master - 병합된 커밋이 들어갈 브랜치를 정하는 선택박스
> 
>     2. compare: feature/comment - 병합의 대상이 될, 즉 내가 만들어서 base 브랜치에 반영시키고 
> 싶은 브랜치
>     3. Able to merge - base 브랜치와 compare 브랜치가 충돌 없이 병합될 수 있다는 뜻. GitHub에서 
> 자동으로 계산해서 보여준다. 만약 충돌이 난다면 빨간색으로 Conflict가 있다고 보여진다.
>     4. 풀 리퀘스트 제목 - 동료 개발자가 한 눈에 이해하기 쉬운 제목을 적는다.
> 
>     5. 풀 리퀘스트 내용 - 동료 개발자가 코드를 이해하는 데 도움이 되는 설명을 적어준다. 
> 스크린샷을 첨부하거나 테스트하는 방법을 적을 수 있다.
>     6. Reviewers - 저장소의 협력자가 여러 명이라면 몇 명을 콕 찝어서 이 풀 리퀘스트를 검토해 달라 
> 요청할 수 있습니다. 보통 같은 팀원이나 해당 기능과 연관된 동료를 선택한다.
>     7. Assignees - 이 풀 리퀘스트를 담당하는 동료를 적어준다. 보통 자기 자신이다.
> 
>     8. Labels - 이 풀 리퀘스트에 관한 라벨을 달아준다. ex) [버그], [리뷰 필요], [프론트엔드], 
> [백엔드] 등
> 
> 3. 원격저장소에서 협력자가 이 풀 리퀘스트를 확인하고 새롭게 추가된 코드를 점검할 수 있다. 코드의 라인마다 댓글을 달 수 있어서 해당 코드가 왜 고쳐졌는지, 혹은 어떻게 개선할 수 있는지 풀 리퀘스트 내부에서 토론을 진행할 수 있다. 협력자는 이 풀 리퀘스트를 **수락(Accept)** 할 수 있고, 수정을 **요청(Request change)** 할 수 있으며, **병합(Merge pull request)** 할 수도 있다.
> 
> 4. Merge pull request 버튼을 누르면 병합 커밋을 만들 수 있는 입력창이 있는데, 입력할 메시지를 입력하고 **[Confirm merge]** 버튼을 클릭한다.
> 5. 닫힌 풀 리퀘스트는 [Pull Requests] 탭의 [Closed]에서 확인할 수 있다.
> 6. Git에서 새로운 이력을 업데이트 하는 명령은 [페치(fetch)]이다. 풀이 실제 코드를 내려받는 데 비해 페치는 그래프만 업데이트한다.
> 7. 내 컴퓨터의 [master] 브랜치에도 이 새로운 커밋을 반영하기 위하여 [master]로 브랜치를 옮긴다(checkout).
> 8. Pull하여 origin/master와 동일하게 커밋을 가리키도록 한다.

## 3-6. 개발이 완료되었습니다, 출시하자!: 릴리즈(release)

### 3-6-1. 프로그램의 버전(version)이란?

* 아이폰9, 포토샵 6.0, 7.0과 같이 제품이름에 버전명이 들어가 있는 것을 볼 수 있는데, Git에서 말하는 버전과도 비슷한 맥락으로, 의미 있는 특정 시점의 맥락을 말하는 것이다.
* 버전을 올리는 것은 크게 **메이저(Major)** 업그레이드와 **마이너(Minor)** 업그레이드로 나뉜다. 사용자들이 크게 느낄 변화를 적용했을 때 보통 메이저 버전을 올리고(v2.x → v3.x), 작은 변화 등이 생겼을 땐 마이너 버전을 올린다(v.2.3 → v.2.4).
* node.js의 경우 10.15.0 LTS 버전을 볼 수 있는데, 메이저 버전인 10, 마이너 버전인 15를 볼 수 있고, 그 뒤에 세 번째 버전이 있음을 알 수 있다. 이는 **메인터넌스(Maintenance)** 버전으로 버그나 유지보수 등 작은 수정이 들어갔을 때 바꾼다.

### 3-6-2. 특정 커밋에 포스트잇 붙이기 - 태그(tag)

* 프로그램을 출시하는 것을 **'릴리즈(release)'** 라고 한다. 병합을 마친 [master] 브랜치를 서버에 올려서 사용자들이 쓸 수 있도록 배포하고, 현재 코드 상태를 버전 v1.0.0이라고 기록하려고 한다. 이것은 **태그(tag)** 를 통해 간단하게 표시할 수 있다.

> 1. [master] 브랜치에 있는 상태에서 소스트리 상단의 [태그] 아이콘을 클릭하고 태그 이름을 'v1.0.0'이라고 적은 뒤 [태그 추가] 버튼을 클릭한다.
> 
> 2. [master] 브랜치 라벨 옆에 [v1.0.0] 라벨이 새로 붙은 것을 확인 할 수 있다. 브랜치와 비슷하게 생겼는데, 둘 다 커밋을 가리키는 가벼운 포인터이기 때문이다.
> 3. 만든 태그는 브랜치가 그랬던 것처럼 푸시를 해줘야 원격저장소에서도 볼 수 있다. 소스트리의 [Push] 아이콘을 눌러 팝업창을 띄우고 [모든 태그 푸시]라는 체크박스를 체크하고 [Push]를 클릭해서 태그를 원격저장소에 푸시한다.
> 4. GitHub의 원격저장소를 보면 [1 release]라고 표시된 탭이 있어 클릭한다.
> 5. 방금 만든 태그를 확인할 수 있고, [zip] 아이콘을 눌러 해당 태그가 가리키는 버전을 압축파일로 내려받을 수 있다.

# Chapter 4. 둘 이상의 원격저장소로 협업하기

## 4-1. 원본저장소를 복사해서 너구리의 원격저장소를 만든다(fork)

원본저장소에 바로 커밋을 올릴 권한이 없을 때, 원본저장소를 복사해서 본인의 GitHub에 새로운 원격저장소를 만들고, 이곳에서 커밋을 올리기로 한다. 새로운 원격저장소는 나만이 사용하는 공간으로 온갖 실험적인 커밋을 게시할 수 있다. 이렇게 남의 원본저장소를 내 계정의 원격저장소로 복사해오는 명령어는 **포크(fork)** 이다.

### 4-1-1. 평행세계를 만드는 브랜치(branch), 평행우주를 만드는 포크(fork)

* 기본적으로 원본저장소에 커밋을 직접 푸시할 수 있는 사람은 원본저장소를 만든 본인(소유자)뿐이다. 다른 사람이 이곳에 푸시하려면 원본저장소의 소유자가 이 사람을 협력자로 등록해야 한다. 원본저장소의 소유자가 협력자로 등록하려면 원본저장소의 메뉴에서 [Settings - Collaborators] 페이지에 들어가서 등록하려는 유저를 찾고, [Add collaborator]를 클릭하면 된다.

* 그런데 원본저장소의 소유자 입장에서는 협력자가 늘어날수록 원본저장소를 관리하기가 어려워진다. 협력자가 원본저장소에 직접 푸시할 수 있기 때문이다. 하지만, 동시에 많은 개발자에게 의견을 받고 오픈소스를 개선하고 싶은 니즈가 있다. 한편 개발자는 오픈소스에 참여하고 기여를 하고 싶어한다. 그렇지만 원본저장소에 직접 푸시하는 것은 부담이 생긴다.

* 이럴 때 대안디 될 수 있는 방법이 **풀 리퀘스트**이다. 개발자는 원본저장소를 자신의 계정에 복사(fork)해서 원격저장소를 생성하고, 이곳에 커밋을 올린 후 원본저장소의 소유자에게 병합요청을 하면 원본저장소의 소유자는 개발자의 병합 요청을 검토해서 원본저장소에 반영하는 것이다. *브랜치를 통해 코드 분기점을 만들고 풀 리퀘스트를 통해 서로 확인하고 병합하는 과정이랑 동일하다.*

* 포크는 브랜치를 포함한 원본저장소의 모든 커밋 이력을 새로운 원격저장소로 통째로 복사한다. 원본저장소의 이력을 보려면 추가적으로 이곳의 원격저장소 주소를 등록해야 한다.

### 4-1-2. 남의 저장소를 내 계정에 통째로 복제하기(Fork)

> 1. 새로 만든 계정을 통해 원본저장소에 접속하여 우측 상단 [Fork]버튼을 클릭하면 원본저장소가 내 계정에 복사된다.
> 
> 2. 포크되어 새롭게 만들어진 나의 원격저장소를 내 컴퓨터로 받아오기 위해 원격저장소의 주소를 복사한다.
> 
> 3. 소스트리에서 새탭을 생성하고 Clone을 클릭하여여 원격저장소의 주소를 입력한다.
> 
> 4. 원격저장소와 연결할 내 컴퓨터의 로컬저장소 폴더를 만들어서 선택한다.
> 
> 5. 세 번째 입력란에는 원하는 이름을 입력하고 [클론] 버튼을 클릭한다.
> 
> 6. 소스트리에 새로 로그인한다.
> 
> 7. 원하는 계정을 설정 초기화 텍스트를 클릭하여 기본 계정으로 전환한다. 
> 
> 8. 새 계정으로 커밋을 생성한 뒤 계정이 새 계정으로 되어있는지 확인한다.
>    * 만약 아니라면, 사람 아이콘을 클릭하고 '대체 작성자 정보
>