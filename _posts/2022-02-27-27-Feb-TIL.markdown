---
layout: post
title:  "27 Feb TIL: Git 5가지 기능"
excerpt: "Git-amend, cherry-pick, reset, revert, stash"
date:   2022-02-26 12:28:00 +0900
categories: 
  - Study
tags:
  - TIL
---

### 4-3-3. 묵은 커밋을 방금 한 커밋처럼: 리베이스(Rebase)

* 풀 리퀘스트를 보냈을 때 충돌이 난다면 두 가지 방법을 택할 수 있습니다. 첫 번째는 현재 커밋과 병합하고 싶은 커밋을 미리 내 브랜치에서 병합 커밋을 만들고 이를 풀 리퀘스트로 보내는 방법입니다.

* 충돌이 발생하는 부분을 해결하고 만든 병합 커밋을 올리면 충돌이 나지는 않지만, 풀 리퀘스트에서 불필요한 커밋의 이력이 생기게 됩니다. 이를 위해서 묵은 커밋을 방금 한 커밋처럼 이력을 조작하는 것입니다.

* 원본저장소의 옛 커밋을 base로 원격저장소가 커밋을 진행하였고, 원본저장소는 base에서 커밋을 또 올렸을 때, 커밋의 베이스를 원본저장소의 새 커밋으로 옮기면 빨리감기 머지가 가능한 상태일 것입니다.

* 이렇게 커밋의 베이스를 떼어내 다른 곳으로 붙이는 것이 리베이스(rebase)입니다. 예전에 커밋을 기준으로 만들었던 브랜치를, 최신 코드를 기준으로 만든 것처럼 조작하는 것입니다.

> 소스트리에서 재배치를 누른 후 충돌이 난 부분을 수정한 이후 재배치를 계속하여 리베이스 한다. 이때, 푸시를 하게 되면 히스토리를 강제로 조작하는 것이기 때문에 다른 개발자가 이 변경 사항을 사용하지 있지 않아야 한다.

# Chapter 5. 실무 사례와 함께 Git 배우기

## 5-1. 실습을 위한 사전 준비: 새로운 원격저장소 만들기

* GitHub에서 New repository를 만들고 소스트리에서 클론

## 5-2. amend: 수정 못한 파일이 있어요, 방금 만든 커밋에 추가하고 싶어요.

### 5-2-1. amend로 마지막 커밋 수정하기

* 파일을 생성하여 커밋을 한 이후, 파일의 수정을 깜빡하여 다시 수정을 하고 재커밋을 올리는 것 보다 커밋을 수정하는 편이 더 깔끔할 것입니다.

* 소스트리에서 수정 사항을 스테이지에 올리고 커밋 옵션에서 마지막 커밋 정정 옵션을 선택한 채 커밋을 올리면 됩니다.

### 5-2-2. amend로 마지막 커밋 메시지를 수정하고 원격저장소 브랜치에 강제 푸시하기

* 소스트리에서 마지막 커밋 정정으로 다시 커밋을 수정하고, 푸시할 때는 [강제 푸시]로 로컬저장소의 변경사항을 원격저장소에 강제로 덮어씌웁니다.

## 5-3. cherry-pick: 저 커밋 하나만 떼서 지금 브랜치에 붙이고 싶어요.

### 5-3-1. cherry-pick: 다른 브랜치의 커밋 하나만 내 브랜치에 반영하기

* 다른 브랜치에서 내 브랜치로 추가하면 좋을 커밋을 받기 위해 병합할 필요 없이 다른 브랜치의 커밋을 체리픽하여 내 브랜치의 최신 커밋으로 불러올 수 있습니다.

## 5-4. reset: 옛날 커밋으로 브랜치를 되돌리고 싶어요

### 5-4-1. Soft/Mixed reset: 모든 기억을 남기면서 브랜치를 되돌리기

* 원하는 시점의 커밋에 마우스 우클릭하여 [이 커밋까지 현재 브랜치를 초기화]를 선택합니다. 모드는 [Soft], [Mixed], [Hard] 모드 중 하나를 선택해야 합니다.

* Soft 모드는 변경사항을 커밋하기 전 상태로 되돌리며, 변경 사항을 스테이지 위로 둬서 다시 당장 커밋할 수 있고, Mixed모드는 스테이지 아래로 두어서 어떤 것을 다시 스테이지 위로 Add 할지 선택할 수 있습니다.

### 5-4-2. Hard reset: 모든 기억을 지우며 브랜치를 되돌리기

* Hard 모드는 이전의 커밋은 모두 지우는 것입니다. 원격브랜치에도 적용하기 위해서는 히스토리를 조작하는 것이기 때문에 강제푸시로 푸시해줍니다.

## 5-5. revert: 이 커밋의 변경사항을 되돌리고 싶어요

* 변경사항을 되돌리기 위해 되돌리고 싶은 커밋에서 [커밋 되돌리기]를 선택합니다.

## 5-6. stash: 변경 사항을 잠시 다른 곳에 저장하고 싶어요, 커밋은 안 만들래요

현재 브랜치에서 개발하고 있는데 급히 고쳐야 하는 버그가 발생했습니다. 그런데 현재 브랜치에는 아직 커밋하지 않은 변경사항이 있습니다. 하지만 커밋하기에는 애매한 파일들입니다. 이때 이 변경사항을 잠시 보관해두었다가 다시 사용하는 것이 스태시(stash)입니다.

---


# Chapter 7. 배열을 쉽게 다루자! Array 객체

## 7-1. Array 객체란?

### Array 객체로 배열 만들기

Array 객체를 사용해 인스턴스를 만듭니다.

```js
var myArray = new Array(); // Array 객체의 인스턴스를 만듭니다.
```

초깃갑이 있는 배열이라면 리터럴을 사용한 방법으로 배열을 만들 수도 있고 Array 객체를 사용해서 만들 수도 있습니다.

```js
var numbers = ["one", "two", "three", "four"];   // 리터럴을 사용한 배열
var numbers = new Array("one", "two", "three", "four");   // Array 객체를 사용한 배열
```

### 배열에서 for문 사용하기

배열에 있는 값을 전부 확인하기 위해서는 for문을 처음 요소부터 끝 요소까지 반복합니다. 배열의 원소 개수를 확인하려면 Array 객체의 length 속성을 사용합니다.

```js
var seasons = ["봄", "여름", "가을", "겨울"];
seasons.length
```

Array의 모든 요소를 가져오기 for문과 length 속성을 이용합니다.

```js
for (var i = 0; i < seasons.length; i++) {
    console.log(seasons[i]);
}
```

## 7-2. Array 객체의 함수 알아보기

### 둘 이상의 배열을 연결하는 concat() 함수

```js
var nums = ["1", "2", "3"];
var chars = ["a", "b", "c", "d"];
nums.concat(chars)
(7) ['1', '2', '3', 'a', 'b', 'c', 'd']
```

concat() 함수는 새로운 배열을 만들기 때문에 기존의 배열에는 영향을 주지 않습니다.

### 배열 요소를 연결하는 join() 함수

`join()` 함수는 배열 요소를 연결하는 함수입니다. 배열 요소를 연결할 때는 각 요소 사이에 넣을 구분 기호가 필요한데, 지정하지 않으면 콤마(,)로 구분하며, join() 괄호에 값을 직접 넣어 구분할 수도 있습니다.

```js
nums.join()
"1,2,3"
nums.join("-")
"1-2-3"
```

### 새로운 요소를 추가하는 `push()` 함수와 `unshift()` 함수

배열의 맨 끝에 요소를 추가하려면 `push()` 함수를 사용하고, 배열의 맨 앞에 추가하려면 unshift 함수를 사용합니다.

```js
nums.push("4", "5")
5
nums
(5) ["1", "2", "3", "4", "5"]
```

```js
nums.unshift("0")
6
nums
(6) ["0", "1", "2", "3", "4", "5"]
```

### 배열에서 요소를 추출하는 `pop()` 함수와 `shift()` 함수

Array 객체에서 맨 뒤에 있는 요소를 추출할 때는 `pop()` 함수를, 맨 앞에 있는 요소를 추출할 때는 `shift()` 함수를 사용합니다.

```js
var study = ["html", "css", "javascript"];
study.pop()
'javascript'
study
(2) ['html', 'css']
```

```js
var js = ["es6+", "node", "react", "angular", "vue"];
js.shift()
'es6+'
js
(4) ['node', 'react', 'angular', 'vue']
```

### 원하는 위치의 요소를 삭제하거나 추가하는 `splice()` 함수

앞서 살펴본 `push()` 함수와 `unshift()` 함수는 배열의 맨 앞 또는 맨 뒤에 요소를 추가하는 함수이고, `pop()` 함수와 `shift()` 함수는 배열의 맨 앞 또는 맨 뒤의 요소를 추출하는 함수였습니다.  
  
만약 배열의 중간 부분에 요소를 추가하거나 삭제하고 싶거나, 한꺼번에 2개 이상의 요소를 추가하거나 삭제하기 위해서 사용하는 함수가 `splice()`함수입니다.
  
#### 인수가 1개일 경우
  
괄호 안의 인수는 그 배열의 인덱스 값을 가리킵니다.  
  
splice() 함수는 인수의 인덱스부터 끝에 있는 요소까지 모두 삭제합니다.

```js
var numbers = [0, 1, 2, 3, 4, 5]
numbers.splice(2)
(4) [2, 3, 4, 5]
numbers
(2) [0, 1]
```

#### 인수가 2개일 경우

splice() 함수에 인수가 2개일 경우 첫 번째 인수는 인덱스 값이고 두 번째 인수는 삭제할 개수입니다.

```js
var study = ["html", "css", "web", "jquery"]
study.splice(2, 1)
▶ ['web']
study
▶ (3) ['html', 'css', 'jquery']
```

#### 인수가 3개 이상일 경우

세 번째 인수부터는 앞서 삭제한 위치에 새로 추가할 요소를 지정합니다.

```js
study.splice(2, 1, "js")
▶ ["jquery"]
study
▶ (3) ['html', 'css', 'js']
```

앞선 study 배열의 "jquery"가 없어지고 그 자리에 "js"가 추가되었습니다.  
  
기존 배열의 요소를 삭제하지 않고 새로운 요소를 추가하고 싶다면 삭제할 개수를 지정하는 두 번째 인수에 0을 넣으면 됩니다.

```js
study.splice(2, 0, "jquery")
▶ []
study
▶ (4) ['html', 'css', 'jquery', 'js']
```

여러 개의 요소를 추가하고 싶을 때는 추가하고 싶은 요소를 세 번째 인수부터 차례대로 나열하면 됩니다.

```js
var chars = ["a", "e", "f"]
chars.splice(1, 0, "b", "c", "d")
▶ []
chars
▶ (6) ['a', 'b', 'c', 'd', 'e', 'f']
```

### 원하는 위치의 요소들을 추출하는 `slice()` 함수

`slice()`함수는 파이썬의 슬라이스처럼 원하는 배열의 일부분을 꺼낼 수 있는 함수입니다. slice의 인수가 1개일 때는 인수 인덱스부터 맨 끝까지 요소를 꺼내오며, 인수가 2개일 때는 첫 번째 인수 인덱스부터 두 번째 인수 인덱스 직전까지 꺼내옵니다.

```js
var colors = ["red", "green", "blue", "white", "black"]
colors.slice(2)
▶ (3) ['blue', 'white', 'black']
colors
▶ (5) ['red', 'green', 'blue', 'white', 'black']
```

```js
var colors2 = colors.slice(1, 4)
colors2
▶ (3) ['green', 'blue', 'white']
colors
▶ (5) ['red', 'green', 'blue', 'white', 'black']
```