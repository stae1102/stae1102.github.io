---
layout: post
title: "09 Mar TIL: Nodejs 넌적스"
excerpt: "nodejs nunjucks"
date: 2022-03-08 16:29:00 +0900
categories:
  - Study
tags:
  - TIL
---

### 6.5.1.2 변수

자바스크립트 변수를 템플릿에 렌더링할 수 있다. res.render(템플릿, 변수 객체)는 익스프레스가 res 객체에 추가한 템플릿 렌더링을 위한 메서드이다. index.pug를 HTML로 렌더링하면서 { title: 'Express' }라는 객체를 변수로 집어 넣는다. layout.pug와 index.pug의 title 부분이 모두 Express로 치환된다. 즉, HTML에도 변수를 사용할 수 있게 된 셈이다.

res.render 메서드에 두 번째 인수로 변수 객체를 넣는 대신, res.locals 객체를 사용해서 변수를 넣을 수도 있다.

```js
router.get('/', function(req, res, next) {
    res.locals.title = 'Express';
    res.render('index');
});
```

이 방식의 장점은 현재 라우터 뿐만 아니라 다른 미들웨어에서도 res.locals 객체에 접근할 수 있다는 것이다.

서버로부터 받은 변수는 다양한 방식으로 퍼그에서 사용할 수 있다. **변수를 텍스트로 사용하고 싶다면 태그 뒤에 =을 붙인 후 변수를 입력한다.** 속성에도 =을 붙인 후 변수를 사용할 수 있다. 텍스트 중간에 변수를 넣으려면 #{변수}를 사용하면 된다. #{}의 내부와 =기호 뒷부분은 자바스크립트로 해설하므로 `placeholder=title + ' 연습'`과 같이 구문을 써도 된다.

내부에 직접 변수를 선언할 수도 있다. -를 먼저 입력하면 뒤에 자바스크립트 구문을 작성할 수 있다.

```pug
- const node = 'Node.js'
- const js = 'Javascript'
p #{node}와 #{js}
```

퍼그는 기본적으로 변수의 특수 문자를 HTML 엔티티(entity)로 이스케이프한다. 이스케이프를 원하지 않으면 = 대신 !=을 사용하면 된다.

```pug
p= '<strong>이스케이프</strong>' // <p>&lt;strong&gt;이스케이프&lt;/strong&gt;</p>
p!= '<strong>이스케이프하지 않음</strong>' // <p><strong>이스케이프하지 않음</strong></p>
```

> **HTML 엔티티**
> 
> * `<`: `&lt;`
> * `>`: `&gt;`
> * `&`: `&amp;`
> * `띄어쓰기`: `&nbsp;`
> * `"`: `&quot;`
> * `'`: `&apos;`

### 6.5.1.3 반복문

HTML과 다르게 반복문을 사용할 수 있다. 다음과 같이 each(혹은 for)로 반복문을 돌릴 수 있다.

```pug
ul
    each fruit in ['사과', '배', '오렌지', '바나나', '복숭아']
        li= fruit
```

인덱스를 가져올 수도 있다

```pug
ul
    each fruit, index in ['사과', '배', '오렌지', '바나나', '복숭아']
        li= (index + 1) + '번째 ' + fruit
```

### 6.5.1.4 조건문

조건문을 통해 분기처리할 수 있다. if, else if, else를 사용할 수 있다.

```pug
if isLoggedIn
    div 로그인 되었습니다.
else
    div 로그인이 필요합니다.
```

case문도 가능하다

```pug
case fruit
    when 'apple'
        p 사과입니다.
    when 'banana'
        p 바나나입니다.
    when 'orange'
        p 오렌지입니다.
    default
        p 사과도 바나나도 오렌지도 아닙니다.
```

### 6.5.1.5 include

다른 퍼그나 HTML 파일을 넣을 수 있다.

헤더나 푸터, 내비게이션처럼 웹 제작 시 공통되는 부분을 따로 관리할 수 있어 매 페이지마다 동일한 HTML을 넣어야 하는 번거로룸을 없앤다. `include 파일경로`로 사용한다.

```pug
include header
main
    h1 메인 파일
    p 다른 파일을 include할 수 있습니다.
include footer
```

#### 6.5.1.6 extends와 block

레이아웃을 정할 수 있다. 공통되는 레이아웃 부분을 따로 관리할 수 있어서 좋다. include와 함께 사용하곤 한다.

```js
extends layout

block content
    main
        p 내용입니다.

block script
    script(src="/main.js")
```

레이아웃이 될 파일에는 공통된 마크업을 넣되, 페이지마다 달라지는 부분을 block으로 비워둔다. block은 `block [블록명]`으로 선언한다.

block이 되는 파일에는 extends 키워드로 레이아웃 파일을 지정하고 block 부분을 넣는다. 나중에 익스프레스에서 res.render('body')를 사용해 하나의 HTML로 합쳐 렌더링할 수 있다. 퍼그 확장자는 생략 하능하다.

## 6.5.2 넌적스

넌적스는 퍼그의 HTML 문법 변화에 적응하기 힘든 분에게 적합한 템플릿 엔진이며, 파이어폭스 모질라에서 만들었다. HTML 문법을 그대로 사용하되 추가로 자바스크립트 문법을 사용할 수 있다.

```js
nunjucks.configure('views', {
    express: app,
    watch: true,
});
```

configure의 첫 번째 인수로 views 폴더의 경로를 넣고, 두 번째 인수로 옵션을 넣는다. 이때 express 속성에 app 객체를 연결한다. watch 옵션이 true이면 HTML 파일이 변경될 때 템플릿 엔진을 다시 렌더링한다.

html을 그대로 사용해도 되며, 넌적스임을 구분하려면 확장자로 njk를 쓰고, view engine도 njkk로 바꿔 쓴다.

### 6.5.2.1 변수

res.render 호출 시 보내는 변수를 넌적스가 처리한다.

```
{% raw %}
<h1>{{title}}</h1>
<p>Welcome to {{title}}</p>
<button class="{{title}}" type="submit">전송</button>
<input placeholder="{{title}} 연습" />
{% endraw %}
```
* 넌적스에서는 변수는 `{{ }}`로 감싼다.

* 내부에 변수를 사용할 수도 있다. 변수를 선언할 때는 `{% set 변수 = '값' %}`를 사용한다.

```
{% set node = 'Node.js' %}
{% set js = 'Javascript' %}
<p>{{node}}와 {{js}}</p>
```

HTML을 이스케이프하고 싶지 않다면 `{{ 변수 | safe }}`를 사용한다.

```
<p>{{'<strong>이스케이프</strong>'}}</p>
// <p>&lt;strong&gt;이스케이프&lt;/strong&gt;</p>
<p>{{'<strong>이스케이프 하지 않음</strong>' | safe }}</p>
// <p><strong>이스케이프 하지 않음</strong></p>
```

### 6.5.2.2 반복문

넌적스에서는 특수한 구문을 {% %} 안에 쓴다. 따라서 반복문도 이 안에 넣으면 된다. `for in`문과  `end for` 사이에 위치한다.

```
<ul>
    {% set fruits = ['사과', '배', '오렌지', '바나나', '복숭아'] %}
    {% for item in fruits %}
    <li>{{item}}</li>
    {% endfor %}
</ul>
```

반복문에서 인덱스를 사용하고 싶을 때는 loop.index라는 변수를 사용한다.

```
<ul>
    {% set fruits = ['사과', '배', '오렌지', '바나나', '복숭아'] %}
    {% for item in fruits %}
    <li>{{loop.index}}번째 {{item}}</li>
    {% endfor %}
</ul>
```

### 6.5.2.3 조건문

```
{% if isLoggedIn %}
<div>로그인 되었습니다.</div>
{% else %}
<div>로그인이 필요합니다.</div>
{% end if %}
```

case문은 없지만 elif를 통해 분기처리할 수 있다.

```
{% if fruit === 'apple' %}
<p>사과입니다.</p>
{% elif fruit === 'banana' %}
<p>바나나입니다.</p>
{% elif fruit === 'orange' %}
<p>오렌지입니다.</p>
{% else %}
<p>사과도 바나나도 오렌지도 아닙니다.</p>
{% end if %}
```

`{{ }}` 안에는 다음과 같이 사용한다.

```
<div>{{'참' if isLoggedIn}}</div>
<div>{{'참' if isLoggedIn else '거짓'}}</div>
```

### 6.5.2.4 include

다른 html 파일을 넣을 수 있다. 헤더나 푸터, 내비게이션 등을 따로 관리할 수 있어 번거롭지 않다. `include 파일경로`로 사용

```
{% include "header.html" %}
<main>
    <h1>메인 파일</h1>
    <p>다른 파일을 include할 수 있습니다.</p>
</main>
{% include "footer.html" %}
```

### 6.5.2.5 extends와 block

레이아읏을 정할 수 있다. 공통되는 레이아웃 부분을 따로 관리할 수 있어서 좋다.

```
{% extends 'layout.html' %}

{% block content %}
<main>
    <p>내용입니다.</p>
</main>
{% endblock %}

{% block script %}
<script src="/main.js"></script>
{% endblock %}
```

레이아웃이 될 파일에는 공통된 마크업을 넣되, 페이지마다 달라지는 부분을 block으로 비워둔다(`{% block [블록명] %}{% endblock %}`).

block이 되는 파일에서는 `{% extends 파일경로 %}` 키워드로 레이아웃 파일을 지정하고 block 부분을 넣는다. 나중에 익스프레스에서 res.render('body')를 사용해 하나의 html로 합친 후 렌더링할 수 있다.

## 6.5.3 에러 처리 미들웨어

만약 404 에러가 발생한다면 res.locals.message는 `${req.method} ${req.url} 라우터가 없습니다.`가 된다. next(error)에서 넘겨준 인수가 에러 처리 미들웨어의 err로 연결되기 때문이다.

에러 처리 미들웨어는 error라는 템플릿 파일(넌적스이므로 error.html)을 렌더링한다. 렌더링 시 res.locals.message와 res.locals.error에 넣어준 값을 함께 렌더링한다. res.render에 변수를 대입하는 것 외에도, 이렇게 res.locals 속성에 값을 대입하여 템플릿 엔진에 변수를 주입할 수 있다.

error 객체의 스택 트레이스(error.html의 error.stack)는 시스템 환경(process.env.NODE_ENV)이 production(배포 환경)이 아닌 경우에만 표시된다. 배포 환경인 경우에는 에러 메시지만 표시된다. 에러 스택 트레이스가 노출되면 보안에 취약할 수 있기 때문이다.