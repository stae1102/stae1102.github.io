---
layout: post
title:  "23 Feb TIL: js 자료형, 연산자, 운영체제란 무엇인가?"
excerpt: "js 자료형, 연산자, 운영체제란 무엇인가?"
date:   2022-02-23 22:14:00 +0900
categories: 
  - Study
tags:
  - TIL
---

- [Chapter 2. 자바스크립트와 친해지기](#chapter-2-자바스크립트와-친해지기)
  - [2-3. 외부 스크립트 파일 연결하기](#2-3-외부-스크립트-파일-연결하기)
  - [2-4. 나의 첫번째 자바스크립트 프로그램](#2-4-나의-첫번째-자바스크립트-프로그램)
    - [인사하는 브라우저 만들기](#인사하는-브라우저-만들기)
    - [자바스크립트 프로그램의 실행](#자바스크립트-프로그램의-실행)
  - [2-5. 자바스크립트의 입력과 출력](#2-5-자바스크립트의-입력과-출력)
    - [사용자 입력값 받기 - prompt() 함수](#사용자-입력값-받기---prompt-함수)
    - [알림창으로 출력하기 - alert() 함수](#알림창으로-출력하기---alert-함수)
    - [웹 브라우저 화면에 출력하기 - document.write() 함수](#웹-브라우저-화면에-출력하기---documentwrite-함수)
    - [콘솔에 출력하기 - console.log() 함수](#콘솔에-출력하기---consolelog-함수)
    - [크롬 브라우저 콘솔로 오류 찾아내기](#크롬-브라우저-콘솔로-오류-찾아내기)
  - [2-6. 자바스크립트 소스를 작성할 때 지켜야 할 규칙](#2-6-자바스크립트-소스를-작성할-때-지켜야-할-규칙)
    - [규칙 1 - 대소문자를 구별하여 소스를 작성한다.](#규칙-1---대소문자를-구별하여-소스를-작성한다)
    - [규칙 2 - 읽기 쉽게 들여 쓰는 습관을 들인다.](#규칙-2---읽기-쉽게-들여-쓰는-습관을-들인다)
    - [규칙 3 - 세미콜론으로 문장을 구분한다.](#규칙-3---세미콜론으로-문장을-구분한다)
    - [규칙 4 - 자바스크립트 소스에 메모를 하려면 주석을 사용한다.](#규칙-4---자바스크립트-소스에-메모를-하려면-주석을-사용한다)
    - [규칙 5 - 식별자는 정해진 규칙을 지켜 작성한다.](#규칙-5---식별자는-정해진-규칙을-지켜-작성한다)
    - [규칙 6 - 예약어는 식별자로 사용할 수 없다.](#규칙-6---예약어는-식별자로-사용할-수-없다)
- [Chapter 3. 변수와 자료형 그리고 연산자](#chapter-3-변수와-자료형-그리고-연산자)
  - [3-1. 변수란 무엇일까?](#3-1-변수란-무엇일까)
    - [수식으로 알아보는 상수와 변수](#수식으로-알아보는-상수와-변수)
    - [변수를 선언하는 규칙 세 가지](#변수를-선언하는-규칙-세-가지)
      - [규칙 1 - 이름은 의미 있게 짓는다.](#규칙-1---이름은-의미-있게-짓는다)
      - [규칙 2 - 여러 단어를 연결한 변수 이름은 낙타 모양으로 만들어준다.](#규칙-2---여러-단어를-연결한-변수-이름은-낙타-모양으로-만들어준다)
      - [규칙 3 - 선언할 수 없는 이름도 있다.](#규칙-3---선언할-수-없는-이름도-있다)
    - [변수에 값이나 식 저장하기](#변수에-값이나-식-저장하기)
  - [3-2. 자료형 이해하기](#3-2-자료형-이해하기)
    - [자료형의 종류](#자료형의-종류)
      - [자료형을 확인하는 방법 - typeof 연산자](#자료형을-확인하는-방법---typeof-연산자)
    - [숫자형 - 정수](#숫자형---정수)
    - [숫자형 - 실수](#숫자형---실수)
    - [문자형](#문자형)
    - [논리형](#논리형)
    - [undefined와 null](#undefined와-null)
    - [배열](#배열)
      - [배열의 특정 값을 가져올 때 사용하는 인덱스](#배열의-특정-값을-가져올-때-사용하는-인덱스)
    - [객체](#객체)
    - [자바스크립트 자료형의 특징](#자바스크립트-자료형의-특징)
  - [3-3. 연산자 이해하기](#3-3-연산자-이해하기)
    - [기초 산술 연산자 간단히 살펴보기](#기초-산술-연산자-간단히-살펴보기)
      - [연산자와 피연산자 구별하기](#연산자와-피연산자-구별하기)
      - [사칙 연산자 이해하기](#사칙-연산자-이해하기)
      - [나머지 연산자 이해하기](#나머지-연산자-이해하기)
      - [증감 연산자 이해하기](#증감-연산자-이해하기)
  - [3-4. 연산자 깊게 알아보기](#3-4-연산자-깊게-알아보기)
    - [할당 연산자 응용하기](#할당-연산자-응용하기)
    - [더하기 연산자와 연결 연산자 구별하기](#더하기-연산자와-연결-연산자-구별하기)
      - [템플릿 문자열](#템플릿-문자열)
    - [문자형과 숫자형의 연산 이해하기](#문자형과-숫자형의-연산-이해하기)
      - [더하거나 뺄 때](#더하거나-뺄-때)
      - [곱하기와 나누기, 나머지를 구할 때](#곱하기와-나누기-나머지를-구할-때)
    - [비교 연산자 알아보기](#비교-연산자-알아보기)
      - [===와 != 연산자](#와--연산자)
      - [<와 <=, >와 >= 연산자](#와--와--연산자)
      - [== 연산자와 === 연산자](#-연산자와--연산자)
    - [논리 연산자 알아보기](#논리-연산자-알아보기)
      - [OR 연산자](#or-연산자)
      - [AND 연산자](#and-연산자)
      - [NOT 연산자](#not-연산자)

# Chapter 2. 자바스크립트와 친해지기

## 2-3. 외부 스크립트 파일 연결하기

* 일괄적으로 js파일을 수정하기 위해 HTML 내부에 작성하는 것이 아니라 외부 파일에 연결하여 효율적으로 스크립트를 적용할 수 있습니다.

```html
<body>
    ... 생략 ...
    <script src="js/*.js"></script>
</body>
```

## 2-4. 나의 첫번째 자바스크립트 프로그램

### 인사하는 브라우저 만들기

* 브라우저를 열었을 때, 이름을 입력하면 환영해주는 페이지를 만들어보고자 합니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>Welcome</title>
	<style>
		body {
			font-size:1.3em;
			text-align: center;
		}
	</style>
</head>
<body>
	<h1>어서오세요</h1>
</body>
</html>
```

이때, `<script>`태그를 통해 사용할 수 있습니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>Welcome</title>
	<style>
		body {
			font-size:1.3em;
			text-align: center;
		}
	</style>
</head>
<body>
	<h1>어서오세요</h1>
	<script>
		var name = prompt("이름을 입력하세요.");
		document.write("<b><big>" + name + "</big></b>님, 환영합니다.");
	</script>
</body>
</html>
```

### 자바스크립트 프로그램의 실행

* 웹 브라우저에는 HTML 분석기(HTML Parser), CSS 분석기(CSS Parser), 자바스크립트 해석기(Javascript Interpreter)가 포함되어 있습니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
	<meta ...>
	<meta ...>
	<meta ...>
	<title>Welcome</title>
	<style>
		...
	</style>
</head>
<body>
	<h1>어서오세요</h1>
	<script>
		...
	</script>
</body>
</html>
```

1. 1번 줄의 `<!DOCTYPE html>`은 HTML 문서의 시작을 알리는 HTML 태그입니다. 브라우저가 이 태그를 보고 이 소스가 HTML임을 알게 됩니다.
2. HTML 분석기는 주로 HTML태그의 순서와 포함 관계를 확인합니다. 즉, HTML 분석기를 통해 `<head>` 태그 안에는 3 개의 `<meta>`태그와 `<title>`, `<style>`태그가 있고 `<body>`태그 안에는 `<h1>`, `<script>` 태그가 있다는 것을 알게 됩니다.
3. CSS 분석기는 HTML 분석기가 태그 분석을 끝낸 다음 `<style>`태그 사이의 스타일 정보를 분석합니다
4. 마지막으로 자바스크립트 해석기가 `<script>`태그 사이의 자바스크립트 소스를 해석합니다

## 2-5. 자바스크립트의 입력과 출력

### 사용자 입력값 받기 - prompt() 함수

* 사용자에게 어떤 값을 입력받을 때 사용하는 prompt() 함수에 대해서 알아보겠습니다.
* prompt() 함수를 실행하면 사용자가 값을 입력할 수 있도록 작은 창을 만들어줍니다.

```js
prompt();
```

* 브라우저에서 값을 입력하면 콘솔 창에서 입력한 값을 확인할 수 있습니다.
* 또한, prompt() 함수를 사용할 때 소괄호 안에 큰 따옴표나 작은 따옴표로 원하는 문장을 감싸 넣으면 프롬프트 창에 문장을 표시할 수도 있습니다.

```js
prompt("이름을 입력하세요.");
```

* 텍스트 필드 안에 기본값을 표시할 수도 있습니다.

```js
prompt("이름을 입력하세요.", "철수");
```

### 알림창으로 출력하기 - alert() 함수

* 웹 브라우저 화면에서 간단한 알림 내용을 표시하려고 할 때 alert() 함수를 사용합니다.

```js
alert("환영합니다.");
```

### 웹 브라우저 화면에 출력하기 - document.write() 함수

* 자바스크립트로 document.write() 함수를 통해 웹 브라우저에 출력할 수 있습니다.

* document.write() 함수는 prompt() 함수와 달리 document.가 함수 이름 앞에 붙어 있는데, 그 이유는 write() 함수가 document 객체에 포함되어 있기 때문입니다.

### 콘솔에 출력하기 - console.log() 함수

* console.log() 함수는 괄호 안의 내용을 콘솔 창에 출력합니다.

```js
var name = prompt("이름: ");
console.log(name + "님, 어서오세요!")
```

### 크롬 브라우저 콘솔로 오류 찾아내기

* 때로는 작성한 자바스크립트 소스가 원하는 대로 실행되지 않거나 아예 실행되지 않는 경우가 있습니다. 이럴 때, 웹 브라우저의 콘솔을 통해 오류를 확인할 수 있습니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>What time is it?</title>
	<style>
		body {
			font-size:2em;
			text-align: center;
		}
	</style>
</head>
<body>
	<script>
		var now = new Date();
		var display = now.toLocaleTimeString();
		document.writ("현재 시각은 " + display);	
	</script>
</body>
</html>
```

```
Uncaught TypeError: document.writ is not a function
    at js-time.html:19:12
```

## 2-6. 자바스크립트 소스를 작성할 때 지켜야 할 규칙

### 규칙 1 - 대소문자를 구별하여 소스를 작성한다.

* 자바 스크립트는 대소문자를 구별합니다. 즉 sum, Sum, SUM을 모두 다르게 인식합니다.

### 규칙 2 - 읽기 쉽게 들여 쓰는 습관을 들인다.

* 자바스크립트 해석기는 소스를 처리할 때 들여쓰기를 신경 쓰지 않습니다. 하지만, 내가 쓴 소스를 다른 프로그래머가 읽거나 오류가 발생해 소스를 수정해야 할 수도 있습니다.

### 규칙 3 - 세미콜론으로 문장을 구분한다.

* 자바스크립트에서 세미콜론(;)은 문장 끝을 나타냅니다. 하지만 자바스크립트 문장 끝에 세미콜론을 붙이지 않아도 잘 실행됩니다.

* 하지만, 실수로 줄 바꿈을 하지 않는다면 오류가 발생합니다. 이를 방지하기 위해 자바스크립트 문장의 끝에는 세미콜론을 붙이는 것이 좋습니다.

### 규칙 4 - 자바스크립트 소스에 메모를 하려면 주석을 사용한다.

* 내가 작성한 자바스크립트 소스를 다른 사람에게 설명하고 싶거나, 나중을 위해 안내 표시를 하고 싶다면 주석을 사용하면 됩니다.

> 한 줄 주석
> ```js
> var today = new Date();     // 날짜를 가져온다.
> var h = today.getHours();   // 시를 추출한다.
> ```

> 여러 줄 주석
> ```js
> /*
>   현재 날짜를 가져와
>   시와 분, 초로 추출하고
>   화면에 표시하는 스크립트
> */
> function startTime() { ... }
> ```

### 규칙 5 - 식별자는 정해진 규칙을 지켜 작성한다.

* 식별자는 앞으로 내가 공부할 자바스크립트 문법의 핵심 요소인 변수, 함수, 속성 등을 구별하기 위해 내가 이름 붙여 준 특정 단어를 의미합니다.

```js
var name = prompt("이름을 입력하세요.");
```

* 식별자의 첫 글자는 반드시 영문자나 밑줄(\_), 또는 달러 기호($)로 시작해야 하고, 그 뒤에 영문자나 밑줄, 달러 기호, 숫자를 사용할 수 있습니다. 두 단어 이상이 모여 하나의 식별자를 만들 경우 단어 사이에 공백을 둘 수 없고, 단어와 단어 사이를 하이픈(-)이나 밑줄(\_)로 연결해서 사용합니다.
* 하이픈이나 밑줄 없이 두 단어를 그대로 붙여서 사용하기도 하는데, 그럴 경우 첫 번째 단어는 소문자로 시작하고 두 번째 단어는 대문자로 시작하는 것이 일반적입니다.

```js
num1            // 영문자로 시작하는 식별자
_doSomething    // 밑줄(_)로 시작하는 식별자
checkTime()     // 두 단어로 만든 식별자
```

### 규칙 6 - 예약어는 식별자로 사용할 수 없다.

* 예약어(Keyword)는 자바스크립트에 먼저 등록된 요소를 가리킵니다. 즉, 예약어는 식별자로 사용할 수 없습니다. 예를 들어 변수를 선언할 때 사용하는 var 예약어는 식별자로 사용하면 오류가 발생합니다.

# Chapter 3. 변수와 자료형 그리고 연산자

## 3-1. 변수란 무엇일까?

### 수식으로 알아보는 상수와 변수

* 상수(Constant)는 변하지 않는 값이며, 변수(Variable)는 변할 수 있는 값입니다.

### 변수를 선언하는 규칙 세 가지

* 변수에는 컴퓨터가 구별할 수 있도록 이름을 붙여야 합니다. 이를 '변수를 선언한다'고 합니다.
  
* 변수 선언은 아주 간단하게 var 키워드 뒤에 변수 이름을 적으면 됩니다.

```js
var apple;
```

#### 규칙 1 - 이름은 의미 있게 짓는다.

* 변수의 이름을 아무 의미 없이 지으면 안 됩니다. a, b 같은 변수는 나중에 왜 만들었는지 알기 어렵기 때문에 그 변수가 어떤 의미를 갖는지 알 수 있도록 이름 짓는 것이 중요합니다.

#### 규칙 2 - 여러 단어를 연결한 변수 이름은 낙타 모양으로 만들어준다.

* 여러 단어를 연결하여 변수 이름을 지을 때는 첫 번째 단어는 소문자로, 두 번째 단어부터는 대문자로 시작하는 방법을 많이 사용합니다. 이 규칙을 낙타 표기법(Camel Case)이라고 부릅니다.

```js
var currentYear;
var birthYear;
```

#### 규칙 3 - 선언할 수 없는 이름도 있다.

* 변수 이름의 첫 글자는 반드시 문자나 밑줄(\_) 또는 달러 기호($)로 시작해야 하고, 그 후에는 문자나 밑줄, 달러 기호, 그리고 숫자를 사용할 수 있습니다.

* 따라서 다음과 같은 변수 이름은 사용할 수 없습니다.

```js
var 1value; // 오류 발생!
var .key;   // 오류 발생!
var #obj;   // 오류 발생!
```

### 변수에 값이나 식 저장하기

* 변수에 값을 저장하려면 변수 오른쪽에 = 기호를 붙이고 오른쪽에 저장하고 싶은 값이나 식을 쓰면 됩니다. 이때 변수에 값을 저장하는 방법은 '변수를 선언하면서 저장하는 방법'과 '변수를 선언한 다음에 저장하는 방법'이 있습니다.

```js
var apple = "yummy"         // 변수를 선언하면서 값을 저장
var banana;
banana = "long and yummy"   // 변수를 선언한 다음에 값을 저장
```

* 변수에 식을 저장할 경우 식에 있는 변수는 미리 선언해 두어야 합니다. 아래 소스에서는 apple + banana 식을 total 변수에 저장하는데, 그 전에 apple과 banana 변수가 선언되어 있어야 합니다.

```js
var apple = 2000;
var banana = 10000;
var total = apple + banana;
```

## 3-2. 자료형 이해하기

### 자료형의 종류

* 자료형(Data Type)이란 컴퓨터가 처리하는 자료의 형태를 말합니다.
* 자바스크립트의 자료형은 값이 하나인 '기본형'과 여러 값을 한꺼번에 담고 있는 '복합형'으로 구별합니다.

#### 자료형을 확인하는 방법 - typeof 연산자

* 자바스크립트는 변수에 저장하는 값에 따라 자료형이 결정됩니다. 예를 들어 value 변수에 10을 저장하면 value의 자료형은 number(숫자)가 되고, "10"을 저장하면 string(문자열)이 됩니다. 그러면 변수(또는 값)가 정말 어떤 자료형인지 알고 싶을 때는 어떻게 해야 할까요? 바로 typeof 연산자를 사용하면 됩니다.

```js
typeof 1990;
typeof "hello";
```

### 숫자형 - 정수

* 자바스크립트에서 숫자는 정수와 실수로 나누어 구분합니다.

```js
var birthYear = 2000;
typeof birthYear;
```

* 정수는 소수점이 없는 숫자를 가리킵니다. 정수는 표현 방법에 따라 10진수, 8진수, 16진수의 세 가지 유형으로 나누기도 합니다.

* 8진수 : 0~7로 표현하는 수입니다. 이때 10진수와 구별하기 위하여 숫자 0을 맨 앞에 붙입니다.(012 = 10, 013 = 11, 01000 = 512)

* 16진수 : 숫자 0~9와 알파벳 A~F로 표현하는 수입니다. 16진수는 프로그래밍을 할 때 가장 많이 사용합니다. 10진수와 구별하기 위하여 0x(또는 0X)를 맨 앞에 붙입니다. 이때 알파벳 A~F는 대문자와 소문자를 모두 사용할 수 있습니다.(0xfff, 0xFFF, 0Xfff, 0XFFF 넷 모두 10진수로 16^3-1=4095)

### 숫자형 - 실수

* 실수는 소수점이 있는 숫자를 가리킵니다. typeof 연산자로 확인하면 정수와 마찬가지로 결괏값으로 number를 출력합니다. 즉, 자바스크립트는 정수와 실수 모두 number로 취급합니다.

```js
var average = 17.5;
typeof average;
```

* 그런데 자바스크립트에서 실수를 계산할 때는 주의할 점이 하나 있습니다. 예를 들어 0.1 + 0.2 수식의 결괏값은 0.3이 아니라 0.30000000000000004입니다. 자바스크립트에서는 0.1과 0.2를 2진수로 변환해서 계산하기 때문에 자릿수가 많은 소수로 변환하기 때문에 발생합니다. 따라서 정밀하게 숫자를 계산하는 프로그램을 만들 때는 항상 주의해야 합니다.

### 문자형

* 문자형(String)은 작은따옴표(')나 큰따옴표(")로 묶은 자료를 의미합니다.
* 즉, 숫자로 작은따옴표나 큰따옴표로 묶으면 문자형으로 인식합니다.

```js
var message = "두잇공부중";
typeof message;
```

### 논리형

* 논리형(Boolean)은 참(True)과 거짓(False)이라는 값을 표현하는 자료형입니다. 예를 들어 "age 변수에 담긴 값이 20보다 크다면 성인이고 20보다 작으면 미성년자"라고 판단해야 할 때 age > 20 조건을 입력하면 그 결괏값이 true나 false 둘 중 하나로 나타납니다.

```js
var age = 21;
age > 20;
age < 20;
typeof true;
typeof false;
```

### undefined와 null

* undefined은 자료형이 정의되지 않았을 때의 상태입니다. 자바스크립트에서는 변수를 선언할 때 미리 자료형을 지정하지 않고 값을 할당할 때 그 값에 따라 결정합니다. 즉, 변수가 undefined라는 것은 '처음부터 변수에 값이 할당되지 않았다'는 의미이지 undefined 자료형을 가진다는 뜻이 아닙니다.
* null은 undefined와 구별해서 생각해야 하는 개념입니다. null은 '처음에 할당된 값이 더는 유효하지 않음'을 의미합니다.

```js
var first;
undefined
var second = 10;
undefined
second = null;
null
```

### 배열

* 자바스크립트에는 하나의 변수에 여러 값을 저장할 수 있는 배열 유형이 있습니다.

```js
var seasons = ["봄", "여름", "가을", "겨울"]
```

* 위의 seasons 배열을 만들 때 보았듯이, 배열에 저장할 자료를 쉼표로 구분해서 대괄호([])로 묶으면 배열을 선언할 수 있습니다. 대괄호 안에 자료를 입력하지 않으면 빈 배열이 만들어집니다. **물론 빈 배열도 배열을 선언한 것입니다.**

```js
var addValue = [];
```

#### 배열의 특정 값을 가져올 때 사용하는 인덱스

* 배열 이름만 사용하면 배열 내용 전체를 가져오고, 배열 이름과 대괄호([]) 안에 0이나 1, 2 같은 숫자를 넣어서 함께 사용하면 해당 위치의 값만 가져옵니다.

```js
seasons[0]
```

이때 사용한 0, 1, 2, 3을 배열의 인덱스라고 부릅니다.

### 객체

```js
var kim = {
    firstName: "John",
    lastName: "Kim",
    age: 35,
    address: "Seoul"
}
```

* 객체는 여러 자료를 중괄호({})로 묶을 수 있습니다. 여러 자료를 묶는다는 점은 배열과 비슷하지만 저장하는 값의 모양이 조금 다릅니다. 키(Key)와 값(Value)을 콜론(:)을 사용하여 한 쌍으로 짝지어야 합니다.

### 자바스크립트 자료형의 특징

```js
var age = 20;
var name = "John";
```

* 자바스크립트는 변수를 선언하는 방법이 아주 단순합니다. 다른 언어인 C 언어의 경우

```c
int age = 20;
char *name = "John";
```

* C언어는 변수를 선언할 때 변수의 자료형을 미리 지정해야 합니다. 이렇게 자료형을 프로그래머가 제한하면 프로그램의 오류를 미리 방지할 수 있습니다. C뿐만 아니라 Java도 이런 방식을 사용합니다. 이 방식을 '강력한 자료형 체크(Strong Data Type Check)'라고 합니다.
* 반대로 자바스크립트는 미리 변수의 자료형을 지정하지 않습니다. 변수를 지정하여 값을 할당만 하면 됩니다. 이 방식을 '느슨한 자료형 체크(Weak Data Type Check)'라고 합니다. 그래서 자바스크립트로 프로그램을 만들 때에는 변수에 의도한 값이 정확하게 들어갔는지 꼭 확인해야 합니다.

## 3-3. 연산자 이해하기

### 기초 산술 연산자 간단히 살펴보기

#### 연산자와 피연산자 구별하기

```js
currentYear - birthYear + 1
```

* 위의 식에서 currentYear, birthYear, 1은 연산 대상이 되므로 '피연산자'라고 부르고, 피연산자를 제외한 더하기, 빼기 같은 것을 '연산자'라고 부릅니다.

#### 사칙 연산자 이해하기

```js
10 + 20;
10 - 20;
10 * 20;
20 / 10;
```

#### 나머지 연산자 이해하기

```js
15 % 2;
```

#### 증감 연산자 이해하기

* 증감 연산자는 증가 연산자(++)와 감소 연산자(--)를 함께 부르는 말입니다. 증감 연산자는 값을 1만큼 증가시키거나 감소시킵니다.

```js
> var a = 10;
> var b = a++ 5;
> var c = b-- ;
> a
< 11
> b
< 14
> c
< 15
```

* 그런데 증감 연산자는 피연산자 앞에 붙일 수도 있고 뒤에 붙일 수도 있습니다. 그러면 증감 연산자를 앞에 붙일 때와 뒤에 붙일 때는 어떤 차이가 있을까요?

```js
> var a = 10;
> var b = a++ + 5;
> b
< 15
> var c = 10;
> var d = ++c + 5;
> d
< 16
```

* 증감 연산자는 피연산자 뒤에 있을 때 전체 수식의 처리가 끝난 다음에 적용됩니다.

* 반대로 피연산자 앞에 있을 때는 전체 수식을 처리하기 전에 적용됩니다.

* 즉, 위의 식에서 a++는 기존의 a 값(10)과 5를 더하여 b에 할당한 다음에 비로소 a값을 1만큼 증가시키고, ++c는 먼저 c의 값을 1만큼 증가시킨 다음에 5를 더하여 d에 할당합니다.

## 3-4. 연산자 깊게 알아보기

### 할당 연산자 응용하기

* 할당 연산자는 산술 연산자와 조합해서 사용할 수도 있습니다.

```js
var x = 10;
x += 10;
var y = 20;
y += x;
```

### 더하기 연산자와 연결 연산자 구별하기

```js
var originPrice = 10000;
var rate = 25;
"상품의 원래 가격은 " + originPrice + "원이고, 할인율은 " + rate + "%입니다. " + savedPrice + "원을 절약한 " + resultPrice + "원에 살 수 있습니다."
```

* 사실 더하기 연산자로 '문자열을 더할 때'는 연결 연산자라는 또 다른 이름으로 부릅니다. 즉, 두 수를 더할 때에도 + 기호를 사용하지만 두 개 이상의 문자열을 연결할 때에도 + 기호를 사용합니다.

#### 템플릿 문자열

* ES6 버전부터는 문자열 안에 값을 채우는 방법인 '템플릿 문자열'이 새로 도입되었습니다.

* 문자열을 백 쿼트(`)로 묶고, 값이 들어가는 부분은 ${}사이에 표시합니다.

```js
const originPrice = 24500;
document.querySelector("#showResult").innerHTML = `원래 가격은 ${originPrice} 원입니다.`;
```

### 문자형과 숫자형의 연산 이해하기

#### 더하거나 뺄 때

* 숫자형 자료와 문자형 자료를 더해봅시다. 100과 "50"을 + 기호로 더하면 어떻게 될까요?

```js
> var numVar = 100;
> var strVar = "50";
> numVar + strVar
< 10050
```

* 100과 "50"을 더하니 둘을 연결한 문자열 "10050"이 결괏값으로 나옵니다. 즉 + 기호는 연결 연산자입니다.

```js
> numVar - strVar
< 50
```

* 100과 "50"을 빼니 숫자 50이 결괏값으로 나옵니다. 즉 - 기호는 산술 연산자죠. 이렇듯 자바스크립트에서는 숫자형과 문자형 자료를 더하거나 뺄 때 자동으로 결괏값의 자료형을 지정합니다.

#### 곱하기와 나누기, 나머지를 구할 때

* 곱하기나 나누기, 나머지 연산은 문자형 자료를 모두 숫자로 자동인식합니다.

```js
> var numVar = 100;
> var strVar = "50";
> numVar * strVar
< 5000
> numVar / strVar
< 2
numVar % strVar
< 0
```

### 비교 연산자 알아보기

* 비교 연산자(Comparison Operator)는 두 값을 비교하여 true(참)나 false(거짓)로 결괏값을 내놓는 연산자입니다. 

#### ===와 != 연산자

* == 연산자는 말 그대로 두 수(또는 변수)가 같은지 확인하는 연산자입니다. != 연산자는 그 반대의 역할(다른지)을 합니다.

```js
> var a = 3, b = 4;
> a == b
< false
> b != 6
< true
```

#### <와 <=, >와 >= 연산자

* 서로의 대소관계를 확인하는 연산자입니다.

```js
> a < 3
< false
> a <= b
< true
```

#### == 연산자와 === 연산자

* ==와 === 연산자는 모두 왼쪽과 오른쪽이 같은지 비교하는 연산자입니다.

```js
> 10 == "10"
< true
> 10 === "10"
< false
```

* == 연산자는 문자형 자료와 숫자형 자료가 있을 때 자동으로 자료형을 변환하여 비교합니다. 그래서 10과 "10"을 비교하여 true를 반환한 것이죠. 하지만 === 연산자는 두 자료형의 변환을 허용하지 않습니다.

### 논리 연산자 알아보기

#### OR 연산자

* OR 연산자는 기호 ||로 표시하며 왼쪽과 오른쪽 중 하나만 참이면 true로 처리합니다.

```js
> var a = 10, b = 20;
> a > 10 || b > 20
< false
```

#### AND 연산자

* AND 연산자는 기호 &&로 표시하며 왼쪽과 오른쪽 모두가 참인 경우에만 true로 처리합니다.

```js
> a <= 10 && b <= 20
< true
```

#### NOT 연산자

* NOT 연산자는 기호 !로 표시하며 true나 false를 반대로 뒤집습니다.

```js
> var isAdult = false;
> isAdult
< false
> isAdult = !isAdult;
> isAdult
< true
```

---

