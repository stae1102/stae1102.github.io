---
layout: post
title:  "백준: 1600 말이 되고픈 원숭이"
excerpt: "이분 탐색"
date:   2022-03-20 22:36:00 +0900
categories: 
  - Baekjoon
tags:
  - binary_search
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [예제 입력 1](#예제-입력-1)
- [예제 출력 1](#예제-출력-1)
- [문제 풀이](#문제-풀이)
  - [A. 아이디어](#a-아이디어)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 풀이](#b-2-풀이)
    - [B-3. 출력](#b-3-출력)
- [총평](#총평)

# 문제

동물원에서 막 탈출한 원숭이 한 마리가 세상구경을 하고 있다. 그 녀석은 말(Horse)이 되기를 간절히 원했다. 그래서 그는 말의 움직임을 유심히 살펴보고 그대로 따라 하기로 하였다. 말은 말이다. 말은 격자판에서 체스의 나이트와 같은 이동방식을 가진다. 다음 그림에 말의 이동방법이 나타나있다. x표시한 곳으로 말이 갈 수 있다는 뜻이다. 참고로 말은 장애물을 뛰어넘을 수 있다.

근데 원숭이는 한 가지 착각하고 있는 것이 있다. 말은 저렇게 움직일 수 있지만 원숭이는 능력이 부족해서 총 K번만 위와 같이 움직일 수 있고, 그 외에는 그냥 인접한 칸으로만 움직일 수 있다. 대각선 방향은 인접한 칸에 포함되지 않는다.

이제 원숭이는 머나먼 여행길을 떠난다. 격자판의 맨 왼쪽 위에서 시작해서 맨 오른쪽 아래까지 가야한다. 인접한 네 방향으로 한 번 움직이는 것, 말의 움직임으로 한 번 움직이는 것, 모두 한 번의 동작으로 친다. 격자판이 주어졌을 때, 원숭이가 최소한의 동작으로 시작지점에서 도착지점까지 갈 수 있는 방법을 알아내는 프로그램을 작성하시오.

# 입력

첫째 줄에 정수 K가 주어진다. 둘째 줄에 격자판의 가로길이 W, 세로길이 H가 주어진다. 그 다음 H줄에 걸쳐 W개의 숫자가 주어지는데, 0은 아무것도 없는 평지, 1은 장애물을 뜻한다. 장애물이 있는 곳으로는 이동할 수 없다. 시작점과 도착점은 항상 평지이다. W와 H는 1이상 200이하의 자연수이고, K는 0이상 30이하의 정수이다.

# 출력

첫째 줄에 원숭이의 동작수의 최솟값을 출력한다. 시작점에서 도착점까지 갈 수 없는 경우엔 -1을 출력한다.

# 예제 입력 1

1
4 4
0 0 0 0
1 0 0 0
0 0 1 0
0 1 0 0

# 예제 출력 1

4

---

# 문제 풀이

## A. 아이디어

<a href="https://www.acmicpc.net/problem/2206">2206 벽 부수고 이동하기</a>

백준 2206 문제에서는 3차원 방문 리스트를 통해 문제를 풀이했다. 이처럼 visited의 조건이 한 개가 아니라 이 문제 처럼 **말 걸음**과 **그냥 걸음** 두 가지가 있다면 3차원 리스트를 통해 구분해준다.

이 것만 잘 고려한다면 나머지는 기존 방식과 같으므로 쉽게 풀이할 수 있다. 이 3차원 리스트를 생각 못해서 상당히 오랫동안 풀었다.

## B. 코드 분석

### 전체 코드

```py
from collections import deque
import sys
input = sys.stdin.readline

k = int(input())

w, h = map(int, input().split())
graph = [[] for _ in range(h)]
visited = [[[0] * (k + 1) for _ in range(w)] for _ in range(h)] # 방문 테이블

for i in range(h):
    graph[i] = list(map(int, input().split()))

dist = float('inf')

hx = [-2, -2, -1, -1, 1, 1, 2, 2]
hy = [-1, 1, -2, 2, -2, 2, -1, 1]

mx = [-1, 1, 0, 0]
my = [0, 0, -1, 1]

def bfs():
    global dist
    q = deque()
    q.append((0, 0, 0, 0))
    visited[0][0][0] = 1

    # cnt: 총 돌아다닌 횟수, x & y: 좌표, j: 말 걸음 수
    while q:
        cnt, x, y, j = q.popleft()

        # 도착했을 때
        if x == h - 1 and y == w - 1:
            dist = min(dist, cnt)
            return

        if j < k:
            # 말 걸음으로 방문 처리
            for i in range(8):
                nx = x + hx[i]
                ny = y + hy[i]
                if 0 <= nx < h and 0 <= ny < w and graph[nx][ny] != 1:
                    if visited[nx][ny][j + 1] == 0:
                        visited[nx][ny][j + 1] = 1
                        q.append((cnt + 1, nx, ny, j + 1))

        # 원숭이 걸음으로 방문 처리
        for i in range(4):
            nx = x + mx[i]
            ny = y + my[i]
            if 0 <= nx < h and 0 <= ny < w and graph[nx][ny] != 1:
                if visited[nx][ny][j] == 0:
                    visited[nx][ny][j] = 1
                    q.append((cnt + 1, nx, ny, j))

bfs()

if dist == float('inf'):
    print(-1)
else:
    print(dist)
```

### B-1. 준비

```py
from collections import deque
import sys
input = sys.stdin.readline

k = int(input())

w, h = map(int, input().split())
graph = [[] for _ in range(h)]
visited = [[[0] * (k + 1) for _ in range(w)] for _ in range(h)] # 방문 테이블

for i in range(h):
    graph[i] = list(map(int, input().split()))

dist = float('inf')

hx = [-2, -2, -1, -1, 1, 1, 2, 2]
hy = [-1, 1, -2, 2, -2, 2, -1, 1]

mx = [-1, 1, 0, 0]
my = [0, 0, -1, 1]
```

bfs를 풀이하기 때문에 deque 라이브러리를 불러온다. 또한, 입력이 많기 때문에 sys 모듈도 불러온다.

graph에 맵을 불러온다. visited 방문 테이블은 세로가 h, 가로가 w이기 때문에 컴프리헨션을 순서를 고려하여 작성했다. 또한, 말 걸음을 받을 리스트는 k + 1로 설정한다. 즉 실제로 보면 이렇다.

```py
visited[h][w][j] # h: 세로, w: 가로, j: 말 걸음 횟수
```

인덱스는 0부터 시작하고 n - 1로 끝나기 때문에 k로 설정하지 않고 k + 1로 설정했다.

dist = float('inf')는 최솟값 설정을 위해 만들었는데, 어차피 bfs에서 최솟값이 나오므로 없애도 된다.

hx와 hy는 말 걸음을 구현하기 위해 설정했고, mx와 my는 원숭이의 걸음을 구현하기 위해 구현했다.

### B-2. 풀이

```py
def bfs():
    global dist
    q = deque()
    q.append((0, 0, 0, 0))
    visited[0][0][0] = 1

    # cnt: 총 돌아다닌 횟수, x & y: 좌표, j: 말 걸음 수
    while q:
        cnt, x, y, j = q.popleft()

        # 도착했을 때
        if x == h - 1 and y == w - 1:
            dist = min(dist, cnt)
            return

        if j < k:
            # 말 걸음으로 방문 처리
            for i in range(8):
                nx = x + hx[i]
                ny = y + hy[i]
                if 0 <= nx < h and 0 <= ny < w and graph[nx][ny] != 1:
                    if visited[nx][ny][j + 1] == 0:
                        visited[nx][ny][j + 1] = 1
                        q.append((cnt + 1, nx, ny, j + 1))

        # 원숭이 걸음으로 방문 처리
        for i in range(4):
            nx = x + mx[i]
            ny = y + my[i]
            if 0 <= nx < h and 0 <= ny < w and graph[nx][ny] != 1:
                if visited[nx][ny][j] == 0:
                    visited[nx][ny][j] = 1
                    q.append((cnt + 1, nx, ny, j))
```

bfs를 시작한다. 먼저 q 변수에 덱을 저장하고 0, 0, 0, 0으로 시작한다. 카운트 0, x좌표 및 y좌표가 0, 0, 말 걸음 횟수가 0이라는 의미이다.

시작지점은 먼저 방문처리해준다.

그 이후 q가 빌 때까지 반복한다.

도착지점인 h - 1, w - 1에 도착하면 반환하여 함수를 종료한다. 말 걸음을 다 완료하지 않았다면 말걸음을 해준다.

말 걸음의 방법은 8가지가 있기 때문에 8번 for문을 돌려준다. 그리고 이동 범위를 벗어나지 않으며, 이동할 곳에 벽이 없는 경우를 먼저 고려한다. 그 이후에 `visited[nx][ny][j + 1]`을 검사한다. 이때, 말 걸음으로 이동한 것이므로 **j가 아니라 j + 1을 체크**해줘야 한다. 방문하지 않았다면 새로 방문처리한 후 q에 cnt는 1 증가, 좌표는 nx, ny를 입력하고, 말 걸음 횟수를 1 증가하여 넣어준다.

원숭이 걸음도 비슷하고 말 걸음이 아니기 때문에 j만 체크한다.

### B-3. 출력

```py
bfs()

if dist == float('inf'):
    print(-1)
else:
    print(dist)
```

함수에서 맨 마지막에 return -1을 하고, 도착시에는 return cnt를 해서 더 간단하게 `print(bfs())`로도 제출할 수 있다.

# 총평

이번에도 풀다보니 간단했다... 그렇지만 논리적으로 사고하는 것이 부족했다. 특히 말 흉내내는 것과, 3차원 리스트에서 말 흉내 횟수를 k 개를 설정한 것이 화근이었다.

코딩이 심플하면서도 디테일이 살아있다. 문제를 풀다보니 이제 골드 문제도 시간을 투자하면 충분히 풀만 한 것 같다. 내 인생 화이팅.🔥

![1600](https://user-images.githubusercontent.com/83271772/159165976-59708e44-6295-4203-b138-9293832a3c3a.PNG)