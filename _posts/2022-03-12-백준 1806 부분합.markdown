---
layout: post
title: "백준: 1806 부분합"
excerpt: "Python, Two_pointer"
date: 2022-03-12 21:22:00 +0900
categories:
  - Baekjoon
tags:
  - Two_pointer
---

- [문제](#문제)

# 문제

10,000 이하의 자연수로 이루어진 길이 N짜리 수열이 주어진다. 이 수열에서 연속된 수들의 부분합 중에 그 합이 S 이상이 되는 것 중, 가장 짧은 것의 길이를 구하는 프로그램을 작성하시오.

# 입력

첫째 줄에 N (10 ≤ N < 100,000)과 S (0 < S ≤ 100,000,000)가 주어진다. 둘째 줄에는 수열이 주어진다. 수열의 각 원소는 공백으로 구분되어져 있으며, 10,000이하의 자연수이다.

# 출력

첫째 줄에 구하고자 하는 최소의 길이를 출력한다. 만일 그러한 합을 만드는 것이 불가능하다면 0을 출력하면 된다.

# 문제풀이

## A. 아이디어

수열과 연속된 합 혹은 연속된 길이를 묻는 문제는 대부분 투 포인터 혹은 부분합으로 풀 수 있는 것 같다. 공통된 특징이 **연속**이라는 점이 포인트이기 때문이다. 위 문제도 어디서 부터 어디까지 슬라이싱해서 값을 구할 것인가를 생각해야 하는 문제이다.

어느 정도 정형화된 문제 풀이가 있었는데 먼저 내가 풀어 본 풀이이다.

## B. 코드 분석

### 전체 코드

```python
import sys
import math
input = sys.stdin.readline
INF = math.inf

n, m = map(int, input().split())

array = list(map(int, input().split()))

left = 0
right = 0
interval_sum = 0
length = INF

while left <= right and right < n:
    while right < n:
        interval_sum += array[right]
        if interval_sum >= m:
            break
        right += 1

    while left <= right:
        if interval_sum < m:
            break
        interval_sum -= array[left]
        length = min(length, right - left + 1)
        left += 1
    right += 1

if length != INF:
    print(length)
else:
    print(0)
```

### B-1. 변수 설정

```python
import sys
import math
input = sys.stdin.readline
INF = math.inf

n, m = map(int, input().split())

array = list(map(int, input().split()))

left = 0
right = 0
interval_sum = 0
length = INF
```
* 문제 입력대로 n과 m을 받아주고, 수열을 array에 저장한다. 두 개의 포인터를 쓰기 때문에 left 포인터, right 포인터를 만들어 주었다.

* 또한, 이 문제는 최소의 길이를 찾아야 하기 때문에 매번 값이 변동한다. 그렇기 때문에 일시적으로 값을 담는 interval_sum을 만들고, 

* 최소한으로 값을 받기 때문에 length 변수를 만들고 그 값을 무한으로 책정하였다.

### B-2. 포인터 이동

```python
while left <= right and right < n:
    while right < n:
        interval_sum += array[right]
        if interval_sum >= m:
            break
        right += 1

    while left <= right:
        if interval_sum < m:
            break
        interval_sum -= array[left]
        length = min(length, right - left + 1)
        left += 1
    right += 1
```

* 첫 번째 while문은 기본적인 조건을 설정하였다. left가 right보다 크거나 같아야 하고, right 포인터가 벗어나면 안되기 때문에 막아주었다.

* 두 번째 while문은 right를 이동시키는 반복문이다. 오른쪽으로 이동하면서 값을 담아준다. 계속 헷갈려서 포인트가 가리킬 때 값을 추가하도록 반복문을 구성했고, 값이 커지면 벗어나도록 했다.

* 세 번째 while문은 left를 이동시키는 반복문이다. right보다 작거나 같은 동안 반복하며, 부분합이 아직 주어진 조건보다 클 경우 left를 이동시키면서 더했던 값을 다시 빼준다. 이때, 아직 부분합이 m보다 크기 때문에 length를 갱신해준다.

* 마지막 right += 1은 right 포인터가 이동하지 못하는 경우가 있기 때문에 right를 미리 한 칸 이동시켜줬다.

## C. 좋은 답안

```python

n, m = map(int, input().split())
arr = list(map(int, input().split()))

start, end, curr = 0, 0, 0
result = 100001

while True:
    if temp >= s:
        result = min(result, end - start)
        temp -= arr[start]
        start += 1
    elif end == N:
        break
    else:
        temp += arr[end]
        end += 1

if result == 100001:
    result = 0

print(result)
```

### 배운 점

1. 수열의 길이는 100,000으로 설정되어 있기 때문에 100001 까지만 생각해도 된다.

2. 투 포인터는 값이 모두 양수일 때, 무조건 left가 이동할 수록 부분합은 작아진다. 이를 이용해서 end가 끝까지 도달하였을 경우 temp 가 조건을 충족할 때까지 계속해서 start를 증가시키는 방법을 사용하면 된다.

# 총평

어려운 문제라고 생각하고 풀면 코드도 더 복잡해지고 생각이 얕아지는 것 같다. 머신러닝에서 과적합이 되는 느낌이다. 때로는 막힐 때 바이블처럼 알고리즘 방법의 특징을 다시 생각하며 푸는 것도 좋을 것 같다.