---
layout: post
title: "백준: 11055 가장 큰 증가 부분 수열"
excerpt: "Python, DP"
date: 2022-04-01 22:30:00 +0900
categories:
  - Baekjoon
tags:
  - DP
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [예제 입력](#예제-입력)
- [예제 입력](#예제-입력-1)
- [문제 풀이](#문제-풀이)
  - [A. 접근](#a-접근)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 풀이](#b-2-풀이)
- [총평](#총평)

# 문제

수열 A가 주어졌을 때, 그 수열의 증가 부분 수열 중에서 합이 가장 큰 것을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {1, 100, 2, 50, 60, 3, 5, 6, 7, 8} 인 경우에 합이 가장 큰 증가 부분 수열은 A = {1, 100, 2, 50, 60, 3, 5, 6, 7, 8} 이고, 합은 113이다.

# 입력

첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 $A_i$가 주어진다. (1 ≤ $A_i$ ≤ 1,000)

# 출력

첫째 줄에 수열 A의 합이 가장 큰 증가 부분 수열의 합을 출력한다.

# 예제 입력

```
10
1 100 2 50 60 3 5 6 7 8
```

# 예제 입력

```
113
```

# 문제 풀이

## A. 접근

앞에서부터 매번 수열의 합들을 갱신해준다.

A = {1, 100, 2, 50, 60, 3, 5, 6, 7, 8}
라고 한다면,

A = {1, 101, 3, 53, 113, 6, 11, 17, 24, 32} 로 업데이트하는 것이다.

## B. 코드 분석

### 전체 코드

```py
import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
d = [1] * N
d[0] = arr[0]
for i in range(1, N):
    for j in range(i):
        if arr[j] < arr[i]:
            d[i] = max(d[i], d[j] + arr[i])
        else:
            d[i] = max(d[i], arr[i])

print(max(d))
```

### B-1. 준비

```py
import sys
input = sys.stdin.readline

N = int(input())
arr = list(map(int, input().split()))
d = [1] * N
d[0] = arr[0]
```

미리 d에 배열의 첫 인덱스 값을 넣어두고 시작한다. 이전 값을 고려하여 테이블을 정리해야 하기 때문이다.

### B-2. 풀이

```py
for i in range(1, N):
    for j in range(i):
        if arr[j] < arr[i]:
            d[i] = max(d[i], d[j] + arr[i])
        else:
            d[i] = max(d[i], arr[i])

print(max(d))
```
i는 기준 원소를 의미한다. i를 기준으로 두고, 0부터 i-1까지 수열을 만족하는 값들을 찾기 위해서이다.

그래서 두 번째 for에서는 range(i)를 두어서 i보다 작은 j 카운트 변수를 지정한다.

만약 배열 상에서 기준 원소보다 작은 값이 있다면, 그 때의 d[j] 값과 더해준다.

# 총평

2중 for문으로 순회하니까 dp가 맞나...? 싶었는데 매번 최댓값을 초기화해주고 다음 원소로 넘어가기 때문에 자세히 다시 보면 동적 계획법이 맞았다. 허허... 아직 한참 멀었다. BaaaaaaaaaaarkingDog님의 DP 문제집 다 풀 때까지 다른 알고리즘은 보류해두자. dp가 너무 부족하다.

![11055](https://user-images.githubusercontent.com/83271772/161275108-02632ce5-e14c-42b2-a82c-21f35a4997be.PNG)