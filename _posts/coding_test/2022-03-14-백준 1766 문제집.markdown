---
layout: post
title: "백준: 1766 문제집"
excerpt: "Python, BFS, Min_heapq"
date: 2022-03-14 23:15:00 +0900
categories:
  - Baekjoon
tags:
  - BFS
  - Min_heapq
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [문제풀이](#문제풀이)
  - [A. 아이디어](#a-아이디어)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 정렬 실행](#b-2-정렬-실행)
- [총평](#총평)

# 문제

민오는 1번부터 N번까지 총 N개의 문제로 되어 있는 문제집을 풀려고 한다. 문제는 난이도 순서로 출제되어 있다. 즉 1번 문제가 가장 쉬운 문제이고 N번 문제가 가장 어려운 문제가 된다.

어떤 문제부터 풀까 고민하면서 문제를 훑어보던 민오는, 몇몇 문제들 사이에는 '먼저 푸는 것이 좋은 문제'가 있다는 것을 알게 되었다. 예를 들어 1번 문제를 풀고 나면 4번 문제가 쉽게 풀린다거나 하는 식이다. 민오는 다음의 세 가지 조건에 따라 문제를 풀 순서를 정하기로 하였다.

> 1. N개의 문제는 모두 풀어야 한다.  
> 2. 먼저 푸는 것이 좋은 문제가 있는 문제는, 먼저 푸는 것이 좋은 문제를 반드시 먼저 풀어야 한다.  
> 3. 가능하면 쉬운 문제부터 풀어야 한다.  

예를 들어서 네 개의 문제가 있다고 하자. 4번 문제는 2번 문제보다 먼저 푸는 것이 좋고, 3번 문제는 1번 문제보다 먼저 푸는 것이 좋다고 하자. 만일 4-3-2-1의 순서로 문제를 풀게 되면 조건 1과 조건 2를 만족한다. 하지만 조건 3을 만족하지 않는다. 4보다 3을 충분히 먼저 풀 수 있기 때문이다. 따라서 조건 3을 만족하는 문제를 풀 순서는 3-1-4-2가 된다.

문제의 개수와 먼저 푸는 것이 좋은 문제에 대한 정보가 주어졌을 때, 주어진 조건을 만족하면서 민오가 풀 문제의 순서를 결정해 주는 프로그램을 작성하시오.

# 입력

첫째 줄에 문제의 수 N(1 ≤ N ≤ 32,000)과 먼저 푸는 것이 좋은 문제에 대한 정보의 개수 M(1 ≤ M ≤ 100,000)이 주어진다. 둘째 줄부터 M개의 줄에 걸쳐 두 정수의 순서쌍 A,B가 빈칸을 사이에 두고 주어진다. 이는 A번 문제는 B번 문제보다 먼저 푸는 것이 좋다는 의미이다.

항상 문제를 모두 풀 수 있는 경우만 입력으로 주어진다.

# 출력

첫째 줄에 문제 번호를 나타내는 1 이상 N 이하의 정수들을 민오가 풀어야 하는 순서대로 빈칸을 사이에 두고 출력한다.

# 문제풀이

## A. 아이디어

무엇을 하고 ~ 무엇을 한다. 이것이 끝나야 ~ 이것을 한다. 라는 문제가 등장하면 웬만하면 위상 정렬을 사용한다. 이 문제는 독특하게 위상 정렬과 힙을 섞어서 푸는 문제였다. 문제의 입력이 정렬된 순서로 주어지지 않고, 순서가 중요하기 때문에 쉬운 문제를 웬만하면 빨리 풀 수 있도록 최소 힙을 사용해야 한다.

## B. 코드 분석

### 전체 코드

```python
import heapq
import sys
input = sys.stdin.readline

n, m = map(int, input().split())
indegree = [0] * (n + 1)
graph = [[] for _ in range(n + 1)]

for _ in range(m):
    a, b = map(int, input().split())
    indegree[b] += 1
    graph[a].append(b)

def topology_sort():
    q = []
    result = []

    for i in range(1, n + 1):
        if indegree[i] == 0:
            heapq.heappush(q, i)
    
    while q:
        now = heapq.heappop(q)
        result.append(now)
        for i in graph[now]:
            indegree[i] -= 1
            if indegree[i] == 0:
                heapq.heappush(q, i)

    for i in result:
        print(i, end=' ')

topology_sort()
```

### B-1. 준비

```python
import heapq
import sys
input = sys.stdin.readline

n, m = map(int, input().split())
indegree = [0] * (n + 1)
graph = [[] for _ in range(n + 1)]

for _ in range(m):
    a, b = map(int, input().split())
    indegree[b] += 1
    graph[a].append(b)
```

최소 힙을 사용할 것이기 때문에 heapq 라이브러리를 불러온다. 또한, 입력이 많기 때문에 sys 모듈로 input을 대체한다.

총 문제의 개수 n을 통해 진입차수를 나타내는 indegree를 0부터 n까지의 배열로 설정한다. graph도 만든다.

이때, graph와 indegree는 주어지는 조건이 a를 풀어야 b를 풀 수 있기 때문에 `indegree[b] += 1`을 설정했다. 예를 들어 3번 문제를 풀어야 1번을 풀 수 있고, 5번을 풀어야 1을 풀 수 있다면 (3 1, 5 1) 이렇게 입력을 받고 1번은 3번과 5번 문제를 풀어야 풀 수 있다.

### B-2. 정렬 실행

```python
def topology_sort():
    q = []
    result = []

    for i in range(1, n + 1):
        if indegree[i] == 0:
            heapq.heappush(q, i)
    
    while q:
        now = heapq.heappop(q)
        result.append(now)
        for i in graph[now]:
            indegree[i] -= 1
            if indegree[i] == 0:
                heapq.heappush(q, i)

    for i in result:
        print(i, end=' ')

topology_sort()
```

먼저 정렬에 이용할 q 리스트를 만들고 정렬된 결과를 저장할 result 리스트를 만든다. 진입 차수가 0인 문제를 풀 수 있기 때문에 heapq.heappush로 저장한다.

q가 빌 때까지 반복수행하는데, 먼저 힙에서 우선순위가 가장 높은 것부터 먼저 풀기 시작한다. 문제에서 4231로 푼 것은 조건 입력은 4 2 / 3 1 로 되어서 순서대로 풀다보니 저렇게 풀리게 되었고, 최소 힙은 우선순위가 가장 높은 것을 먼저 고려하기 때문에 3 1 4 2 로 출력되는 것이다.

이처럼 문제를 풀기 시작한다. 그 문제를 다 풀면 그 문제와 관련된 문제들의 진입 차수를 낮춘다. 만약 진입차수가 0으로 풀 수 있게 됐다면 최소 힙 q에 넣어준다.

위 과정을 계속해서 반복하다보면 잘 정렬되어 result 리스트에 저장되고, 조건에 맞춰 출력만 하면 된다.

# 총평

골드 2였는데 한 번에 성공해서 조금 놀라웠다. 골드2라고 쫄 게 없다!

항상 위상정렬은 deque를 사용했었는데, 우선순위가 주어진다면 heapq 라이브러리를 사용하여 융통성있게 기초 골자를 수정하는 것이 중요하다는 것을 배웠다.

![1766](https://user-images.githubusercontent.com/83271772/158200586-dba6209b-3f3e-4745-be1f-9720f4abf87f.PNG)