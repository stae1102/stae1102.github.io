---
layout: post
title: "백준: 10026 적녹색약"
excerpt: "Python, BFS"
date: 2022-03-23 22:32:00 +0900
categories:
  - Baekjoon
tags:
  - BFS
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [예제 입력 1](#예제-입력-1)
- [예제 출력 1](#예제-출력-1)
- [문제 풀이](#문제-풀이)
  - [A. 아이디어](#a-아이디어)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 풀이1](#b-2-풀이1)
    - [B-3. 풀이2](#b-3-풀이2)
    - [B-3. 풀이3](#b-3-풀이3)
    - [B-4. 출력](#b-4-출력)
- [총평](#총평)

# 문제

적록색약은 빨간색과 초록색의 차이를 거의 느끼지 못한다. 따라서, 적록색약인 사람이 보는 그림은 아닌 사람이 보는 그림과는 좀 다를 수 있다.

크기가 N×N인 그리드의 각 칸에 R(빨강), G(초록), B(파랑) 중 하나를 색칠한 그림이 있다. 그림은 몇 개의 구역으로 나뉘어져 있는데, 구역은 같은 색으로 이루어져 있다. 또, 같은 색상이 상하좌우로 인접해 있는 경우에 두 글자는 같은 구역에 속한다. (색상의 차이를 거의 느끼지 못하는 경우도 같은 색상이라 한다)

예를 들어, 그림이 아래와 같은 경우에
```
RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
```
적록색약이 아닌 사람이 봤을 때 구역의 수는 총 4개이다. (빨강 2, 파랑 1, 초록 1) 하지만, 적록색약인 사람은 구역을 3개 볼 수 있다. (빨강-초록 2, 파랑 1)

그림이 입력으로 주어졌을 때, 적록색약인 사람이 봤을 때와 아닌 사람이 봤을 때 구역의 수를 구하는 프로그램을 작성하시오.

# 입력

첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100)

둘째 줄부터 N개 줄에는 그림이 주어진다.

# 출력

적록색약이 아닌 사람이 봤을 때의 구역의 개수와 적록색약인 사람이 봤을 때의 구역의 수를 공백으로 구분해 출력한다.

# 예제 입력 1

```
5
RRRBB
GGBBB
BBBRR
BBRRR
RRRRR
```

# 예제 출력 1
```
4 3
```

# 문제 풀이

## A. 아이디어

맵이 주어지고 무언가 카운트한다고 하면 바로 탐색 방법을 사용하자. 이번 문제는 섬의 개수를 세거나, 어떤 구역의 개수를 찾는 것이므로, for문으로 순회하며 특정 조건을 만족하면 cnt를 올리고 bfs로 구역을 제외하도록 한다.

이번 문제는 RGB 구역의 개수를 찾는 것으로, RGB를 모두 찾는 것과 RG의 구분없이 (RG)와 B의 구역을 찾는 문제이다. 이때, 유의해야 할 것은 R과 G 둘 중 하나의 최댓값이 적녹색약의 적녹 구역이 아니다.

문제의 예제에서 R과 G를 X라고 한다면, 둘은 같은 값이므로 붙어있을 때 하나의 구역으로 취급하는 것이다. 그러나, 두 색 사이에 B가 껴있다면 둘은 떨어져 있는 것으로 별개의 구역으로 취급한다. XXB는 두 개, XBX는 세 개로 카운트 하는 것이다.

즉, 우리가 찾을 것은 첫 번째 출력으로 R, G, B의 구역을 각각 출력하고, 두 번째 출력으로 (RG), B의 구역을 각각 출력한다.

## B. 코드 분석

### 전체 코드 
```py
from collections import deque
import sys
input = sys.stdin.readline

n = int(input())

graph = [list(input().rstrip()) for _ in range(n)]
visited = [[0] * n for _ in range(n)]

dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]

# 색약이 없는 사람일 때
def bfs(x, y):
    q = deque([(x, y, graph[x][y])])
    visited[x][y] = 1

    while q:
        x, y, c = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < n and graph[nx][ny] == c:
                if visited[nx][ny] == 0:
                    q.append((nx, ny, graph[nx][ny]))
                    visited[nx][ny] = 1

def bfs2(x, y):
    q = deque([(x, y)])
    visited[x][y] = 1

    while q:
        x, y= q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < n and graph[nx][ny] != 'B':
                if visited[nx][ny] == 1:
                    q.append((nx, ny))
                    visited[nx][ny] = 0

RGB = {'R':0, 'G':0, 'B':0}
RG = 0

for i in range(n):
    for j in range(n):
        if visited[i][j] == 0:
            RGB[graph[i][j]] += 1
            bfs(i, j)

for i in range(n):
    for j in range(n):
        if graph[i][j] != 'B' and visited[i][j] == 1:
            RG += 1
            bfs2(i, j)

print(RGB['R'] + RGB['G'] + RGB['B'])
print(RG + RGB['B'])
```

### B-1. 준비

```py
from collections import deque
import sys
input = sys.stdin.readline

n = int(input())

graph = [list(input().rstrip()) for _ in range(n)]
visited = [[0] * n for _ in range(n)]

dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
```

bfs를 사용할 것이므로 deque를 불러온다. 원래라면 graph만 사용해서 visited 테이블을 만들지 않을 예정이었으나, 적녹색약의 경우도 구해야 하므로 서로 방해하지 않게 visited 테이블을 만들었다.

dx와 dy는 상하좌우를 탐색하는 것을 도와줄 변수이다.

### B-2. 풀이1

```py
# 색약이 없는 사람일 때
def bfs(x, y):
    q = deque([(x, y, graph[x][y])])
    visited[x][y] = 1

    while q:
        x, y, c = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < n and graph[nx][ny] == c:
                if visited[nx][ny] == 0:
                    q.append((nx, ny, graph[nx][ny]))
                    visited[nx][ny] = 1
```

색약이 없는 사람일 경우의 bfs이다.

큐 안에 좌표와 색상을 입력한다. 시작하는 좌표는 방문처리 해두고 시작한다.

이후에 상하좌우를 순회하면서 같은 값일 경우, 방문처리해주고 q에 추가한다. 기본적인 bfs이다.

### B-3. 풀이2

```py
def bfs2(x, y):
    q = deque([(x, y)])
    visited[x][y] = 0

    while q:
        x, y= q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < n and graph[nx][ny] != 'B':
                if visited[nx][ny] == 1:
                    q.append((nx, ny))
                    visited[nx][ny] = 0
```

방문 그래프를 재활용할 것이므로, 반대로 방문처리를 0으로 해준다.

상하좌우를 순회하며, 그 때의 색이 B가 아닌 경우에 방문처리 해주고 q에 넣는다. 이때 B만 아니면 같은 구역이므로 R과 G를 같은 것으로 처리한다.

B의 구역은 앞서 bfs()에서 찾아냈으므로, 굳이 또 안 구해도 된다.

### B-3. 풀이3

```py
RGB = {'R':0, 'G':0, 'B':0}
RG = 0

for i in range(n):
    for j in range(n):
        if visited[i][j] == 0:
            RGB[graph[i][j]] += 1
            bfs(i, j)

for i in range(n):
    for j in range(n):
        if graph[i][j] != 'B' and visited[i][j] == 1:
            RG += 1
            bfs2(i, j)
```

RGB를 딕셔너리로 만들고, 2중 for문으로 순회하며 아직 방문하지 않은 곳은 그때의 색을 RGB 딕셔너리에 넣고, bfs()로 이어진 구역을 모두 방문처리 해준다.

다시 2중 for문으로 적녹색약의 경우를 구하는데, B는 이미 구했으므로 B가 아닌 경우와 방문하지 않은 경우만 체크해준다.

### B-4. 출력

```py
print(RGB['R'] + RGB['G'] + RGB['B'])
print(RG + RGB['B'])
```
RGB 딕셔너리로 구한 것을 활용해서 출력한다.

# 총평

이제 BFS 문제는 어느 정도 쉽게 풀 수 있을 것 같다. 예외 처리를 잘 해준다면 말이다. 기본적인 형식은 웬만하면 비슷하니까 예외 상황을 잘 캐치하는 능력을 기르자.

![10026](https://user-images.githubusercontent.com/83271772/159718854-84073550-3a2c-40bc-8978-106357e76250.PNG)