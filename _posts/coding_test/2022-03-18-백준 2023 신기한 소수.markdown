---
layout: post
title: "백준: 2023 신기한 소수"
excerpt: "Python, backtracking"
date: 2022-03-18 14:31:00 +0900
categories:
  - Baekjoon
tags:
  - backtracking
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [문제 풀이](#문제-풀이)
  - [A. 아이디어](#a-아이디어)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 풀이](#b-2-풀이)
- [총평](#총평)

# 문제

수빈이가 세상에서 가장 좋아하는 것은 소수이고, 취미는 소수를 가지고 노는 것이다. 요즘 수빈이가 가장 관심있어 하는 소수는 7331이다.

7331은 소수인데, 신기하게도 733도 소수이고, 73도 소수이고, 7도 소수이다. 즉, 왼쪽부터 1자리, 2자리, 3자리, 4자리 수 모두 소수이다! 수빈이는 이런 숫자를 신기한 소수라고 이름 붙였다.

수빈이는 N자리의 숫자 중에서 어떤 수들이 신기한 소수인지 궁금해졌다. N이 주어졌을 때, 수빈이를 위해 N자리 신기한 소수를 모두 찾아보자.

# 입력

첫째 줄에 N(1 ≤ N ≤ 8)이 주어진다.

# 출력

N자리 수 중에서 신기한 소수를 오름차순으로 정렬해서 한 줄에 하나씩 출력한다.

# 문제 풀이

## A. 아이디어

문제 출력의 예를 보면 첫째 자리 수는 항상 2, 3, 5, 7중 하나이다. 그리고 그 뒤에 등장하는 숫자는 1, 3, 7, 9 중 하나이다. 이를 응용하여 백트래킹하면 시간이 많이 줄어들 것이다.

## B. 코드 분석

### 전체 코드

```py
N = int(input())

def prime(n):
    for i in range(3, int(n ** 0.5), 2):
        if n % i == 0:
            return False
    return True

def solve(arr, cnt):
    if cnt == N:
        print(arr)
        return

    for i in ['1', '3', '7', '9']:
        temp = int(arr + i)
        if not prime(temp): continue
        else: solve(str(temp), cnt + 1)
        temp = arr

for i in ['2', '3', '5', '7']:
    solve(i, 1)
```

### B-1. 준비

```py
N = int(input())

def prime(n):
    for i in range(3, int(n ** 0.5), 2):
        if n % i == 0:
            return False
    return True
```
n은 좀 자주 쓰이는 변수명이라 N으로 자리수를 받았다.

prime 함수는 소수 판별 함수이다. 처음부터 에라토스테네스의 체로 거르려고 하니까 전체 수를 다 판별하다가 시간이 훅 지나간다. 그냥 주어진 수를 하나하나 처리하며 걸러내는 게 더 빠르다.

### B-2. 풀이

```py
def solve(arr, cnt):
    if cnt == N:
        print(arr)
        return

    for i in ['1', '3', '7', '9']:
        temp = int(arr + i)
        if not prime(temp): continue
        else: solve(str(temp), cnt + 1)
        temp = arr

for i in ['2', '3', '5', '7']:
    solve(i, 1)
```

첫 자리는 2, 3, 5, 7로 고정한 채로 탐색한다.

solve로 재귀를 돌며 소수가 아니면 깊이 들어간다. return으로 빠져나오면 다시 temp를 원상복귀해서 다음 수를 검사할 수 있도록 한다.

# 총평

소수 판별 때문에 시간을 조금 잡아먹은 문제. 조금씩 백트래킹에 익숙해지는 것 같다. 재귀에서 **조건 처리**랑 **재귀 전 및 재귀 후 처리**를 잘 하자.

![2023](https://user-images.githubusercontent.com/83271772/158944457-48da9560-bd0f-444b-b982-6cacb96b139c.PNG)