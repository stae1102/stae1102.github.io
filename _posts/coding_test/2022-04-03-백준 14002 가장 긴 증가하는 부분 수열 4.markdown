---
layout: post
title: "백준: 14002 가장 긴 증가하는 부분 수열4"
excerpt: "Python, DP"
date: 2022-04-03 14:02:00 +0900
categories:
  - Baekjoon
tags:
  - DP
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [예제 입력](#예제-입력)
- [예제 출력](#예제-출력)
- [문제 풀이](#문제-풀이)
  - [A. 접근](#a-접근)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 풀이](#b-2-풀이)
- [총평](#총평)

# 문제

수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열을 구하는 프로그램을 작성하시오.

예를 들어, 수열 A = {10, 20, 10, 30, 20, 50} 인 경우에 가장 긴 증가하는 부분 수열은 A = {10, 20, 10, 30, 20, 50} 이고, 길이는 4이다.

# 입력

첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000)이 주어진다.

둘째 줄에는 수열 A를 이루고 있는 $A_i$가 주어진다. (1 ≤ $A_i$ ≤ 1,000)

# 출력

첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.

둘째 줄에는 가장 긴 증가하는 부분 수열을 출력한다. 그러한 수열이 여러가지인 경우 아무거나 출력한다.

# 예제 입력

```
6
10 20 10 30 20 50
```

# 예제 출력

```
4
10 20 30 50
```

# 문제 풀이

[백준 11053 가장 긴 증가하는 부분 수열](https://www.acmicpc.net/problem/11053)

위 문제에서 가장 긴 증가하는 부분 수열을 출력해야 하는 게 추가된 문제.

이 문제는 수열의 크기가 1,000 이어서 O($N^2$)으로 풀 수 있었다.

이것보다 더 복잡도를 줄여야 하는 문제는 [백준 14003 가장 긴 증가하는 부분 수열 5](https://www.acmicpc.net/problem/14003) 이 문제이다. 이 문제에서는 이번에 풀이한 풀이가 시간 복잡도를 넘어버릴 것이라서 새로운 풀이가 필요할 것이다.

~~실제로도 python과 pypy 제출이 시간초과 되었다.~~

## A. 접근

11053에서 사용했던 풀이방법을 응용해서 풀이했다. max를 사용하면 그 인덱스를 구하지 못해서 if 조건문을 사용해서 idx를 저장해주었다.

dp 테이블과 함께 수열을 담을 s 리스트 변수를 만들어주었다.

그래서, d[i]보다 d[j] + 1이 더 클 때, s[j]의 값을 불러와 arr[i]와 더해서 s[i]에 저장해주었다.

그리고 따로 idx 변수를 두었고, idx는 항상 최댓값을 갖게 갱신을 시켜주었다. 그래서 출력에서 max를 따로 쓰지 않고 dp[idx]와 s[idx]를 사용했다.

## B. 코드 분석

### 전체 코드

```py
import sys
input = sys.stdin.readline

n = int(input())
arr = list(map(int, input().split()))
d = [1] * n
s = [[] for _ in range(n)]
s[0] = [arr[0]]

idx = 0
for i in range(1, n):
    s[i] = [arr[i]]
    for j in range(i):
        if arr[j] < arr[i]:
            if d[i] < d[j] + 1:
                d[i] = d[j] + 1
                s[i] = s[j] + [arr[i]]
                if d[idx] < d[i]:
                    idx = i
            
print(d[idx])
print(*s[idx])
```

### B-1. 준비

```py
import sys
input = sys.stdin.readline

n = int(input())
arr = list(map(int, input().split()))
d = [1] * n
s = [[] for _ in range(n)]
s[0] = [arr[0]]

idx = 0
```
카운팅을 담을 d와 수열을 담을 s를 준비한다.

### B-2. 풀이

```py
for i in range(1, n):
    s[i] = [arr[i]]
    for j in range(i):
        if arr[j] < arr[i]:
            if d[i] < d[j] + 1:
                d[i] = d[j] + 1
                s[i] = s[j] + [arr[i]]
                if d[idx] < d[i]:
                    idx = i
            
print(d[idx])
print(*s[idx])
```

최댓값을 갱신할 수 있을 때 잘 갱신해준다.

# 총평

시간 복잡도를 줄이려면 bisect를 잘 활용해야겠다. 이후에 수열을 찾으려면 역추적을 사용해보자.

![14002](https://user-images.githubusercontent.com/83271772/161413372-20938441-ec41-410c-affa-f28581dc8de9.PNG)
