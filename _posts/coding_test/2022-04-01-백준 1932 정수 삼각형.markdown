---
layout: post
title: "백준: 1932 정수 삼각형"
excerpt: "Python, DP"
date: 2022-04-01 19:24:00 +0900
categories:
  - Baekjoon
tags:
  - DP
---

# 문제

```
        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5
```

위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

# 입력

첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

# 출력

첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.

# 예제 입력

```
5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5
```

# 예제 출력

```
30
```

# 문제 풀이

## A. 접근

dp 테이블에서 일단 이전 시점의 dp와 현재 시점의 dp, 그리고 dp에서 각 인덱스에서의 값들이 필요하기 때문에 2차원 리스트의 dp 테이블을 생성하였다.

예제 입력을 보면 가능한 방향은 바로 다음 층의 같은 인덱스와 다음 층의 인덱스 + 1로 내려오면서 더할 수 있다.

d[i + 1][j] = d[i][j] + arr[i + 1][j], d[i + 1][j + 1] = d[i][j] + d[i + 1][j + 1] 이렇게 두 개이다.

이때, d[i + 1][j]는 d[i + 1][j - 1]에서 구할 수 있는 값도 있어서 max를 통해 저장해야 한다. 즉, d[i + 1][j] = max(d[i + 1][j], d[i][j] + d[i + 1][j])로 점화식을 세우면 된다.

## B. 풀이

### 전체 코드

```py
import sys
input = sys.stdin.readline

N = int(input())

arr = [[] for _ in range(N + 1)]
arr[1:] = [list(map(int, input().split())) for _ in range(N)]
d = [[0] * i for i in range(N + 1)]
d[1] = arr[1]

for i in range(1, N):
    for j in range(len(arr[i])):
        d[i + 1][j] = max(d[i + 1][j], d[i][j] + arr[i + 1][j])
        d[i + 1][j + 1] = max(d[i + 1][j + 1], d[i][j] + arr[i + 1][j + 1])

print(max(d[N]))
```

### B-1. 준비

```py
import sys
input = sys.stdin.readline

N = int(input())

arr = [[] for _ in range(N + 1)]
arr[1:] = [list(map(int, input().split())) for _ in range(N)]
d = [[0] * i for i in range(N + 1)]
d[1] = arr[1]
```

리스트를 편하게 불러오기 위해서 arr과 d의 len을 N + 1로 정했다.

### B-2. 풀이

```py
for i in range(1, N):
    for j in range(len(arr[i])):
        d[i + 1][j] = max(d[i + 1][j], d[i][j] + arr[i + 1][j])
        d[i + 1][j + 1] = max(d[i + 1][j + 1], d[i][j] + arr[i + 1][j + 1])

print(max(d[N]))
```

위에서 고안해둔 점화식에 따라서 dp 테이블을 구한다.

# 총평

문제가 쉬운 것도 있지만 점점 익숙해지고 있다.

![1932](https://user-images.githubusercontent.com/83271772/161247691-cc11b86c-a1d4-4a1b-b950-905edab047c4.PNG)
