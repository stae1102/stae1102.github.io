---
layout: post
title: "백준: 11401 이항 계수 3"
excerpt: "Python, Divide & Conquer"
date: 2022-03-26 18:40:00 +0900
categories:
  - Baekjoon
tags:
  - Divide & Conquer
---

- [문제](#문제)
- [입력](#입력)
- [출력](#출력)
- [예제 입력 1](#예제-입력-1)
- [예제 출력 1](#예제-출력-1)
- [문제 풀이](#문제-풀이)
  - [A. 아이디어](#a-아이디어)
  - [B. 코드 분석](#b-코드-분석)
    - [전체 코드](#전체-코드)
    - [B-1. 준비](#b-1-준비)
    - [B-2. 풀이](#b-2-풀이)
    - [B-3. 출력](#b-3-출력)
- [총평](#총평)

# 문제

자연수 $N$과 정수 $K$가 주어졌을 때 이항 계수 
$\binom{N}{K}$를 1,000,000,007로 나눈 나머지를 구하는 프로그램을 작성하시오.

# 입력

첫째 줄에 $N$과 $K$가 주어진다. (1 ≤ $N$ ≤ 4,000,000, 0 ≤ $K$ ≤ $N$)

# 출력

$\binom{N}{K}$를 1,000,000,007로 나눈 나머지를 출력한다.

# 예제 입력 1

```
5 2
```

# 예제 출력 1

```
10
```

# 문제 풀이

## A. 아이디어

페르마의 소정리를 통해 모듈로 곱셈 역원을 찾는 문제. 구글링하면서 페르마의 소정리를 찾아서 이항 계수를 구하는 방법을 계산해야 했다.

* 참고
* https://m.blog.naver.com/hongjg3229/221650178981
* https://www.acmicpc.net/board/view/15795

이항 계수를 들어가기 앞서 모듈러 연산은 분수에서 사용할 수 없다.

$$(\frac{n!}{k!(n-k!)}) \% P \neq \frac{n!\%P}{k!(n-k)!\%P} $$

왜냐하면, 분모가 0이 될 수 있기 때문이다.

페르마의 소정리를 이용해 역원을 구하여 분모를 정수로 바꿔주는 방법이다.

페르마의 소정리란 다음의 수식을 의미한다.
$$B^{P-1} \equiv 1 (mod\,P)$$
이 수식을 다음과 같이 바꿀 수 있다.
$$B * B^{P-2} \equiv 1 (mod\,P)$$
$$B^{P-2} \equiv B^{-1} (mod\,P)$$

본래 이항계수가

$$(\frac{n!}{k!(n-k!)}) = n!*(k!(n-k!))^{-1} = A*B^{-1}$$
의 꼴이기 때문에 이것을 다음과 같이 바꿔줄 수 있다.

$$A*B^{-1}\%P = A*B^{P-2}\%P = (A\%P)(B^{P-2}\%P)\%P$$

이제 B의 (p-2) 제곱을 구해주면 되고 B의 p-2 제곱은 분할정복으로 구할 수 있다.

## B. 코드 분석

### 전체 코드

```py
n, k = map(int, input().split())

a = 1
b = 1
mod = 1000000007

def pow(a, b):
    if b == 0: return 1
    if b % 2: return pow(a, b - 1) * a % mod
    half = pow(a, b // 2) % mod
    return half * half % mod

# n! 부분
for i in range(1, n + 1):
    a *= i
    a %= mod

# k! 부분
for i in range(1, k + 1):
    b *= i
    b %= mod

# (n - k)!부분
for i in range(1, (n - k) + 1):
    b *= i
    b %= mod

b = pow(b, mod-2) # B^(p - 2) 부분

ans = a * b % mod
print(ans)
```

### B-1. 준비

```py
n, k = map(int, input().split())

a = 1
b = 1
mod = 1000000007

def pow(a, b):
    if b == 0: return 1
    if b % 2: return pow(a, b - 1) * a % mod
    half = pow(a, b // 2) % mod
    return half * half % mod
```

이번 문제로 많은 것을 배웠다. 그중 가장 중요하다고 생각하는 것은 제곱의 분할 정복이다. 제곱수가 홀수일 때는 제곱수에 -1을 해주고 a를 곱하여 다시 함수를 불러온다. 짝수일 때는 그것을 둘로 나누어 다시 구한다.

이런 방법은 나중에 큰 제곱을 구할 때 도움이 꽤 많이 될 것 같다.

### B-2. 풀이

```py
# n! 부분
for i in range(1, n + 1):
    a *= i
    a %= mod

# k! 부분
for i in range(1, k + 1):
    b *= i
    b %= mod

# (n - k)!부분
for i in range(1, (n - k) + 1):
    b *= i
    b %= mod

b = pow(b, mod-2) # B^(p - 2) 부분
```

n!과 k!(n-k)!를 구한다. 다 구했으면 B^(p-2)를 구하기 위해 함수를 불러온다.

### B-3. 출력

```py
ans = a * b % mod
print(ans)
```
마지막에도 1000000007로 나누어 출력한다.

# 총평

처음 보는 방법이었는데, 나중에 매우 큰 수의 조합이 나오더라도 참고해서 풀이하면 좋을 것 같다.

![11401](https://user-images.githubusercontent.com/83271772/160235906-b5974bb2-f17f-4b86-9405-385a65619969.PNG)