---
layout: post
title: "백준: 16236 아기 상어"
excerpt: "Python, BFS, Implementation, Simulation"
date: 2022-03-24 21:20 +0900
categories:
  - Baekjoon
tags:
  - BFS
  - Implementation
  - Simulation
---

# 문제

N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.

아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고, 아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.

아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다. 아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.

아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.

* 더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.
* 먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.
* 먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.
  * 거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.
  * 거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.

아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면, 이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.

아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를 들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.

공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.

# 입력

첫째 줄에 공간의 크기 N(2 ≤ N ≤ 20)이 주어진다.

둘째 줄부터 N개의 줄에 공간의 상태가 주어진다. 공간의 상태는 0, 1, 2, 3, 4, 5, 6, 9로 이루어져 있고, 아래와 같은 의미를 가진다.

* 0: 빈 칸
* 1, 2, 3, 4, 5, 6: 칸에 있는 물고기의 크기
* 9: 아기 상어의 위치

아기 상어는 공간에 한 마리 있다.

# 출력

첫째 줄에 아기 상어가 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는 시간을 출력한다.

# 예제 입력 1

```
3
0 0 0
0 0 0
0 9 0
```

# 예제 출력 1

```
0
```

# 문제 풀이

## A. 아이디어

문제의 조건이 다양해서 분기들을 나누느라 힘들었다. 풀이의 시퀀스는 다음과 같다.

1. 모든 곳을 순회하여 최소 거리와 최소 좌표를 구한다.

2-1. 순회하면서 최소 거리를 구한 경우, 최소 좌표에 있었던 물고기를 먹는다.

2-1-1. 충분히 먹었으면 상어 사이즈를 1 늘리고, 먹은 물고기를 0으로 초기화한다(아니면 남은 물고기 수에서 -1씩 줄이면서 남은 물고기가 1개일 때 레벨 = 남은 물고기로 해도 된다).

2-1-2. 먹은 물고기 수를 +1 한다.

2-2. 순회하면서 최소 거리를 구하지 못한 경우, 먹을 수 없는 물고기로 판단, while 문을 종료한다.

3. 정답을 출력한다.

조건이 많기 때문에 노트에 정리하면서 순서를 정리해보는 것이 좋다.

## B. 코드 분석

### 전체 코드

```py
from collections import deque
import sys
input = sys.stdin.readline

N = int(input())

board = []

# 맵 입력 및 상어 위치 출력
for i in range(N):
    a = list(map(int, input().split()))
    if 9 in a: shark = [i, a.index(9)] # x, y, 크기, 먹은 물고기
    board.append(a)
board[shark[0]][shark[1]] = 0

# 나머지 로직은 다 맞는데, 최단거리 물고기를 찾지 못함 ㅠㅠ 다시 로직 작성하기.
dx = [-1, 0, 1, 0]
dy = [0, -1, 0, 1]

size = 2
ate = 0
ans = 0

def find_fish(x, y):
    global size, ate
    arr = []
    visited = [[0] * N for _ in range(N)]
    visited[x][y] = 1
    q = deque([(x, y, 0)])

    while q:
        x, y, cnt = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:
                if size < board[nx][ny]:
                    continue
                visited[nx][ny] = 1
                q.append((nx, ny, cnt + 1))
                if size > board[nx][ny] and board[nx][ny]:
                    arr.append((cnt + 1, nx, ny))

    # 물고기를 먹은 경우
    if arr:
        if ate + 1 == size:
            ate = 0
            size += 1
        else:
            ate += 1

        MIN = min(arr)
        board[MIN[1]][MIN[2]] = 0
        return MIN[0], MIN[1], MIN[2]

    # 물고기를 먹지 못한 경우
    else:
        return 0, 0, 0

def bfs(x, y):
    global ans

    # x, y는 시작지점
    q = deque()
    q.append((x, y)) # x좌표, y좌표, 이동 횟수

    while q:
        x, y = q.popleft()
        cnt, x, y = find_fish(x, y)
        # 물고기를 먹었을 때, 이동한 거리만큼 추가
        if cnt:
            ans += cnt
            q.append((x, y)) # 다음 상어 로직 시작 위치
    
    # 아무 물고기도 못 먹은 경우에는 0 출력
    if ans == 0:
        return 0
    else:
        return ans

print(bfs(shark[0], shark[1]))
```

### B-1. 준비

```py
from collections import deque
import sys
input = sys.stdin.readline

N = int(input())

board = []

# 맵 입력 및 상어 위치 출력
for i in range(N):
    a = list(map(int, input().split()))
    if 9 in a: shark = [i, a.index(9)] # x, y, 크기, 먹은 물고기
    board.append(a)
board[shark[0]][shark[1]] = 0

# 나머지 로직은 다 맞는데, 최단거리 물고기를 찾지 못함 ㅠㅠ 다시 로직 작성하기.
dx = [-1, 0, 1, 0]
dy = [0, -1, 0, 1]

size = 2
ate = 0
ans = 0
```

맵을 입력하면서, 상어를 발견하면 위치를 저장해주고, 나중에 방해되지 않게 상어의 위치를 0으로 바꾼다. 기본 크기는 2로, 먹은 물고기를 0으로, 엄마 상어를 부르기까지 걸린 시간을 0으로 초기화한다.

### B-2. 풀이1

```py
def find_fish(x, y):
    global size, ate
    arr = []
    visited = [[0] * N for _ in range(N)]
    visited[x][y] = 1
    q = deque([(x, y, 0)])

    while q:
        x, y, cnt = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:
                if size < board[nx][ny]:
                    continue
                visited[nx][ny] = 1
                q.append((nx, ny, cnt + 1))
                if size > board[nx][ny] and board[nx][ny]:
                    arr.append((cnt + 1, nx, ny))

    # 물고기를 먹은 경우
    if arr:
        if ate + 1 == size:
            ate = 0
            size += 1
        else:
            ate += 1

        MIN = min(arr)
        board[MIN[1]][MIN[2]] = 0
        return MIN[0], MIN[1], MIN[2]

    # 물고기를 먹지 못한 경우
    else:
        return 0, 0, 0
```

상어의 위치를 함수의 인수로 넣고 새롭게 방문 테이블을 초기화한다. 시작 위치는 방문처리해준다.

q가 빌 때까지, 모든 곳을 순회한다. 상어 사이즈보다 큰 물고기를 만나면 못 지나가기 때문에 continue한다. 그 외에는 방문처리 해준다.

상어 사이즈가 더 크고, 0이 아닐 경우에 물고기를 찾은 것이므로 arr 배열에 저장한다. 모든 곳을 순회했다면 while문을 탈출한다.

물고기를 먹은 경우에는 한 마리를 먹은 것이므로 상어의 크기와 먹은 물고기를 계산한다. 이후, min함수로 최단 거리와 그때의 좌표를 구하고, 리턴한다. 구하지 못했으면 0을 리턴한다.

### B-3. 풀이3 & 출력

```py
def bfs(x, y):
    global ans

    # x, y는 시작지점
    q = deque()
    q.append((x, y)) # x좌표, y좌표, 이동 횟수

    while q:
        x, y = q.popleft()
        cnt, x, y = find_fish(x, y)
        # 물고기를 먹었을 때, 이동한 거리만큼 추가
        if cnt:
            ans += cnt
            q.append((x, y)) # 다음 상어 로직 시작 위치
    
    # 아무 물고기도 못 먹은 경우에는 0 출력
    if ans == 0:
        return 0
    else:
        return ans

print(bfs(shark[0], shark[1]))
```

물고기를 먹었으면 계속 q에 넣어주고, cnt를 ans에 저장한다. 모든 조건을 충족하고 엄마 상어를 부르게 되었을 때 ans를 출력한다.

# 총평

조건이 너무 많아서 솔직히 당황했는데, 무난하게 풀어낸 게 더 당황스러웠다. 조건이 많으면 침착하게 순서를 정리하고 나를 믿는 것이 중요하다. 아기 상어 시리즈가 상당히 많은 것으로 아는데, 풀다보면 구현 마스터가 되지 않을까?

![16236](https://user-images.githubusercontent.com/83271772/159918454-6f7924be-2e1d-4be7-a0d0-f81dbb380ebf.PNG)