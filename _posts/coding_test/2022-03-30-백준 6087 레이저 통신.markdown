---
layout: post
title: "백준: 6087 레이저 통신"
excerpt: "Python, BFS, Dijkstra"
date: 2022-03-30 20:21:00 +0900
categories:
  - Baekjoon
tags:
  - BFS
  - Dijkstra
---

# 문제

크기가 1×1인 정사각형으로 나누어진 W×H 크기의 지도가 있다. 지도의 각 칸은 빈 칸이거나 벽이며, 두 칸은 'C'로 표시되어 있는 칸이다.

'C'로 표시되어 있는 두 칸을 레이저로 통신하기 위해서 설치해야 하는 거울 개수의 최솟값을 구하는 프로그램을 작성하시오. 레이저로 통신한다는 것은 두 칸을 레이저로 연결할 수 있음을 의미한다.

레이저는 C에서만 발사할 수 있고, 빈 칸에 거울('/', '\')을 설치해서 방향을 90도 회전시킬 수 있다. 

아래 그림은 H = 8, W = 7인 경우이고, 빈 칸은 '.', 벽은 '*'로 나타냈다. 왼쪽은 초기 상태, 오른쪽은 최소 개수의 거울을 사용해서 두 'C'를 연결한 것이다.

```
7 . . . . . . .         7 . . . . . . .
6 . . . . . . C         6 . . . . . /-C
5 . . . . . . *         5 . . . . . | *
4 * * * * * . *         4 * * * * * | *
3 . . . . * . .         3 . . . . * | .
2 . . . . * . .         2 . . . . * | .
1 . C . . * . .         1 . C . . * | .
0 . . . . . . .         0 . \-------/ .
  0 1 2 3 4 5 6           0 1 2 3 4 5 6
```

# 입력

첫째 줄에 W와 H가 주어진다. (1 ≤ W, H ≤ 100)

둘째 줄부터 H개의 줄에 지도가 주어진다. 지도의 각 문자가 의미하는 것은 다음과 같다.

* .: 빈 칸
* *: 벽
* C: 레이저로 연결해야 하는 칸

'C'는 항상 두 개이고, 레이저로 연결할 수 있는 입력만 주어진다.

# 출력

첫째 줄에 C를 연결하기 위해 설치해야 하는 거울 개수의 최솟값을 출력한다.

# 예제 입력

```
7 8
.......
......C
......*
*****.*
....*..
....*..
.C..*..
.......
```

# 예제 출력

```
3
```

# 문제 풀이

거울은 방향을 바꿀 때 필요하다. 거울의 개수를 최소화하는 방향으로 도착하므로 다익스트라 BFS를 통해 풀이한다. 방향이 중요하기 때문에 BFS로 순회할 때 방향도 함께 저장해준다. 그 이후에 방향이 동일하면 그대로 큐에 넣어주고, 방향이 다르면 거울의 개수를 1개 더하여 큐에 넣어준다.

---
또 다른 방법으로는, BFS로 for i in range(4)와 같이 방향을 통해 다음 노드를 정할 때, while문으로 한 방향으로 쭉 전진하는 방법도 있다.

## A. 다익스트라(우선순위 큐)

### 전체 코드

```py
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)
W, H = map(int, input().split())

graph = [list(input().rstrip()) for _ in range(H)]
visited = [[INF] * W for _ in range(H)]

mirror_cnt = 0
mx1, my1, mx2, my2 = 0, 0, 0, 0

for i in range(H):
    for j in range(W):
        if graph[i][j] == 'C':
            if mirror_cnt == 0:
                mx1, my1 = i, j
                mirror_cnt += 1
            else:
                mx2, my2 = i, j
                break

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

q = []
ans = INF
# (cnt, direction, x, y)
heapq.heappush(q, (0, 0, mx1, my1))
heapq.heappush(q, (0, 1, mx1, my1))
heapq.heappush(q, (0, 2, mx1, my1))
heapq.heappush(q, (0, 3, mx1, my1))

while q:
    cnt, direction, x, y = heapq.heappop(q)
    if x == mx2 and y == my2:
        ans = min(ans, cnt)
    else:
        for i in range(4):
            nx = x + dx[i]; ny = y + dy[i]
            if 0 <= nx < H and 0 <= ny < W and graph[nx][ny] != '*':
                if i != direction:
                    if visited[nx][ny] >= cnt + 1:
                        visited[nx][ny] = cnt + 1
                        heapq.heappush(q, (cnt + 1, i, nx, ny))
                else:
                    if visited[nx][ny] >= cnt:
                        visited[nx][ny] = cnt
                        heapq.heappush(q, (cnt, i, nx, ny))

print(ans)
```

### A-1. 준비

```py
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)
W, H = map(int, input().split())

graph = [list(input().rstrip()) for _ in range(H)]
visited = [[INF] * W for _ in range(H)]

mirror_cnt = 0
mx1, my1, mx2, my2 = 0, 0, 0, 0

for i in range(H):
    for j in range(W):
        if graph[i][j] == 'C':
            if mirror_cnt == 0:
                mx1, my1 = i, j
                mirror_cnt += 1
            else:
                mx2, my2 = i, j
                break

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

q = []
ans = INF
# (cnt, direction, x, y)
heapq.heappush(q, (0, 0, mx1, my1))
heapq.heappush(q, (0, 1, mx1, my1))
heapq.heappush(q, (0, 2, mx1, my1))
heapq.heappush(q, (0, 3, mx1, my1))
```
최솟값을 찾기 위해 먼저 우선순위 큐를 불러온다. 그래프들을 돌아다니며 거울의 시작과 끝 좌표를 입력해준다.

cnt가 가장 적은 좌표를 뽑아내야 하기 때문에 우선순위 큐에 값을 넣어준다.

### A-2. 풀이

```py
while q:
    cnt, direction, x, y = heapq.heappop(q)
    if x == mx2 and y == my2:
        ans = min(ans, cnt)
    else:
        for i in range(4):
            nx = x + dx[i]; ny = y + dy[i]
            if 0 <= nx < H and 0 <= ny < W and graph[nx][ny] != '*':
                if i != direction:
                    if visited[nx][ny] >= cnt + 1:
                        visited[nx][ny] = cnt + 1
                        heapq.heappush(q, (cnt + 1, i, nx, ny))
                else:
                    if visited[nx][ny] >= cnt:
                        visited[nx][ny] = cnt
                        heapq.heappush(q, (cnt, i, nx, ny))

print(ans)
```

거울에 도착하면 ans 에 저장한다.

방향이 다르다면 거울을 사용하는 것이기 때문에 방문 테이블의 값이 카운트할 값보다 크거나 같으면 계속 전진하며 값을 초기화하고 우선순위 큐에 값을 넣어준다.

방향이 같고 방문할 곳의 카운트가 크거나 같다면 값을 초기화하고 우선순위 큐에 값을 넣어준다.

## B. BFS 응용

### 전체 코드

```py
from collections import deque
import sys
input = sys.stdin.readline
INF = int(1e9)
W, H = map(int, input().split())

graph = [list(input().rstrip()) for _ in range(H)]

mirror = []

for i in range(H):
    for j in range(W):
        if graph[i][j] == 'C':
            mirror.append((i, j))

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# 첫 시작 포인트를 통해 방향을 파악

def bfs(x, y):
    visited = [[INF] * W for _ in range(H)]
    q = deque([(x, y)])
    visited[x][y] = 0

    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            while True:
                if 0 <= nx < H and 0 <= ny < W and graph[nx][ny] != '*' and visited[nx][ny] >= visited[x][y] + 1:
                    q.append((nx, ny))
                    visited[nx][ny] = visited[x][y] + 1
                    nx += dx[i]
                    ny += dy[i]
                else:
                    break

    return visited[mirror[1][0]][mirror[1][1]]

ans = bfs(mirror[0][0], mirror[0][1])

print(ans - 1)
```

### B-1. 준비

```py
from collections import deque
import sys
input = sys.stdin.readline
INF = int(1e9)
W, H = map(int, input().split())

graph = [list(input().rstrip()) for _ in range(H)]

mirror = []

for i in range(H):
    for j in range(W):
        if graph[i][j] == 'C':
            mirror.append((i, j))

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# 첫 시작 포인트를 통해 방향을 파악
```
코드가 A와 조금 다르지만 기본 골자는 같다.

### B-2. 풀이

```py
def bfs(x, y):
    visited = [[INF] * W for _ in range(H)]
    q = deque([(x, y)])
    visited[x][y] = 0

    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            while True:
                if 0 <= nx < H and 0 <= ny < W and graph[nx][ny] != '*' and visited[nx][ny] >= visited[x][y] + 1:
                    q.append((nx, ny))
                    visited[nx][ny] = visited[x][y] + 1
                    nx += dx[i]
                    ny += dy[i]
                else:
                    break

    return visited[mirror[1][0]][mirror[1][1]]

ans = bfs(mirror[0][0], mirror[0][1])

print(ans - 1)
```
방문 테이블을 만들어주고 시작할 곳은 0으로 처리해준다. 큐에서 다음 좌표로의 방향을 고정해주고 while문을 돈다. 방향에 상관없이, 다음으로 방문할 곳이 지금 좌표보다 거울의 개수가 더 많이 필요하지 않은 경우에 큐에 값을 넣어주고, 그곳을 방문처리한다.

# 총평

BFS와 다익스트라가 같은 카테고리에 있는 것을 처음 봤을 때는 정말 당황스러웠는데 이제는 그냥 우선순위 큐를 쓰면 되는구나 하면서 익숙해지고 있다. 반례 처리가 조금 힘들었다.

![6087](https://user-images.githubusercontent.com/83271772/160829191-baa1208a-cfef-43db-a4cc-9b65a7bf592e.PNG)