---
layout: post
title: "백준: 6064 카잉 달력"
excerpt: "Python, Math, CRT"
date: 2022-03-23 15:04:00 +0900
categories:
  - Baekjoon
tags:
  - Math
  - CRT
---

# 문제

최근에 ICPC 탐사대는 남아메리카의 잉카 제국이 놀라운 문명을 지닌 카잉 제국을 토대로 하여 세워졌다는 사실을 발견했다. 카잉 제국의 백성들은 특이한 달력을 사용한 것으로 알려져 있다. 그들은 M과 N보다 작거나 같은 두 개의 자연수 x, y를 가지고 각 년도를 <x:y>와 같은 형식으로 표현하였다. 그들은 이 세상의 시초에 해당하는 첫 번째 해를 <1:1>로 표현하고, 두 번째 해를 <2:2>로 표현하였다. <x:y>의 다음 해를 표현한 것을 <x':y'>이라고 하자. 만일 x < M 이면 x' = x + 1이고, 그렇지 않으면 x' = 1이다. 같은 방식으로 만일 y < N이면 y' = y + 1이고, 그렇지 않으면 y' = 1이다. <M:N>은 그들 달력의 마지막 해로서, 이 해에 세상의 종말이 도래한다는 예언이 전해 온다. 

예를 들어, M = 10 이고 N = 12라고 하자. 첫 번째 해는 <1:1>로 표현되고, 11번째 해는 <1:11>로 표현된다. <3:1>은 13번째 해를 나타내고, <10:12>는 마지막인 60번째 해를 나타낸다. 

네 개의 정수 M, N, x와 y가 주어질 때, <M:N>이 카잉 달력의 마지막 해라고 하면 <x:y>는 몇 번째 해를 나타내는지 구하는 프로그램을 작성하라. 

# 입력

입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 구성된다. 입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다. 각 테스트 데이터는 한 줄로 구성된다. 각 줄에는 네 개의 정수 M, N, x와 y가 주어진다. (1 ≤ M, N ≤ 40,000, 1 ≤ x ≤ M, 1 ≤ y ≤ N) 여기서 <M:N>은 카잉 달력의 마지막 해를 나타낸다.

# 출력

출력은 표준 출력을 사용한다. 각 테스트 데이터에 대해, 정수 k를 한 줄에 출력한다. 여기서 k는 <x:y>가 k번째 해를 나타내는 것을 의미한다. 만일 <x:y>에 의해 표현되는 해가 없다면, 즉, <x:y>가 유효하지 않은 표현이면, -1을 출력한다.

# 예제 입력 1

```
3
10 12 3 9
10 12 7 2
13 11 5 6
```

# 예제 출력 1

```
33
-1
83
```

# 문제 풀이

## A. 아이디어

가만히 조건을 따라서 수들을 나열하다보니 일정 규칙이 생기는 것을 보았다.

예를 들어, 문제의 예에서 12 간격으로 떨어진 해는 그 전과 후의 x값의 차이가 2로 벌어져 있다거나(48 <8:12>, 60<10:12>처럼) 그 해를 m으로 나눈 나머지가 x, n으로 나눈 나머지가 y에 위치해 있었다. 이러한 규칙성을 참고하여 문제를 풀었다.

## B. 코드 분석

### 전체 코드

```py
import math
import sys
input = sys.stdin.readline

n = int(input())

def solve(arr):
    lcm = math.lcm(arr[0], arr[1])
    
    i = arr[2]
    temp = {i}
    
    while i <= lcm:
        temp.add(i + arr[0])
        i += arr[0]

    i = arr[3]
    while i <= lcm:
        if i in temp:
            return i
        i += arr[1]

    return -1

for _ in range(n):
    data = list(map(int, input().split()))
    print(solve(data))
```

### B-1. 준비

```py
import math
import sys
input = sys.stdin.readline

n = int(input())
```
먼저 마지막 해는 m과 n의 최소공배수이므로, math 모듈에서 lcm을 사용한다.

### B-2. 풀이

```py
def solve(arr):
    lcm = math.lcm(arr[0], arr[1])
    
    i = arr[2]
    temp = {i}
    
    while i <= lcm:
        temp.add(i + arr[0])
        i += arr[0]

    i = arr[3]
    while i <= lcm:
        if i in temp:
            return i
        i += arr[1]

    return -1
```

두 값의 최소 공배수를 받은 다음, x에 m을 계속 더해서 temp 집합에 저장했다. set()에 값을 넣는 시간 복잡도는 O(logN). 모든 값들을 저장한 다음에는 y에 n을 계속 더하고 그 값이 temp에 있을 경우 그 i 값을 리턴하고 그렇지 않으면 -1을 리턴한다. set()에 in 을 사용하는 시간 복잡도는 O(1).

### B-3. 출력

```py
for _ in range(n):
    data = list(map(int, input().split()))
    print(solve(data))
```

각 테스트 케이스 마다 함수를 불러온다.

## C. 좋은 답안

### 가독성

```py
import math
import sys
input = sys.stdin.readline

N = int(input())

def solve(arr):
    m, n, x, y = arr
    while x <= math.lcm(m, n):
        if x % n == y % n:
            return x
        x += m
    return -1

for _ in range(N):
    data = list(map(int, input().split()))
    print(solve(data))
```

x와 y의 최대 공약수가 같을 때 해가 존재한다는 조건을 통해 x와 y에 같은 n으로 나누고 그 값이 같을 때 x를 반환한다. 만약 같지 않다면 해가 존재하지 않기 때문에 -1을 리턴한다.

예를 들어, M=10, N=12, X=3, Y=9라고 해보자. X, Y = (3, 9)가 되는 해는 33년이다. 33은 12로 나눴을 때 9이고, 3에서 m을 세 번 더한 값이다. 

### 시간

```py
import sys


def sol():
    read = sys.stdin.readline
    for _ in range(int(read())):
        M, N, x, y = [int(x) for x in read().split()]
        print(eea(M, N, x, y))


def e_gcd(x, y):
    s = [1, 0]
    t = [0, 1]
    r = [x, y]
    while r[-1] != 0:
        q = r[-2] // r[-1]
        r = [r[-1], r[-2] - q * r[-1]]
        s = [s[-1], s[-2] - q * s[-1]]
        t = [t[-1], t[-2] - q * t[-1]]
    return [r[0], s[0], t[0]]


def eea(M, N, x, y):
    gcd, s, t = e_gcd(M, N)
    if x % gcd != y % gcd:
        return -1
    else:
        return (x - M * s * (x - y) // gcd) % (M * N // gcd)


if __name__ == "__main__":
    sol()
```

지금봐도 return 값이 이해가 잘 안된다. 그래서 유클리드 호제법이라도 얻어가기로 했다. 

## 유클리드 호제법

유클리드 호제법은 최대 공약수를 구하는 방법이다. 그 원리는 x와 y의 최대 공약수는 y, k의 최대 공약수와 같다는 원리를 이용한 것이다. 그림은 다음과 같다.

<p align='center'><img src='https://lh3.googleusercontent.com/pw/ACtC-3cVc-M8kNP4u5wvNilsNzdLbG6gltJviX3jeAm9RUHc6njlqLntO7VzX4hUnGtqsdOpePbE4yhiKjWhyrv5rSh1sWnF5b_YrnNDceSxsYjFYQXFhxbjYkxc8uj8_csTS3LtsMeXXbst6VC2M9d0mmpY=w487-h338-no?authuser=0'></p>  
출처: https://senalyst.com/algo/21/

x를 y로 나눈 나머지 r은 y의 자리로, y는 x의 자리로 옮겨서 다시 x % y를 한다. 그러다보면 x % y == 0일 때가 존재하는데 그것이 바로 최대 공약수라는 의미이다.

36과 50을 예로 들자면

```
36 % 50 == 36
50 % 36 == 14
36 % 14 == 8
14 % 8 == 6
8 % 6 == 2
6 % 2 == 0
```
이렇게 했을 때 2가 36과 50의 최대 공약수가 되는 것이다.

최대 공약수는 최소 공배수를 구할 수 있는 키가 된다. 최소 공배수를 구하는 식은 아래와 같다.

```py
lcm == (x * y) // gcd(x, y)
```
두 수를 곱하게 되면, 최종 결괏값은 x로도 나눌 수 있고, y로도 나눌 수 있다. 이때 공약수로 나누면 x의 배수가 될 수도 있고 y의 배수가 될 수도 있다. 그렇기 때문에 나누는 값인 공약수가 가장 크다면 그 나눈 값이 가장 작아지게 된다. 그래서 둘의 곱을 최대공약수로 나누는 것이다.

예를 들어 24 * 32 == 768 일 때, 768 // 4 == 192 이지만, 최대 공약수인 8로 나누면, 768 // 8 == 96 이 된다.

유클리드 호제법은 간단한 코드로 작성할 수 있다.

```py
def gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return x
```

# 총평

알고리즘 고수의 길은 멀고도 험하다... 그래도 유클리드 호제법을 다시 기억할 수 있어서 뿌듯하다. 중국인의 나머지 정리도 아직 조금 어렵다. 다른 문제를 더 풀면서 머리좀 식히고 다시 공부해보자

![6064](https://user-images.githubusercontent.com/83271772/159639730-493ceba4-4576-4859-b975-11cf979b41b6.PNG)