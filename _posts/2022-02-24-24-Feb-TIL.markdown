---
layout: post
title:  "23 Feb TIL: js 조건문, 반복문"
excerpt: "js 조건문, 반복문"
date:   2022-02-24 16:22:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Chapter 4. 흐름을 제어한다! 제어문

## 4-1. 조건에 따라 흐름 조절하기 - if문, if···else문과 조건 연산자

### if문과 if···else문 작동 원리 알아보기

* 프로그램을 짤 때, 작성 순서대로 명령이 실행되는 경우는 거의 없기에 조건에 따라서 명령 실행순서를 정해줍니다.

#### if문

* 소괄호 안의 조건이 true이면 중괄호 안의 자바스크립트 소스를 실행하고 false이면 중괄호 안의 자바스크립트 소스를 무시합니다.

```js
if(true) {
    document.write("if문의 조건을 만족하여 이 문장이 실행되었습니다.");
}
```

#### if···else문

* 조건을 확인해서 조건에 맞을 때 실행할 명령과 조건에 맞지 않을 때 실행할 명령이 따로 있다면 if문과 else문을 사용합니다.

* if문과 else문에서 실행할 명령이 둘 이상일 경우에는 중괄호 {}로 묶고 중괄호 안에 순서대로 명령을 나열합니다.

```js
var number = prompt("숫자를 입력하세요.");
if(number < 0) {
    alert("0 이상의 수를 입력하세요");
}
else {
    document.write("입력한 숫자: " + number);
}
```

### 조건 연산자 - ?(물음표)와 :(콜론)

* 만약 조건이 하나이고 true일 때와 false일 때 실행할 명령도 하나뿐이라면 if···else문 대신에 조건 연산자를 사용하는 것이 간단합니다.

* 조건 연산자를 사용할 때는 ? 왼쪽에 조건을 넣습니다. 그리고 : 왼쪽에는 조건이 true일 때 실행할 명령을 넣고 : 오른쪽에는 조건이 false일 때 실행할 명령을 넣습니다.

```js
var score = 75;
(score >= 60) ? alert("통과") : alert("실패");
```

### truthy 값과 falsy 값

* 논리형 자료 값인 true와 false 외 일반 값중에서도 'true로 인정할 수 있는 값'과 'false'로 인정할 수 있는 값'이 있습니다. 이 값을 'truthy하다', 'falsy하다'라고 표현합니다.

* 다음은 자바스크립트에서 falsy하게 인정하는 값이며, 이 값을 제외한 나머지 값은 true로 인정하는 값이 됩니다.

1. 0          // 숫지
2. ""         // 빈 문자열
3. NaN        // 숫자가 아님
4. undefined
5. null

* 조건문에서 프롬프트 창에 아무 것도 입력하지 않았거나 취소를 눌렀을 때 조건문을 통해 유용하게 처리할 수 있습니다.

```js
var input = prompt("이름을 입력하세요.");
if(input) {
    alert("이름을 입력했습니다 : " + input);
}
else {
    alert("이름을 입력하지 않았습니다.");
}
```

## 4-2. 조건이 많을 때 흐름 조절하기 - switch문

```html
<script>
  var session = prompt("관심 세션을 선택해 주세요. 1-마케팅, 2-개발, 3-디자인", "1");
  
  switch(session) {
    case "1" : document.write("<p>마케팅 세션은 <strong>201호</strong>에서 진행됩니다.</p>");
    break;
    case "2" : document.write("<p>개발 세션은 <strong>203호</strong>에서 진행됩니다.</p>");
    break;
    case "3" : document.write("<p>디자인 세션은 <strong>201호</strong>에서 진행됩니다.</p>");
    break;
  default: alert("잘못 입력했습니다.");
  }
</script>
```

* switch 예약어 오른쪽에 괄호와 함께 값을 확인할 변수를 지정합니다.
* 여러 가지 조건 값은 case문 다음에 콜론(:)을 붙여 지정하고, 해당 값일 때 실행할 명령어도 콜론 다음에 나열합니다. 둘 이상의 명령을 사용한다면 명령을 중괄호로 묶습니다.
* `break`문을 사용해서 명령을 실행한 다음에는 완전히 switch문을 빠져나오도록 소스를 작성합니다.
* 사용자가 입력한 값이 case문에서 지정한 조건 값과 전부 일치하지 않을 때 실행할 명령입니다. `default:`에서는 break문을 사용하지 않습니다.

## 4-3. 명령 반복 실행하기 - for문

* 반복문은 어떤 동작을 여러 번 실행하는 데 사용합니다. 반복문을 사용하면 여러 명령을 늘어놓지 않고 소스를 간단하게 작성할 수 있고, 작성한 소스의 양이 줄어들어 컴퓨터 실행속도가 빨라지는 장점이 있습니다.

### 언제 반복문이 필요할까?

* 바로 소스로 작성하기 어려울 만큼 많은 양의 연산을 처리해야 할 때 반복문을 사용합니다.

```html
<script>
    var sum = 0;

    for(var i = 1; i < 6; i++) { // i = 1부터 i = 5까지 총 5번 반복
        sum += i;                // sum = sum + i;를 줄여서 표현
    }
    document.write("1부터 5까지 더하면 " + sum);
</script>
```

* 1. 카운터 변수 선언(`var i = 1;`)
  * for문에서만 사용할 카운터 변수를 선언합니다.
* 2. for문의 조건식(`i < 6;`)
  * for문 안에 있는 소스를 실행할지 판단하는 조건입니다. 조건이 true라면 중괄호 안의 자바스크립트 소스를 실행하고, false라면 for문을 벗어나 다음에 나오는 소스를 실행합니다.
* 3. 반복 실행할 자바스크립트 소스(`sum += i;`)
  * for문에서 실행할 중괄호 안의 자바스크립트 소스입니다.
* 4. 카운터 변수 조절(`i++`)
  * 증감 연산자를 사용해 카운터 변수를 조절합니다. 위 소스에서는 중괄호를 실행한 이후 카운터 변수 i를 1만큼 증가(i++)시켰습니다.
  
#### for···of문

* ES6에는 인덱스를 사용하지 않고 값을 기준으로 반복합니다. 여러 값을 차례로 순회할 때, 인덱스 값이 필요 없다면 ES6에서는 for···of문을 사용합니다.

```js
let seasons = ["봄", "여름", "가을", "겨울"];
for(let value of seasons) {
    console.log(value);
}
```

## 4-4. for문 반복하기 - 중첩 for문

### 별찍기 실습

```js
for(var k = 0; k < 5; k++) {
    for(var i = 0; i < 30; i++) {
      document.write('*');
    }
    document.write("<br>");
}
```

### 구구단 프로그램 만들기

```html
<script>
    for(var i = 2; i <= 9; i++) {
        document.write("<div>");
        document.write("<h3>" + i + "단</h3>");
        for(var j = 1; j <= 9; j++) {
            document.write(i + "X" + j + " = " + i * j + "<br>");
        }
        document.write("</div>")
    }
</script>
```

## 4-5. 특정 조건에 따라 반복하기 - while문, do···while 문

* for문은 카운터 변수를 기준으로 명령을 반복하기 때문에 횟수가 정해져 있는 반복 명령에 유리한 반면, while문 및 do···while문은 특정 조건을 만족하는 동안에만 명령을 반복합니다.

### while문과 do···while문 간단히 알아보기

* while문은 괄호 안의 조건이 만족할 때 중괄호 안의 명령을 실행합니다. 그래서 다음 소스는 화면에 문장을 10번 표시합니다.

```js
var i = 0
while (i < 10) {
    document.write("반복 조건이 true이면 반복합니다. <br>");
    i += 1;
}
```
* 1. 조건 검사(`i < 10`)
  * 조건식을 검사합니다.
* 2. 중괄호 안의 자바스크립트 소스 실행(`{···}`)
  * 조건식이 참이면 중괄호 안의 자바스크립트 소스를 실행합니다.

* while문과 달리 do···while문은 조건이 맨뒤에 붙습니다. 그리고 do···while문은 일단 문장을 한 번 실행한 후 조건을 확인합니다. 조건 결괏값이 false라고 해도 일단 문장이 최소한 한 번은 실행됩니다.

```js
var i = 0
do {
    document.write("반복 조건이 true이면 반복합니다. <br>");
    i += 1;
} while (i < 10);
```

### 팩토리얼 계산기 만들기

```html
<script>
    var n = prompt("숫자를 입력하세요.");
    var nFact = 1; // 팩토리얼 계산 결괏값을 저장할 변수
    var i = 2; // 반복문에 사용할 카운터 변수

    while(i <= n) {
        nFact *= i;
        i++;
    }
    
    document.write(n + "!= " + nFact);
</script>
```

## 4-6. 반복을 건너뛰거나 멈추기 - break문, continue문

### break문 간단히 알아보기

* 다음은 break문을 사용한 별찍기의 예입니다.

```js
for(i = 0; i < 10; i++) {
    document.write("*");
    break;
}
```

* 위 코드의 결과는 *하나만 출력되게 됩니다. for문이 실행되고 `break`문을 만나서 반복문이 종료된 것이죠. **이렇게 break문은 반복문의 흐름에서 바로 빠져나올 때 사용합니다.**

### continue문 간단히 알아보기

* continue문은 주어진 조건에 맞는 값을 만났을 때 실행하던 반복문장을 건너뛰고 반복문의 맨 앞으로 되돌아가고, 다시 반복을 시작합니다.

```js
for (i = 0; i < 10; i++) {
    document.write("*");
    continue;
    document.write("continue문 때문에 이 문장은 건너뜁니다.");
}
```

### 짝수 더하기 프로그램 만들기

```html
<script>
    var n = 10;
    var sum = 0;

    for (var i = 1; i <= n; i++) {
        if (i % 2 === 1) {
            continue;
        }
        sum += i;

        document.write(i + " ------ " + sum + "<br>");
    }
</script>
```

---

# 운영체제의 개념과 구조: Chapter 1-2. Introduction& O/S structures


## 1.1 What Operating Systems Do

### 운영체제의 정의

* 컴퓨터 하드웨어를 제어하는 소프트웨어

* 어플리케이션 프로그램의 기반을 제공하며 컴퓨터 유저와 컴퓨터 하드웨어의 사이에서 중간 매개체 역할을 해준다.

### 컴퓨터의 4개의 컴포넌트

* 하드웨어
* 운영체제
* 어플리케이션 프로그램
* 유저

![컴퓨터 시스템의 컴포넌트](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.1.jpg)  

### 운영체제의 정의

* 운영체제의 정의는 정해진 것이 없다.
* 일반적인 정의는 '항상 컴퓨터에서 작동하는 프로그램 하나'라고 하며 **커널(kernel)** 이라고 한다.
* 커널에서 시스템 프로그램과 어플리케이션 프로그램에 대한 인터페이스를 제공해준다.
* 커널이 O/S의 핵심부분을 담당한다.

## 1.2 Computer-System Organization

### 전통적인 컴퓨터의 모양(Classical computer system)

![전통적인 컴퓨터 시스템](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.2.jpg)  

* 한개 이상의 CPU를 가지며 여러 개의 디바이스 컨트롤러와 버스(bus)를 통해서 연결되어 있다.(삽화 속 각 부품을 이은 선을 bus라고 생각)

### 부트스트랩 프로그램

* 부트스트래핑은 전원을 인가했을 때 처음으로 해야 할 프로그램이다.(롬에 저장되어 있으며 메모리에 운영체제를 로딩해주는 역할을 해야 함.)

* HDD에 있는 운영체제(커널)을 로드하여 메모리에 로드한다.

* 그 이후에는 운영체제에서 메모리에 응용프로그램을 운영

### Interrupts

![Interrupts](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.3.jpg)  

* 간단히 생각해서 CPU와 I/O device가 상호작용하는 것
* 하드웨어(Hardware)가 버스를 통해 언제라도 인터럽트(Interrupt)를 작동시킬 수 있다
* by sending a signal to the CPU, usually by way of the system bus.

### 폰 노이만 아키텍쳐

* 전형적인 명령 수행 사이클, 명령어 집합으로 구성된 컴퓨터 프로그램을 메모리에 로딩하면 메모리에 있는 명령어를 CPU가 하나씩 페치(fetch)하고 CPU가 execute 하는 사이클을 폰 노이만 아키텍쳐라고 부른다.

* 그러기 위해서는 명령어 레지스터(instruction register, IR)에 명령어를 저장한다.

### storage system

* 용량에 따라, 접근 속도에 따라 여러 개의 계층으로 구성되어 있는데, 가장 상위가 CPU에 있는 Register이고 그 다음이 cache이고, 그 다음이 램(main memory), SSD(solid-state disk, 메모리 형대의 저장소), HDD(hard disk), ...

### I/O Structure

![I/O Structure](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.7.jpg)  

* DMA: Directed Memory Access. CPU를 거치지 않고 디바이스와 메모리가 서로 주고 받는 과정(인터럽트 구조)

* OS 코드는 I/O 관리가 가장 중요한 부분이다.

## 1.3 Computer System Architecture

### 컴퓨터 시스템 컴포넌트의 정의

* CPU - The hardware that executes instructions.
* Processor - A physical chip that contains one or more CPUs.
* Core - The back computation unit of the CPU.
* Multicore - Including multiple computing cores on the same CPU.
* Multiprocessor - Including multiple processors.

### Symmetric multiprocessing (SMP)

![SMP](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.8.jpg)  

* 메모리에 연결되어 있는 CPU가 여러 개가 각각의 register와 cache를 갖고 있는 것.

### Multi-core design

![Multi-core design](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.9.jpg)  

* CPU 하나의 칩(Processor chip) 안에 register와 cache를 가지는 코어를 여러 개를 둔 것(듀얼 코어, 쿼드 코어, 옥타 코어)

* Multi-core cpu가 여러 개 붙으면 Multi-processor

## 1.4 Operating System Operations

### Multiprogramming

![Multiprogramming](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.12.jpg)

* 프로그램을 한 개 이상 구동하는 것

* 메모리에서 여러 개의 프로세스를 동시에 유지하는 것

* CPU 사용 효율을 높일 수 있음

### Multitasking(= multiprocessing)

* 하나의 CPU에서 여러 개의 프로세스를 자주 바꿔주면 여러 개의 프로세스를 동시에 작동하는 것처럼 유저가 인식하게 하는 과정

* concurrency, pallelism

* CPU scheduling
  * 멀티태스킹을 함에 앞서 cpu 효율을 제일 좋게 만드는 선택하는 방법

### Two separate mode of operations:

![Two models](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.13.jpg)

* user mode and kernel mode

* 부적절하게 다른 프로그램을 야기하지 않도록 막아주는 역할을 운영체제가 해야 한다.

* 커널 모드와 유저 모드를 분할하면 커널 모드에서만 할 수 있는 과정을 수행하도록 하여 O/S를 제외한 user 프로그램은 하드웨어를 제어하지 못함.

## 1.7 Virtualization

### Virtualization이란

* 하나의 컴퓨터의 하드웨어에서 여러 개의 다른 수행 환경을 끌어내는 것.

* VMM: Virtual Machine Manager
  - VMware, XEN, WSL, and so on.

![Virtualization](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%201.16.jpg)  

## 1.10 Computing Environments

### Operating Systems in the Variety of Computing Environments

* 전통 컴퓨팅
* 모바일 컴퓨팅
* Client-Server 컴퓨팅(ex. 웹 브라우저&웹 서버)
* Peer-to-Peer Computing(ex. 음악 파일 공유, BitTorrent, BitCoin, BlockChain)
* Cloud Computing(ex. AWS, Azure, GCP)
* Real-Time Embedded Systems

## 2.1 Operating System Services

### OS provides an environment for the execution of programse

컴퓨터 프로그램이 실행되리 수 있는 환경을 제공해주는 OS

* User interface
* Program execution
* I/O operation
* File-system manipulation
* Communications
* Error detection
* Resource allocation
* Logging
* Pretection and security

![OS services](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%202.1.jpg)

## 2.2 User and Operating-System Interface

### Three fundamental ways for users to interface with the OS:

* CLI: command line interface, or command interpreter
  - shells: sh, bash, csh, ...

* GUI: graphical user interface
  - Windows, MacOS, Linux, ...

* Touch-Screen Interface
  - Android, iOS, ...

## 2.3 System Calls

### System calls
실제로 컴퓨터 응용 프로그램은 os와 어떻게 interface 하는가? - system calls  

* API: Application Programming Interface
  - O/S의 API가 system calls

![system call](https://github.com/stae1102/Today-I-Learned-Everything/raw/master/Operating%20System/Fig%202.6.jpg)

* ex. C 라이브러리