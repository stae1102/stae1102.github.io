---
layout: post
title:  "23 Feb TIL: js 조건문, 반복문"
excerpt: "js 조건문, 반복문"
date:   2022-02-24 16:22:00 +0900
categories: 
  - Study
tags:
  - TIL
---

# Chapter 4. 흐름을 제어한다! 제어문

## 4-1. 조건에 따라 흐름 조절하기 - if문, if···else문과 조건 연산자

### if문과 if···else문 작동 원리 알아보기

* 프로그램을 짤 때, 작성 순서대로 명령이 실행되는 경우는 거의 없기에 조건에 따라서 명령 실행순서를 정해줍니다.

#### if문

* 소괄호 안의 조건이 true이면 중괄호 안의 자바스크립트 소스를 실행하고 false이면 중괄호 안의 자바스크립트 소스를 무시합니다.

```js
if(true) {
    document.write("if문의 조건을 만족하여 이 문장이 실행되었습니다.");
}
```

#### if···else문

* 조건을 확인해서 조건에 맞을 때 실행할 명령과 조건에 맞지 않을 때 실행할 명령이 따로 있다면 if문과 else문을 사용합니다.

* if문과 else문에서 실행할 명령이 둘 이상일 경우에는 중괄호 {}로 묶고 중괄호 안에 순서대로 명령을 나열합니다.

```js
var number = prompt("숫자를 입력하세요.");
if(number < 0) {
    alert("0 이상의 수를 입력하세요");
}
else {
    document.write("입력한 숫자: " + number);
}
```

### 조건 연산자 - ?(물음표)와 :(콜론)

* 만약 조건이 하나이고 true일 때와 false일 때 실행할 명령도 하나뿐이라면 if···else문 대신에 조건 연산자를 사용하는 것이 간단합니다.

* 조건 연산자를 사용할 때는 ? 왼쪽에 조건을 넣습니다. 그리고 : 왼쪽에는 조건이 true일 때 실행할 명령을 넣고 : 오른쪽에는 조건이 false일 때 실행할 명령을 넣습니다.

```js
var score = 75;
(score >= 60) ? alert("통과") : alert("실패");
```

### truthy 값과 falsy 값

* 논리형 자료 값인 true와 false 외 일반 값중에서도 'true로 인정할 수 있는 값'과 'false'로 인정할 수 있는 값'이 있습니다. 이 값을 'truthy하다', 'falsy하다'라고 표현합니다.

* 다음은 자바스크립트에서 falsy하게 인정하는 값이며, 이 값을 제외한 나머지 값은 true로 인정하는 값이 됩니다.

1. 0          // 숫지
2. ""         // 빈 문자열
3. NaN        // 숫자가 아님
4. undefined
5. null

* 조건문에서 프롬프트 창에 아무 것도 입력하지 않았거나 취소를 눌렀을 때 조건문을 통해 유용하게 처리할 수 있습니다.

```js
var input = prompt("이름을 입력하세요.");
if(input) {
    alert("이름을 입력했습니다 : " + input);
}
else {
    alert("이름을 입력하지 않았습니다.");
}
```

## 4-2. 조건이 많을 때 흐름 조절하기 - switch문

```html
<script>
  var session = prompt("관심 세션을 선택해 주세요. 1-마케팅, 2-개발, 3-디자인", "1");
  
  switch(session) {
    case "1" : document.write("<p>마케팅 세션은 <strong>201호</strong>에서 진행됩니다.</p>");
    break;
    case "2" : document.write("<p>개발 세션은 <strong>203호</strong>에서 진행됩니다.</p>");
    break;
    case "3" : document.write("<p>디자인 세션은 <strong>201호</strong>에서 진행됩니다.</p>");
    break;
  default: alert("잘못 입력했습니다.");
  }
</script>
```

* switch 예약어 오른쪽에 괄호와 함께 값을 확인할 변수를 지정합니다.
* 여러 가지 조건 값은 case문 다음에 콜론(:)을 붙여 지정하고, 해당 값일 때 실행할 명령어도 콜론 다음에 나열합니다. 둘 이상의 명령을 사용한다면 명령을 중괄호로 묶습니다.
* `break`문을 사용해서 명령을 실행한 다음에는 완전히 switch문을 빠져나오도록 소스를 작성합니다.
* 사용자가 입력한 값이 case문에서 지정한 조건 값과 전부 일치하지 않을 때 실행할 명령입니다. `default:`에서는 break문을 사용하지 않습니다.

## 4-3. 명령 반복 실행하기 - for문

* 반복문은 어떤 동작을 여러 번 실행하는 데 사용합니다. 반복문을 사용하면 여러 명령을 늘어놓지 않고 소스를 간단하게 작성할 수 있고, 작성한 소스의 양이 줄어들어 컴퓨터 실행속도가 빨라지는 장점이 있습니다.

### 언제 반복문이 필요할까?

* 바로 소스로 작성하기 어려울 만큼 많은 양의 연산을 처리해야 할 때 반복문을 사용합니다.

```html
<script>
    var sum = 0;

    for(var i = 1; i < 6; i++) { // i = 1부터 i = 5까지 총 5번 반복
        sum += i;                // sum = sum + i;를 줄여서 표현
    }
    document.write("1부터 5까지 더하면 " + sum);
</script>
```

* 1. 카운터 변수 선언(`var i = 1;`)
  * for문에서만 사용할 카운터 변수를 선언합니다.
* 2. for문의 조건식(`i < 6;`)
  * for문 안에 있는 소스를 실행할지 판단하는 조건입니다. 조건이 true라면 중괄호 안의 자바스크립트 소스를 실행하고, false라면 for문을 벗어나 다음에 나오는 소스를 실행합니다.
* 3. 반복 실행할 자바스크립트 소스(`sum += i;`)
  * for문에서 실행할 중괄호 안의 자바스크립트 소스입니다.
* 4. 카운터 변수 조절(`i++`)
  * 증감 연산자를 사용해 카운터 변수를 조절합니다. 위 소스에서는 중괄호를 실행한 이후 카운터 변수 i를 1만큼 증가(i++)시켰습니다.
  
#### for···of문

* ES6에는 인덱스를 사용하지 않고 값을 기준으로 반복합니다. 여러 값을 차례로 순회할 때, 인덱스 값이 필요 없다면 ES6에서는 for···of문을 사용합니다.

```js
let seasons = ["봄", "여름", "가을", "겨울"];
for(let value of seasons) {
    console.log(value);
}
```

## 4-4. for문 반복하기 - 중첩 for문

### 별찍기 실습

```js
for(var k = 0; k < 5; k++) {
    for(var i = 0; i < 30; i++) {
      document.write('*');
    }
    document.write("<br>");
}
```

### 구구단 프로그램 만들기

```html
<script>
    for(var i = 2; i <= 9; i++) {
        document.write("<div>");
        document.write("<h3>" + i + "단</h3>");
        for(var j = 1; j <= 9; j++) {
            document.write(i + "X" + j + " = " + i * j + "<br>");
        }
        document.write("</div>")
    }
</script>
```

## 4-5. 특정 조건에 따라 반복하기 - while문, do···while 문

* for문은 카운터 변수를 기준으로 명령을 반복하기 때문에 횟수가 정해져 있는 반복 명령에 유리한 반면, while문 및 do···while문은 특정 조건을 만족하는 동안에만 명령을 반복합니다.

### while문과 do···while문 간단히 알아보기

* while문은 괄호 안의 조건이 만족할 때 중괄호 안의 명령을 실행합니다. 그래서 다음 소스는 화면에 문장을 10번 표시합니다.

```js
var i = 0
while (i < 10) {
    document.write("반복 조건이 true이면 반복합니다. <br>");
    i += 1;
}
```
* 1. 조건 검사(`i < 10`)
  * 조건식을 검사합니다.
* 2. 중괄호 안의 자바스크립트 소스 실행(`{···}`)
  * 조건식이 참이면 중괄호 안의 자바스크립트 소스를 실행합니다.

* while문과 달리 do···while문은 조건이 맨뒤에 붙습니다. 그리고 do···while문은 일단 문장을 한 번 실행한 후 조건을 확인합니다. 조건 결괏값이 false라고 해도 일단 문장이 최소한 한 번은 실행됩니다.

```js
var i = 0
do {
    document.write("반복 조건이 true이면 반복합니다. <br>");
    i += 1;
} while (i < 10);
```

### 팩토리얼 계산기 만들기

```html
<script>
    var n = prompt("숫자를 입력하세요.");
    var nFact = 1; // 팩토리얼 계산 결괏값을 저장할 변수
    var i = 2; // 반복문에 사용할 카운터 변수

    while(i <= n) {
        nFact *= i;
        i++;
    }
    
    document.write(n + "!= " + nFact);
</script>
```

## 4-6. 반복을 건너뛰거나 멈추기 - break문, continue문

### break문 간단히 알아보기

* 다음은 break문을 사용한 별찍기의 예입니다.

```js
for(i = 0; i < 10; i++) {
    document.write("*");
    break;
}
```

* 위 코드의 결과는 *하나만 출력되게 됩니다. for문이 실행되고 `break`문을 만나서 반복문이 종료된 것이죠. **이렇게 break문은 반복문의 흐름에서 바로 빠져나올 때 사용합니다.**

### continue문 간단히 알아보기

* continue문은 주어진 조건에 맞는 값을 만났을 때 실행하던 반복문장을 건너뛰고 반복문의 맨 앞으로 되돌아가고, 다시 반복을 시작합니다.

```js
for (i = 0; i < 10; i++) {
    document.write("*");
    continue;
    document.write("continue문 때문에 이 문장은 건너뜁니다.");
}
```

### 짝수 더하기 프로그램 만들기

```html
<script>
    var n = 10;
    var sum = 0;

    for (var i = 1; i <= n; i++) {
        if (i % 2 === 1) {
            continue;
        }
        sum += i;

        document.write(i + " ------ " + sum + "<br>");
    }
</script>
```